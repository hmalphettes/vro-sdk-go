// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APITypes api types
//
// swagger:model api-types
type APITypes struct {

	// plugins
	Plugins []*SdkModuleType `json:"plugins"`

	// script categories
	ScriptCategories []*ScriptModuleCategory `json:"scriptCategories"`

	// system
	System *SystemTypes `json:"system,omitempty"`
}

// Validate validates this api types
func (m *APITypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APITypes) validatePlugins(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	for i := 0; i < len(m.Plugins); i++ {
		if swag.IsZero(m.Plugins[i]) { // not required
			continue
		}

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APITypes) validateScriptCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.ScriptCategories) { // not required
		return nil
	}

	for i := 0; i < len(m.ScriptCategories); i++ {
		if swag.IsZero(m.ScriptCategories[i]) { // not required
			continue
		}

		if m.ScriptCategories[i] != nil {
			if err := m.ScriptCategories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scriptCategories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scriptCategories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APITypes) validateSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.System) { // not required
		return nil
	}

	if m.System != nil {
		if err := m.System.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("system")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api types based on the context it is used
func (m *APITypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlugins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScriptCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APITypes) contextValidatePlugins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plugins); i++ {

		if m.Plugins[i] != nil {

			if swag.IsZero(m.Plugins[i]) { // not required
				return nil
			}

			if err := m.Plugins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APITypes) contextValidateScriptCategories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScriptCategories); i++ {

		if m.ScriptCategories[i] != nil {

			if swag.IsZero(m.ScriptCategories[i]) { // not required
				return nil
			}

			if err := m.ScriptCategories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scriptCategories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scriptCategories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APITypes) contextValidateSystem(ctx context.Context, formats strfmt.Registry) error {

	if m.System != nil {

		if swag.IsZero(m.System) { // not required
			return nil
		}

		if err := m.System.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("system")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("system")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APITypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APITypes) UnmarshalBinary(b []byte) error {
	var res APITypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
