// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskEventSource task event source
//
// swagger:model task-event-source
type TaskEventSource struct {
	WsPolicyEventSource

	// recurrence cycle
	// Enum: [ONE_TIME EVERY_MINUTES EVERY_HOURS EVERY_DAYS EVERY_WEEKS EVERY_MONTHS]
	RecurrenceCycle string `json:"recurrence-cycle,omitempty"`

	// recurrence pattern
	RecurrencePattern string `json:"recurrence-pattern,omitempty"`

	// time zone
	TimeZone string `json:"time-zone,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TaskEventSource) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WsPolicyEventSource
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WsPolicyEventSource = aO0

	// AO1
	var dataAO1 struct {
		RecurrenceCycle string `json:"recurrence-cycle,omitempty"`

		RecurrencePattern string `json:"recurrence-pattern,omitempty"`

		TimeZone string `json:"time-zone,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.RecurrenceCycle = dataAO1.RecurrenceCycle

	m.RecurrencePattern = dataAO1.RecurrencePattern

	m.TimeZone = dataAO1.TimeZone

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TaskEventSource) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WsPolicyEventSource)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		RecurrenceCycle string `json:"recurrence-cycle,omitempty"`

		RecurrencePattern string `json:"recurrence-pattern,omitempty"`

		TimeZone string `json:"time-zone,omitempty"`
	}

	dataAO1.RecurrenceCycle = m.RecurrenceCycle

	dataAO1.RecurrencePattern = m.RecurrencePattern

	dataAO1.TimeZone = m.TimeZone

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this task event source
func (m *TaskEventSource) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WsPolicyEventSource

	if err := m.validateRecurrenceCycle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskEventSourceTypeRecurrenceCyclePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONE_TIME","EVERY_MINUTES","EVERY_HOURS","EVERY_DAYS","EVERY_WEEKS","EVERY_MONTHS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskEventSourceTypeRecurrenceCyclePropEnum = append(taskEventSourceTypeRecurrenceCyclePropEnum, v)
	}
}

// property enum
func (m *TaskEventSource) validateRecurrenceCycleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskEventSourceTypeRecurrenceCyclePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskEventSource) validateRecurrenceCycle(formats strfmt.Registry) error {

	if swag.IsZero(m.RecurrenceCycle) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecurrenceCycleEnum("recurrence-cycle", "body", m.RecurrenceCycle); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this task event source based on context it is used
func (m *TaskEventSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskEventSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskEventSource) UnmarshalBinary(b []byte) error {
	var res TaskEventSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
