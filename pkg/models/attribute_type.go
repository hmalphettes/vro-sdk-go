// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttributeType attribute type
//
// swagger:model AttributeType
type AttributeType struct {

	// description
	Description string `json:"description,omitempty" xml:"description,attr,omitempty"`

	// external Url
	ExternalURL string `json:"externalUrl,omitempty" xml:"externalUrl,attr,omitempty"`

	// icon
	Icon string `json:"icon,omitempty" xml:"icon,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// readonly
	Readonly *bool `json:"readonly,omitempty" xml:"readonly,attr,omitempty"`

	// state
	// Enum: [RELEASE ALPHA BETA DEPRECATED]
	State string `json:"state,omitempty" xml:"state,attr,omitempty"`

	// type
	Type string `json:"type,omitempty" xml:"type,attr,omitempty"`
}

// Validate validates this attribute type
func (m *AttributeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var attributeTypeTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RELEASE","ALPHA","BETA","DEPRECATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attributeTypeTypeStatePropEnum = append(attributeTypeTypeStatePropEnum, v)
	}
}

const (

	// AttributeTypeStateRELEASE captures enum value "RELEASE"
	AttributeTypeStateRELEASE string = "RELEASE"

	// AttributeTypeStateALPHA captures enum value "ALPHA"
	AttributeTypeStateALPHA string = "ALPHA"

	// AttributeTypeStateBETA captures enum value "BETA"
	AttributeTypeStateBETA string = "BETA"

	// AttributeTypeStateDEPRECATED captures enum value "DEPRECATED"
	AttributeTypeStateDEPRECATED string = "DEPRECATED"
)

// prop value enum
func (m *AttributeType) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, attributeTypeTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AttributeType) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attribute type based on context it is used
func (m *AttributeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttributeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttributeType) UnmarshalBinary(b []byte) error {
	var res AttributeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
