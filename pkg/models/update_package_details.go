// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdatePackageDetails update package details
//
// swagger:model UpdatePackageDetails
type UpdatePackageDetails struct {

	// add items
	AddItems *PackageItemDetails `json:"add-items,omitempty"`

	// delete items
	DeleteItems *PackageItemDetails `json:"delete-items,omitempty"`

	// description
	Description string `json:"description,omitempty" xml:"description,attr,omitempty"`

	// items
	Items *PackageItemDetails `json:"items,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`
}

// Validate validates this update package details
func (m *UpdatePackageDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePackageDetails) validateAddItems(formats strfmt.Registry) error {
	if swag.IsZero(m.AddItems) { // not required
		return nil
	}

	if m.AddItems != nil {
		if err := m.AddItems.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("add-items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("add-items")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePackageDetails) validateDeleteItems(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteItems) { // not required
		return nil
	}

	if m.DeleteItems != nil {
		if err := m.DeleteItems.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete-items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete-items")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePackageDetails) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	if m.Items != nil {
		if err := m.Items.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("items")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update package details based on the context it is used
func (m *UpdatePackageDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePackageDetails) contextValidateAddItems(ctx context.Context, formats strfmt.Registry) error {

	if m.AddItems != nil {

		if swag.IsZero(m.AddItems) { // not required
			return nil
		}

		if err := m.AddItems.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("add-items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("add-items")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePackageDetails) contextValidateDeleteItems(ctx context.Context, formats strfmt.Registry) error {

	if m.DeleteItems != nil {

		if swag.IsZero(m.DeleteItems) { // not required
			return nil
		}

		if err := m.DeleteItems.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete-items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("delete-items")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePackageDetails) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	if m.Items != nil {

		if swag.IsZero(m.Items) { // not required
			return nil
		}

		if err := m.Items.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("items")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("items")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePackageDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePackageDetails) UnmarshalBinary(b []byte) error {
	var res UpdatePackageDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
