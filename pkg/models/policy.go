// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Policy policy
//
// swagger:model policy
type Policy struct {

	// description
	// Max Length: 1024
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// event handlers
	EventHandlers []*EventHandler `json:"eventHandlers" xml:"event-handler"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name" xml:"name,attr"`

	// parameter
	Parameter []*Parameter `json:"parameter" xml:"parameters"`

	// policy item
	PolicyItem []*PolicyItem `json:"policy-item" xml:"policy-items"`

	// priority
	// Enum: [VERY_LOW LOW MEDIUM HIGH VERY_HIGH]
	Priority string `json:"priority,omitempty"`

	// relations
	Relations *Relations `json:"relations,omitempty"`

	// started by
	StartedBy string `json:"started-by,omitempty"`

	// startup
	// Enum: [MANUAL AUTOMATIC]
	Startup string `json:"startup,omitempty"`

	// state
	// Enum: [STARTED STOPPED STOPPING STARTING]
	State string `json:"state,omitempty"`
}

// Validate validates this policy
func (m *Policy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventHandlers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Policy) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", *m.Description, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateEventHandlers(formats strfmt.Registry) error {
	if swag.IsZero(m.EventHandlers) { // not required
		return nil
	}

	for i := 0; i < len(m.EventHandlers); i++ {
		if swag.IsZero(m.EventHandlers[i]) { // not required
			continue
		}

		if m.EventHandlers[i] != nil {
			if err := m.EventHandlers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventHandlers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventHandlers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameter); i++ {
		if swag.IsZero(m.Parameter[i]) { // not required
			continue
		}

		if m.Parameter[i] != nil {
			if err := m.Parameter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) validatePolicyItem(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyItem) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyItem); i++ {
		if swag.IsZero(m.PolicyItem[i]) { // not required
			continue
		}

		if m.PolicyItem[i] != nil {
			if err := m.PolicyItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy-item" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policy-item" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var policyTypePriorityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypePriorityPropEnum = append(policyTypePriorityPropEnum, v)
	}
}

const (

	// PolicyPriorityVERYLOW captures enum value "VERY_LOW"
	PolicyPriorityVERYLOW string = "VERY_LOW"

	// PolicyPriorityLOW captures enum value "LOW"
	PolicyPriorityLOW string = "LOW"

	// PolicyPriorityMEDIUM captures enum value "MEDIUM"
	PolicyPriorityMEDIUM string = "MEDIUM"

	// PolicyPriorityHIGH captures enum value "HIGH"
	PolicyPriorityHIGH string = "HIGH"

	// PolicyPriorityVERYHIGH captures enum value "VERY_HIGH"
	PolicyPriorityVERYHIGH string = "VERY_HIGH"
)

// prop value enum
func (m *Policy) validatePriorityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypePriorityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriorityEnum("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *Policy) validateRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	if m.Relations != nil {
		if err := m.Relations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

var policyTypeStartupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","AUTOMATIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeStartupPropEnum = append(policyTypeStartupPropEnum, v)
	}
}

const (

	// PolicyStartupMANUAL captures enum value "MANUAL"
	PolicyStartupMANUAL string = "MANUAL"

	// PolicyStartupAUTOMATIC captures enum value "AUTOMATIC"
	PolicyStartupAUTOMATIC string = "AUTOMATIC"
)

// prop value enum
func (m *Policy) validateStartupEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypeStartupPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateStartup(formats strfmt.Registry) error {
	if swag.IsZero(m.Startup) { // not required
		return nil
	}

	// value enum
	if err := m.validateStartupEnum("startup", "body", m.Startup); err != nil {
		return err
	}

	return nil
}

var policyTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STARTED","STOPPED","STOPPING","STARTING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeStatePropEnum = append(policyTypeStatePropEnum, v)
	}
}

const (

	// PolicyStateSTARTED captures enum value "STARTED"
	PolicyStateSTARTED string = "STARTED"

	// PolicyStateSTOPPED captures enum value "STOPPED"
	PolicyStateSTOPPED string = "STOPPED"

	// PolicyStateSTOPPING captures enum value "STOPPING"
	PolicyStateSTOPPING string = "STOPPING"

	// PolicyStateSTARTING captures enum value "STARTING"
	PolicyStateSTARTING string = "STARTING"
)

// prop value enum
func (m *Policy) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Policy) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this policy based on the context it is used
func (m *Policy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventHandlers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Policy) contextValidateEventHandlers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventHandlers); i++ {

		if m.EventHandlers[i] != nil {

			if swag.IsZero(m.EventHandlers[i]) { // not required
				return nil
			}

			if err := m.EventHandlers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventHandlers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventHandlers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameter); i++ {

		if m.Parameter[i] != nil {

			if swag.IsZero(m.Parameter[i]) { // not required
				return nil
			}

			if err := m.Parameter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) contextValidatePolicyItem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyItem); i++ {

		if m.PolicyItem[i] != nil {

			if swag.IsZero(m.PolicyItem[i]) { // not required
				return nil
			}

			if err := m.PolicyItem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy-item" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policy-item" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) contextValidateRelations(ctx context.Context, formats strfmt.Registry) error {

	if m.Relations != nil {

		if swag.IsZero(m.Relations) { // not required
			return nil
		}

		if err := m.Relations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Policy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Policy) UnmarshalBinary(b []byte) error {
	var res Policy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
