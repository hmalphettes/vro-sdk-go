// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthorizationGroup authorization group
//
// swagger:model authorization-group
type AuthorizationGroup struct {

	// authorized entities
	AuthorizedEntities []*WsAuthorizedEntity `json:"authorizedEntities" xml:"authorized-entity"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty" xml:"label,attr,omitempty"`

	// protected resources
	ProtectedResources []*ResourceRef `json:"protectedResources" xml:"resource-reference"`
}

// Validate validates this authorization group
func (m *AuthorizationGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizedEntities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationGroup) validateAuthorizedEntities(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizedEntities) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthorizedEntities); i++ {
		if swag.IsZero(m.AuthorizedEntities[i]) { // not required
			continue
		}

		if m.AuthorizedEntities[i] != nil {
			if err := m.AuthorizedEntities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorizedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authorizedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthorizationGroup) validateProtectedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtectedResources) { // not required
		return nil
	}

	for i := 0; i < len(m.ProtectedResources); i++ {
		if swag.IsZero(m.ProtectedResources[i]) { // not required
			continue
		}

		if m.ProtectedResources[i] != nil {
			if err := m.ProtectedResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this authorization group based on the context it is used
func (m *AuthorizationGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorizedEntities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProtectedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationGroup) contextValidateAuthorizedEntities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuthorizedEntities); i++ {

		if m.AuthorizedEntities[i] != nil {

			if swag.IsZero(m.AuthorizedEntities[i]) { // not required
				return nil
			}

			if err := m.AuthorizedEntities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("authorizedEntities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("authorizedEntities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthorizationGroup) contextValidateProtectedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProtectedResources); i++ {

		if m.ProtectedResources[i] != nil {

			if swag.IsZero(m.ProtectedResources[i]) { // not required
				return nil
			}

			if err := m.ProtectedResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protectedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("protectedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationGroup) UnmarshalBinary(b []byte) error {
	var res AuthorizationGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
