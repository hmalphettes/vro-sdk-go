// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchemaWorkflow schema workflow
//
// swagger:model schema-workflow
type SchemaWorkflow struct {

	// allowed operations
	AllowedOperations string `json:"allowed-operations,omitempty" xml:"allowed-operations,attr,omitempty"`

	// api version
	APIVersion string `json:"api-version,omitempty" xml:"api-version,attr,omitempty"`

	// attrib
	// Required: true
	Attrib []*Parameter `json:"attrib"`

	// description
	// Required: true
	Description *string `json:"description"`

	// display name
	// Required: true
	DisplayName *string `json:"display-name"`

	// error handler
	ErrorHandler []*ErrorHandler `json:"error-handler"`

	// icon id
	IconID string `json:"icon-id,omitempty" xml:"icon-id,attr,omitempty"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// input
	// Required: true
	Input *Input `json:"input"`

	// object name
	ObjectName string `json:"object-name,omitempty" xml:"object-name,attr,omitempty"`

	// output
	// Required: true
	Output *Output `json:"output"`

	// position
	// Required: true
	Position *Position `json:"position"`

	// presentation
	// Required: true
	Presentation *Presentation `json:"presentation"`

	// ref types
	// Required: true
	RefTypes *string `json:"ref-types"`

	// restart mode
	RestartMode int32 `json:"restartMode,omitempty" xml:"restartMode,attr,omitempty"`

	// resume from failed mode
	ResumeFromFailedMode int32 `json:"resumeFromFailedMode,omitempty" xml:"resumeFromFailedMode,attr,omitempty"`

	// root name
	RootName string `json:"root-name,omitempty" xml:"root-name,attr,omitempty"`

	// schema location
	SchemaLocation string `json:"schemaLocation,omitempty" xml:"schemaLocation,attr,omitempty"`

	// version
	Version string `json:"version,omitempty" xml:"version,attr,omitempty"`

	// workflow item
	// Required: true
	WorkflowItem []*WorkflowItem `json:"workflow-item"`

	// workflow note
	// Required: true
	WorkflowNote []*WorkflowNote `json:"workflow-note"`
}

// Validate validates this schema workflow
func (m *SchemaWorkflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttrib(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresentation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowNote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaWorkflow) validateAttrib(formats strfmt.Registry) error {

	if err := validate.Required("attrib", "body", m.Attrib); err != nil {
		return err
	}

	for i := 0; i < len(m.Attrib); i++ {
		if swag.IsZero(m.Attrib[i]) { // not required
			continue
		}

		if m.Attrib[i] != nil {
			if err := m.Attrib[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attrib" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attrib" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemaWorkflow) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *SchemaWorkflow) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display-name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *SchemaWorkflow) validateErrorHandler(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorHandler) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorHandler); i++ {
		if swag.IsZero(m.ErrorHandler[i]) { // not required
			continue
		}

		if m.ErrorHandler[i] != nil {
			if err := m.ErrorHandler[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error-handler" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("error-handler" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemaWorkflow) validateInput(formats strfmt.Registry) error {

	if err := validate.Required("input", "body", m.Input); err != nil {
		return err
	}

	if m.Input != nil {
		if err := m.Input.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) validateOutput(formats strfmt.Registry) error {

	if err := validate.Required("output", "body", m.Output); err != nil {
		return err
	}

	if m.Output != nil {
		if err := m.Output.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) validatePresentation(formats strfmt.Registry) error {

	if err := validate.Required("presentation", "body", m.Presentation); err != nil {
		return err
	}

	if m.Presentation != nil {
		if err := m.Presentation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presentation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("presentation")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) validateRefTypes(formats strfmt.Registry) error {

	if err := validate.Required("ref-types", "body", m.RefTypes); err != nil {
		return err
	}

	return nil
}

func (m *SchemaWorkflow) validateWorkflowItem(formats strfmt.Registry) error {

	if err := validate.Required("workflow-item", "body", m.WorkflowItem); err != nil {
		return err
	}

	for i := 0; i < len(m.WorkflowItem); i++ {
		if swag.IsZero(m.WorkflowItem[i]) { // not required
			continue
		}

		if m.WorkflowItem[i] != nil {
			if err := m.WorkflowItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemaWorkflow) validateWorkflowNote(formats strfmt.Registry) error {

	if err := validate.Required("workflow-note", "body", m.WorkflowNote); err != nil {
		return err
	}

	for i := 0; i < len(m.WorkflowNote); i++ {
		if swag.IsZero(m.WorkflowNote[i]) { // not required
			continue
		}

		if m.WorkflowNote[i] != nil {
			if err := m.WorkflowNote[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow-note" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflow-note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this schema workflow based on the context it is used
func (m *SchemaWorkflow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttrib(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrorHandler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresentation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowNote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaWorkflow) contextValidateAttrib(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attrib); i++ {

		if m.Attrib[i] != nil {

			if swag.IsZero(m.Attrib[i]) { // not required
				return nil
			}

			if err := m.Attrib[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attrib" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attrib" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemaWorkflow) contextValidateErrorHandler(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ErrorHandler); i++ {

		if m.ErrorHandler[i] != nil {

			if swag.IsZero(m.ErrorHandler[i]) { // not required
				return nil
			}

			if err := m.ErrorHandler[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error-handler" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("error-handler" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemaWorkflow) contextValidateInput(ctx context.Context, formats strfmt.Registry) error {

	if m.Input != nil {

		if err := m.Input.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) contextValidateOutput(ctx context.Context, formats strfmt.Registry) error {

	if m.Output != nil {

		if err := m.Output.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("output")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("output")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {

		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("position")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("position")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) contextValidatePresentation(ctx context.Context, formats strfmt.Registry) error {

	if m.Presentation != nil {

		if err := m.Presentation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("presentation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("presentation")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaWorkflow) contextValidateWorkflowItem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WorkflowItem); i++ {

		if m.WorkflowItem[i] != nil {

			if swag.IsZero(m.WorkflowItem[i]) { // not required
				return nil
			}

			if err := m.WorkflowItem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemaWorkflow) contextValidateWorkflowNote(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WorkflowNote); i++ {

		if m.WorkflowNote[i] != nil {

			if swag.IsZero(m.WorkflowNote[i]) { // not required
				return nil
			}

			if err := m.WorkflowNote[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow-note" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflow-note" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaWorkflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaWorkflow) UnmarshalBinary(b []byte) error {
	var res SchemaWorkflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
