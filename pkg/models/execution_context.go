// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExecutionContext execution context
//
// swagger:model execution-context
type ExecutionContext struct {

	// execution Id
	ExecutionID string `json:"executionId,omitempty" xml:"executionId,attr,omitempty"`

	// parameter
	Parameter []*Parameter `json:"parameter" xml:"parameters"`

	// profiler options
	ProfilerOptions *WsProfilerOptions `json:"profilerOptions,omitempty"`
}

// Validate validates this execution context
func (m *ExecutionContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfilerOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionContext) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameter); i++ {
		if swag.IsZero(m.Parameter[i]) { // not required
			continue
		}

		if m.Parameter[i] != nil {
			if err := m.Parameter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionContext) validateProfilerOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ProfilerOptions) { // not required
		return nil
	}

	if m.ProfilerOptions != nil {
		if err := m.ProfilerOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profilerOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profilerOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this execution context based on the context it is used
func (m *ExecutionContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfilerOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecutionContext) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameter); i++ {

		if m.Parameter[i] != nil {

			if swag.IsZero(m.Parameter[i]) { // not required
				return nil
			}

			if err := m.Parameter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecutionContext) contextValidateProfilerOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ProfilerOptions != nil {

		if swag.IsZero(m.ProfilerOptions) { // not required
			return nil
		}

		if err := m.ProfilerOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profilerOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profilerOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecutionContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecutionContext) UnmarshalBinary(b []byte) error {
	var res ExecutionContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
