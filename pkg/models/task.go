// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Task task
//
// swagger:model task
type Task struct {

	// description
	Description string `json:"description,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameter
	Parameter []*Parameter `json:"parameter" xml:"input-parameters"`

	// recurrence cycle
	// Enum: [ONE_TIME EVERY_MINUTES EVERY_HOURS EVERY_DAYS EVERY_WEEKS EVERY_MONTHS]
	RecurrenceCycle string `json:"recurrence-cycle,omitempty"`

	// recurrence end date
	// Format: date-time
	RecurrenceEndDate strfmt.DateTime `json:"recurrence-end-date,omitempty"`

	// recurrence pattern
	RecurrencePattern string `json:"recurrence-pattern,omitempty"`

	// recurrence start date
	// Required: true
	// Format: date-time
	RecurrenceStartDate *strfmt.DateTime `json:"recurrence-start-date"`

	// relations
	Relations *Relations `json:"relations,omitempty"`

	// start mode
	// Enum: [NORMAL START_IN_THE_PAST]
	StartMode string `json:"start-mode,omitempty"`

	// state
	// Enum: [FINISHED CANCELED ERROR PENDING RUNNING SUSPENDED UNKNOWN]
	State string `json:"state,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// workflow
	// Required: true
	Workflow *Workflow `json:"workflow"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrenceCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrenceEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrenceStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validateParameter(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameter) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameter); i++ {
		if swag.IsZero(m.Parameter[i]) { // not required
			continue
		}

		if m.Parameter[i] != nil {
			if err := m.Parameter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var taskTypeRecurrenceCyclePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONE_TIME","EVERY_MINUTES","EVERY_HOURS","EVERY_DAYS","EVERY_WEEKS","EVERY_MONTHS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeRecurrenceCyclePropEnum = append(taskTypeRecurrenceCyclePropEnum, v)
	}
}

const (

	// TaskRecurrenceCycleONETIME captures enum value "ONE_TIME"
	TaskRecurrenceCycleONETIME string = "ONE_TIME"

	// TaskRecurrenceCycleEVERYMINUTES captures enum value "EVERY_MINUTES"
	TaskRecurrenceCycleEVERYMINUTES string = "EVERY_MINUTES"

	// TaskRecurrenceCycleEVERYHOURS captures enum value "EVERY_HOURS"
	TaskRecurrenceCycleEVERYHOURS string = "EVERY_HOURS"

	// TaskRecurrenceCycleEVERYDAYS captures enum value "EVERY_DAYS"
	TaskRecurrenceCycleEVERYDAYS string = "EVERY_DAYS"

	// TaskRecurrenceCycleEVERYWEEKS captures enum value "EVERY_WEEKS"
	TaskRecurrenceCycleEVERYWEEKS string = "EVERY_WEEKS"

	// TaskRecurrenceCycleEVERYMONTHS captures enum value "EVERY_MONTHS"
	TaskRecurrenceCycleEVERYMONTHS string = "EVERY_MONTHS"
)

// prop value enum
func (m *Task) validateRecurrenceCycleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskTypeRecurrenceCyclePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateRecurrenceCycle(formats strfmt.Registry) error {
	if swag.IsZero(m.RecurrenceCycle) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecurrenceCycleEnum("recurrence-cycle", "body", m.RecurrenceCycle); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateRecurrenceEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.RecurrenceEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("recurrence-end-date", "body", "date-time", m.RecurrenceEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateRecurrenceStartDate(formats strfmt.Registry) error {

	if err := validate.Required("recurrence-start-date", "body", m.RecurrenceStartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("recurrence-start-date", "body", "date-time", m.RecurrenceStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	if m.Relations != nil {
		if err := m.Relations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

var taskTypeStartModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NORMAL","START_IN_THE_PAST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeStartModePropEnum = append(taskTypeStartModePropEnum, v)
	}
}

const (

	// TaskStartModeNORMAL captures enum value "NORMAL"
	TaskStartModeNORMAL string = "NORMAL"

	// TaskStartModeSTARTINTHEPAST captures enum value "START_IN_THE_PAST"
	TaskStartModeSTARTINTHEPAST string = "START_IN_THE_PAST"
)

// prop value enum
func (m *Task) validateStartModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskTypeStartModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateStartMode(formats strfmt.Registry) error {
	if swag.IsZero(m.StartMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateStartModeEnum("start-mode", "body", m.StartMode); err != nil {
		return err
	}

	return nil
}

var taskTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FINISHED","CANCELED","ERROR","PENDING","RUNNING","SUSPENDED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskTypeStatePropEnum = append(taskTypeStatePropEnum, v)
	}
}

const (

	// TaskStateFINISHED captures enum value "FINISHED"
	TaskStateFINISHED string = "FINISHED"

	// TaskStateCANCELED captures enum value "CANCELED"
	TaskStateCANCELED string = "CANCELED"

	// TaskStateERROR captures enum value "ERROR"
	TaskStateERROR string = "ERROR"

	// TaskStatePENDING captures enum value "PENDING"
	TaskStatePENDING string = "PENDING"

	// TaskStateRUNNING captures enum value "RUNNING"
	TaskStateRUNNING string = "RUNNING"

	// TaskStateSUSPENDED captures enum value "SUSPENDED"
	TaskStateSUSPENDED string = "SUSPENDED"

	// TaskStateUNKNOWN captures enum value "UNKNOWN"
	TaskStateUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *Task) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Task) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateWorkflow(formats strfmt.Registry) error {

	if err := validate.Required("workflow", "body", m.Workflow); err != nil {
		return err
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this task based on the context it is used
func (m *Task) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) contextValidateParameter(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameter); i++ {

		if m.Parameter[i] != nil {

			if swag.IsZero(m.Parameter[i]) { // not required
				return nil
			}

			if err := m.Parameter[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameter" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Task) contextValidateRelations(ctx context.Context, formats strfmt.Registry) error {

	if m.Relations != nil {

		if swag.IsZero(m.Relations) { // not required
			return nil
		}

		if err := m.Relations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

func (m *Task) contextValidateWorkflow(ctx context.Context, formats strfmt.Registry) error {

	if m.Workflow != nil {

		if err := m.Workflow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Task) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Task) UnmarshalBinary(b []byte) error {
	var res Task
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
