// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowExecutionStatistics workflow execution statistics
//
// swagger:model workflow-execution-statistics
type WorkflowExecutionStatistics struct {

	// activities
	Activities []*ActivityStatistics `json:"activities" xml:"activity"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// number of transitions
	NumberOfTransitions int64 `json:"number-of-transitions,omitempty" xml:"number-of-transitions,attr,omitempty"`

	// plugins
	Plugins []*PluginStatistics `json:"plugins" xml:"plugin"`

	// token blocked
	TokenBlocked int64 `json:"token-blocked,omitempty" xml:"token-blocked,attr,omitempty"`

	// token size
	TokenSize int64 `json:"token-size,omitempty" xml:"token-size,attr,omitempty"`

	// token system
	TokenSystem int64 `json:"token-system,omitempty" xml:"token-system,attr,omitempty"`

	// token user
	TokenUser int64 `json:"token-user,omitempty" xml:"token-user,attr,omitempty"`

	// token wait
	TokenWait int64 `json:"token-wait,omitempty" xml:"token-wait,attr,omitempty"`

	// total number of transitions
	TotalNumberOfTransitions int64 `json:"total-number-of-transitions,omitempty" xml:"total-number-of-transitions,attr,omitempty"`

	// total time
	TotalTime int64 `json:"total-time,omitempty" xml:"total-time,attr,omitempty"`
}

// Validate validates this workflow execution statistics
func (m *WorkflowExecutionStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowExecutionStatistics) validateActivities(formats strfmt.Registry) error {
	if swag.IsZero(m.Activities) { // not required
		return nil
	}

	for i := 0; i < len(m.Activities); i++ {
		if swag.IsZero(m.Activities[i]) { // not required
			continue
		}

		if m.Activities[i] != nil {
			if err := m.Activities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecutionStatistics) validatePlugins(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	for i := 0; i < len(m.Plugins); i++ {
		if swag.IsZero(m.Plugins[i]) { // not required
			continue
		}

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this workflow execution statistics based on the context it is used
func (m *WorkflowExecutionStatistics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlugins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowExecutionStatistics) contextValidateActivities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Activities); i++ {

		if m.Activities[i] != nil {

			if swag.IsZero(m.Activities[i]) { // not required
				return nil
			}

			if err := m.Activities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecutionStatistics) contextValidatePlugins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Plugins); i++ {

		if m.Plugins[i] != nil {

			if swag.IsZero(m.Plugins[i]) { // not required
				return nil
			}

			if err := m.Plugins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowExecutionStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowExecutionStatistics) UnmarshalBinary(b []byte) error {
	var res WorkflowExecutionStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
