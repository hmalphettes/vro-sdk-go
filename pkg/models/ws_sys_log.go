// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WsSysLog ws sys log
//
// swagger:model WsSysLog
type WsSysLog struct {

	// long description
	LongDescription string `json:"long-description,omitempty"`

	// origin
	Origin string `json:"origin,omitempty" xml:"origin,attr,omitempty"`

	// severity
	// Enum: [UNKNOWN DEBUG INFO WARNING ERROR]
	Severity string `json:"severity,omitempty" xml:"severity,attr,omitempty"`

	// short description
	ShortDescription string `json:"short-description,omitempty" xml:"short-description,attr,omitempty"`

	// time stamp
	// Format: date-time
	TimeStamp strfmt.DateTime `json:"time-stamp,omitempty" xml:"time-stamp,attr,omitempty"`

	// time stamp val
	TimeStampVal int64 `json:"time-stamp-val,omitempty" xml:"time-stamp-val,attr,omitempty"`

	// user
	User string `json:"user,omitempty" xml:"user,attr,omitempty"`
}

// Validate validates this ws sys log
func (m *WsSysLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var wsSysLogTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","DEBUG","INFO","WARNING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wsSysLogTypeSeverityPropEnum = append(wsSysLogTypeSeverityPropEnum, v)
	}
}

const (

	// WsSysLogSeverityUNKNOWN captures enum value "UNKNOWN"
	WsSysLogSeverityUNKNOWN string = "UNKNOWN"

	// WsSysLogSeverityDEBUG captures enum value "DEBUG"
	WsSysLogSeverityDEBUG string = "DEBUG"

	// WsSysLogSeverityINFO captures enum value "INFO"
	WsSysLogSeverityINFO string = "INFO"

	// WsSysLogSeverityWARNING captures enum value "WARNING"
	WsSysLogSeverityWARNING string = "WARNING"

	// WsSysLogSeverityERROR captures enum value "ERROR"
	WsSysLogSeverityERROR string = "ERROR"
)

// prop value enum
func (m *WsSysLog) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, wsSysLogTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WsSysLog) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *WsSysLog) validateTimeStamp(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeStamp) { // not required
		return nil
	}

	if err := validate.FormatOf("time-stamp", "body", "date-time", m.TimeStamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ws sys log based on context it is used
func (m *WsSysLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WsSysLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WsSysLog) UnmarshalBinary(b []byte) error {
	var res WsSysLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
