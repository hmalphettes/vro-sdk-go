// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowExecution workflow execution
//
// swagger:model workflow-execution
type WorkflowExecution struct {

	// business state
	BusinessState string `json:"business-state,omitempty"`

	// content exception
	ContentException string `json:"content-exception,omitempty"`

	// current item display name
	CurrentItemDisplayName string `json:"current-item-display-name,omitempty"`

	// current item for display
	CurrentItemForDisplay string `json:"current-item-for-display,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"end-date,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// input parameters
	InputParameters []*Parameter `json:"inputParameters" xml:"parameter"`

	// name
	Name string `json:"name,omitempty"`

	// output parameters
	OutputParameters []*Parameter `json:"outputParameters" xml:"parameter"`

	// relations
	Relations *Relations `json:"relations,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"start-date,omitempty"`

	// started by
	StartedBy string `json:"started-by,omitempty"`

	// state
	// Enum: [CANCELED COMPLETED RUNNING SUSPENDED WAITING STATE_WAITING_ON_SIGNAL FAILED INITIALIZING]
	State string `json:"state,omitempty"`

	// statistic
	Statistic *WorkflowExecutionStatistics `json:"statistic,omitempty"`

	// workflow item
	WorkflowItem []*WsWorkflowExecutionStackItem `json:"workflow-item" xml:"execution-stack"`

	// workflow attributes
	WorkflowAttributes []*Parameter `json:"workflowAttributes" xml:"parameter"`
}

// Validate validates this workflow execution
func (m *WorkflowExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutputParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowExecution) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end-date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowExecution) validateInputParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.InputParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.InputParameters); i++ {
		if swag.IsZero(m.InputParameters[i]) { // not required
			continue
		}

		if m.InputParameters[i] != nil {
			if err := m.InputParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecution) validateOutputParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OutputParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.OutputParameters); i++ {
		if swag.IsZero(m.OutputParameters[i]) { // not required
			continue
		}

		if m.OutputParameters[i] != nil {
			if err := m.OutputParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecution) validateRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	if m.Relations != nil {
		if err := m.Relations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowExecution) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start-date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var workflowExecutionTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CANCELED","COMPLETED","RUNNING","SUSPENDED","WAITING","STATE_WAITING_ON_SIGNAL","FAILED","INITIALIZING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowExecutionTypeStatePropEnum = append(workflowExecutionTypeStatePropEnum, v)
	}
}

const (

	// WorkflowExecutionStateCANCELED captures enum value "CANCELED"
	WorkflowExecutionStateCANCELED string = "CANCELED"

	// WorkflowExecutionStateCOMPLETED captures enum value "COMPLETED"
	WorkflowExecutionStateCOMPLETED string = "COMPLETED"

	// WorkflowExecutionStateRUNNING captures enum value "RUNNING"
	WorkflowExecutionStateRUNNING string = "RUNNING"

	// WorkflowExecutionStateSUSPENDED captures enum value "SUSPENDED"
	WorkflowExecutionStateSUSPENDED string = "SUSPENDED"

	// WorkflowExecutionStateWAITING captures enum value "WAITING"
	WorkflowExecutionStateWAITING string = "WAITING"

	// WorkflowExecutionStateSTATEWAITINGONSIGNAL captures enum value "STATE_WAITING_ON_SIGNAL"
	WorkflowExecutionStateSTATEWAITINGONSIGNAL string = "STATE_WAITING_ON_SIGNAL"

	// WorkflowExecutionStateFAILED captures enum value "FAILED"
	WorkflowExecutionStateFAILED string = "FAILED"

	// WorkflowExecutionStateINITIALIZING captures enum value "INITIALIZING"
	WorkflowExecutionStateINITIALIZING string = "INITIALIZING"
)

// prop value enum
func (m *WorkflowExecution) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workflowExecutionTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowExecution) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowExecution) validateStatistic(formats strfmt.Registry) error {
	if swag.IsZero(m.Statistic) { // not required
		return nil
	}

	if m.Statistic != nil {
		if err := m.Statistic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statistic")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowExecution) validateWorkflowItem(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkflowItem) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkflowItem); i++ {
		if swag.IsZero(m.WorkflowItem[i]) { // not required
			continue
		}

		if m.WorkflowItem[i] != nil {
			if err := m.WorkflowItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecution) validateWorkflowAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkflowAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkflowAttributes); i++ {
		if swag.IsZero(m.WorkflowAttributes[i]) { // not required
			continue
		}

		if m.WorkflowAttributes[i] != nil {
			if err := m.WorkflowAttributes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflowAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflowAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this workflow execution based on the context it is used
func (m *WorkflowExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutputParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatistic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflowAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowExecution) contextValidateInputParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputParameters); i++ {

		if m.InputParameters[i] != nil {

			if swag.IsZero(m.InputParameters[i]) { // not required
				return nil
			}

			if err := m.InputParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecution) contextValidateOutputParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutputParameters); i++ {

		if m.OutputParameters[i] != nil {

			if swag.IsZero(m.OutputParameters[i]) { // not required
				return nil
			}

			if err := m.OutputParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outputParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outputParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecution) contextValidateRelations(ctx context.Context, formats strfmt.Registry) error {

	if m.Relations != nil {

		if swag.IsZero(m.Relations) { // not required
			return nil
		}

		if err := m.Relations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowExecution) contextValidateStatistic(ctx context.Context, formats strfmt.Registry) error {

	if m.Statistic != nil {

		if swag.IsZero(m.Statistic) { // not required
			return nil
		}

		if err := m.Statistic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statistic")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowExecution) contextValidateWorkflowItem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WorkflowItem); i++ {

		if m.WorkflowItem[i] != nil {

			if swag.IsZero(m.WorkflowItem[i]) { // not required
				return nil
			}

			if err := m.WorkflowItem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflow-item" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowExecution) contextValidateWorkflowAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WorkflowAttributes); i++ {

		if m.WorkflowAttributes[i] != nil {

			if swag.IsZero(m.WorkflowAttributes[i]) { // not required
				return nil
			}

			if err := m.WorkflowAttributes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflowAttributes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("workflowAttributes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowExecution) UnmarshalBinary(b []byte) error {
	var res WorkflowExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
