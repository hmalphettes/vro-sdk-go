// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportElementDetail import element detail
//
// swagger:model ImportElementDetail
type ImportElementDetail struct {

	// file category
	FileCategory string `json:"fileCategory,omitempty" xml:"fileCategory,attr,omitempty"`

	// file object name
	FileObjectName string `json:"fileObjectName,omitempty" xml:"fileObjectName,attr,omitempty"`

	// file object version
	FileObjectVersion string `json:"fileObjectVersion,omitempty" xml:"fileObjectVersion,attr,omitempty"`

	// has tenant conflict
	HasTenantConflict *bool `json:"hasTenantConflict,omitempty" xml:"hasTenantConflict,attr,omitempty"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// import it
	ImportIt *bool `json:"importIt,omitempty" xml:"importIt,attr,omitempty"`

	// server category
	ServerCategory string `json:"serverCategory,omitempty" xml:"serverCategory,attr,omitempty"`

	// server object name
	ServerObjectName string `json:"serverObjectName,omitempty" xml:"serverObjectName,attr,omitempty"`

	// server object version
	ServerObjectVersion string `json:"serverObjectVersion,omitempty" xml:"serverObjectVersion,attr,omitempty"`

	// type
	// Enum: [WORKFLOW POLICY_TEMPLATE SCRIPT_MODULE RESOURCE_ELEMENT CONFIGURATION_ELEMENT]
	Type string `json:"type,omitempty" xml:"type,attr,omitempty"`

	// version comparison
	// Enum: [IMPORT_SMALLER IMPORT_GREATER SAME_VERSIONS]
	VersionComparison string `json:"versionComparison,omitempty" xml:"versionComparison,attr,omitempty"`
}

// Validate validates this import element detail
func (m *ImportElementDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionComparison(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var importElementDetailTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WORKFLOW","POLICY_TEMPLATE","SCRIPT_MODULE","RESOURCE_ELEMENT","CONFIGURATION_ELEMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importElementDetailTypeTypePropEnum = append(importElementDetailTypeTypePropEnum, v)
	}
}

const (

	// ImportElementDetailTypeWORKFLOW captures enum value "WORKFLOW"
	ImportElementDetailTypeWORKFLOW string = "WORKFLOW"

	// ImportElementDetailTypePOLICYTEMPLATE captures enum value "POLICY_TEMPLATE"
	ImportElementDetailTypePOLICYTEMPLATE string = "POLICY_TEMPLATE"

	// ImportElementDetailTypeSCRIPTMODULE captures enum value "SCRIPT_MODULE"
	ImportElementDetailTypeSCRIPTMODULE string = "SCRIPT_MODULE"

	// ImportElementDetailTypeRESOURCEELEMENT captures enum value "RESOURCE_ELEMENT"
	ImportElementDetailTypeRESOURCEELEMENT string = "RESOURCE_ELEMENT"

	// ImportElementDetailTypeCONFIGURATIONELEMENT captures enum value "CONFIGURATION_ELEMENT"
	ImportElementDetailTypeCONFIGURATIONELEMENT string = "CONFIGURATION_ELEMENT"
)

// prop value enum
func (m *ImportElementDetail) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importElementDetailTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportElementDetail) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

var importElementDetailTypeVersionComparisonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IMPORT_SMALLER","IMPORT_GREATER","SAME_VERSIONS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importElementDetailTypeVersionComparisonPropEnum = append(importElementDetailTypeVersionComparisonPropEnum, v)
	}
}

const (

	// ImportElementDetailVersionComparisonIMPORTSMALLER captures enum value "IMPORT_SMALLER"
	ImportElementDetailVersionComparisonIMPORTSMALLER string = "IMPORT_SMALLER"

	// ImportElementDetailVersionComparisonIMPORTGREATER captures enum value "IMPORT_GREATER"
	ImportElementDetailVersionComparisonIMPORTGREATER string = "IMPORT_GREATER"

	// ImportElementDetailVersionComparisonSAMEVERSIONS captures enum value "SAME_VERSIONS"
	ImportElementDetailVersionComparisonSAMEVERSIONS string = "SAME_VERSIONS"
)

// prop value enum
func (m *ImportElementDetail) validateVersionComparisonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importElementDetailTypeVersionComparisonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportElementDetail) validateVersionComparison(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionComparison) { // not required
		return nil
	}

	// value enum
	if err := m.validateVersionComparisonEnum("versionComparison", "body", m.VersionComparison); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this import element detail based on context it is used
func (m *ImportElementDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImportElementDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportElementDetail) UnmarshalBinary(b []byte) error {
	var res ImportElementDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
