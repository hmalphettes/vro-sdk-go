// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Breakpoint breakpoint
//
// swagger:model breakpoint
type Breakpoint struct {

	// active
	// Required: true
	Active bool `json:"active" xml:"active,attr"`

	// element name
	// Required: true
	ElementName *string `json:"elementName" xml:"elementName,attr"`

	// line number
	// Required: true
	LineNumber *int32 `json:"lineNumber" xml:"lineNumber,attr"`

	// workflow Id
	// Required: true
	WorkflowID *string `json:"workflowId" xml:"workflowId,attr"`
}

// Validate validates this breakpoint
func (m *Breakpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElementName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Breakpoint) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", bool(m.Active)); err != nil {
		return err
	}

	return nil
}

func (m *Breakpoint) validateElementName(formats strfmt.Registry) error {

	if err := validate.Required("elementName", "body", m.ElementName); err != nil {
		return err
	}

	return nil
}

func (m *Breakpoint) validateLineNumber(formats strfmt.Registry) error {

	if err := validate.Required("lineNumber", "body", m.LineNumber); err != nil {
		return err
	}

	return nil
}

func (m *Breakpoint) validateWorkflowID(formats strfmt.Registry) error {

	if err := validate.Required("workflowId", "body", m.WorkflowID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this breakpoint based on context it is used
func (m *Breakpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Breakpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Breakpoint) UnmarshalBinary(b []byte) error {
	var res Breakpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
