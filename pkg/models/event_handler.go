// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventHandler event handler
//
// swagger:model event-handler
type EventHandler struct {

	// bindings
	Bindings []*Bind `json:"bindings"`

	// description
	Description string `json:"description,omitempty"`

	// event Id
	EventID string `json:"eventId,omitempty"`

	// max value
	MaxValue float64 `json:"max-value,omitempty"`

	// min value
	MinValue float64 `json:"min-value,omitempty"`

	// script
	Script string `json:"script,omitempty"`

	// type
	// Enum: [TRIGGER GAUGE]
	Type string `json:"type,omitempty"`

	// workflow
	Workflow *Workflow `json:"workflow,omitempty"`
}

// Validate validates this event handler
func (m *EventHandler) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventHandler) validateBindings(formats strfmt.Registry) error {
	if swag.IsZero(m.Bindings) { // not required
		return nil
	}

	for i := 0; i < len(m.Bindings); i++ {
		if swag.IsZero(m.Bindings[i]) { // not required
			continue
		}

		if m.Bindings[i] != nil {
			if err := m.Bindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bindings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var eventHandlerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TRIGGER","GAUGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventHandlerTypeTypePropEnum = append(eventHandlerTypeTypePropEnum, v)
	}
}

const (

	// EventHandlerTypeTRIGGER captures enum value "TRIGGER"
	EventHandlerTypeTRIGGER string = "TRIGGER"

	// EventHandlerTypeGAUGE captures enum value "GAUGE"
	EventHandlerTypeGAUGE string = "GAUGE"
)

// prop value enum
func (m *EventHandler) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventHandlerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventHandler) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *EventHandler) validateWorkflow(formats strfmt.Registry) error {
	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this event handler based on the context it is used
func (m *EventHandler) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkflow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventHandler) contextValidateBindings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Bindings); i++ {

		if m.Bindings[i] != nil {

			if swag.IsZero(m.Bindings[i]) { // not required
				return nil
			}

			if err := m.Bindings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bindings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EventHandler) contextValidateWorkflow(ctx context.Context, formats strfmt.Registry) error {

	if m.Workflow != nil {

		if swag.IsZero(m.Workflow) { // not required
			return nil
		}

		if err := m.Workflow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventHandler) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventHandler) UnmarshalBinary(b []byte) error {
	var res EventHandler
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
