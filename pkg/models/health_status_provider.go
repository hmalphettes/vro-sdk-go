// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthStatusProvider health status provider
//
// swagger:model health-status-provider
type HealthStatusProvider struct {

	// description
	Description string `json:"description,omitempty"`

	// is critical
	IsCritical *bool `json:"isCritical,omitempty" xml:"isCritical,attr,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// state
	// Enum: [UNKNOWN OK WARN ERROR]
	State string `json:"state,omitempty" xml:"state,attr,omitempty"`
}

// Validate validates this health status provider
func (m *HealthStatusProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var healthStatusProviderTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","OK","WARN","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthStatusProviderTypeStatePropEnum = append(healthStatusProviderTypeStatePropEnum, v)
	}
}

const (

	// HealthStatusProviderStateUNKNOWN captures enum value "UNKNOWN"
	HealthStatusProviderStateUNKNOWN string = "UNKNOWN"

	// HealthStatusProviderStateOK captures enum value "OK"
	HealthStatusProviderStateOK string = "OK"

	// HealthStatusProviderStateWARN captures enum value "WARN"
	HealthStatusProviderStateWARN string = "WARN"

	// HealthStatusProviderStateERROR captures enum value "ERROR"
	HealthStatusProviderStateERROR string = "ERROR"
)

// prop value enum
func (m *HealthStatusProvider) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthStatusProviderTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HealthStatusProvider) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this health status provider based on context it is used
func (m *HealthStatusProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthStatusProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthStatusProvider) UnmarshalBinary(b []byte) error {
	var res HealthStatusProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
