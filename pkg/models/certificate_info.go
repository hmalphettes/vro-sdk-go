// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateInfo certificate info
//
// swagger:model CertificateInfo
type CertificateInfo struct {

	// identity certificate exists
	IdentityCertificateExists *bool `json:"identityCertificateExists,omitempty"`

	// issuer name
	IssuerName string `json:"issuerName,omitempty"`

	// not valid after
	// Format: date-time
	NotValidAfter strfmt.DateTime `json:"notValidAfter,omitempty"`

	// not valid before
	// Format: date-time
	NotValidBefore strfmt.DateTime `json:"notValidBefore,omitempty"`

	// principal name
	PrincipalName string `json:"principalName,omitempty"`

	// thumbprint
	Thumbprint string `json:"thumbprint,omitempty"`
}

// Validate validates this certificate info
func (m *CertificateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotValidAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotValidBefore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateInfo) validateNotValidAfter(formats strfmt.Registry) error {
	if swag.IsZero(m.NotValidAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("notValidAfter", "body", "date-time", m.NotValidAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CertificateInfo) validateNotValidBefore(formats strfmt.Registry) error {
	if swag.IsZero(m.NotValidBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("notValidBefore", "body", "date-time", m.NotValidBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this certificate info based on context it is used
func (m *CertificateInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateInfo) UnmarshalBinary(b []byte) error {
	var res CertificateInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
