// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WorkflowSubelement workflow subelement
//
// swagger:model WorkflowSubelement
type WorkflowSubelement struct {

	// display name
	DisplayName string `json:"display-name,omitempty"`

	// in binding
	InBinding *InBinding `json:"in-binding,omitempty"`

	// linked workflow id
	LinkedWorkflowID string `json:"linked-workflow-id,omitempty" xml:"linked-workflow-id,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// out binding
	OutBinding *OutBinding `json:"out-binding,omitempty"`
}

// Validate validates this workflow subelement
func (m *WorkflowSubelement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutBinding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowSubelement) validateInBinding(formats strfmt.Registry) error {
	if swag.IsZero(m.InBinding) { // not required
		return nil
	}

	if m.InBinding != nil {
		if err := m.InBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("in-binding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("in-binding")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowSubelement) validateOutBinding(formats strfmt.Registry) error {
	if swag.IsZero(m.OutBinding) { // not required
		return nil
	}

	if m.OutBinding != nil {
		if err := m.OutBinding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("out-binding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("out-binding")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this workflow subelement based on the context it is used
func (m *WorkflowSubelement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInBinding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutBinding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowSubelement) contextValidateInBinding(ctx context.Context, formats strfmt.Registry) error {

	if m.InBinding != nil {

		if swag.IsZero(m.InBinding) { // not required
			return nil
		}

		if err := m.InBinding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("in-binding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("in-binding")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowSubelement) contextValidateOutBinding(ctx context.Context, formats strfmt.Registry) error {

	if m.OutBinding != nil {

		if swag.IsZero(m.OutBinding) { // not required
			return nil
		}

		if err := m.OutBinding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("out-binding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("out-binding")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowSubelement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowSubelement) UnmarshalBinary(b []byte) error {
	var res WorkflowSubelement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
