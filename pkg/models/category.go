// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Category category
//
// swagger:model category
type Category struct {

	// description
	Description string `json:"description,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// relations
	Relations *Relations `json:"relations,omitempty"`

	// type
	// Enum: [ResourceElementCategory ConfigurationElementCategory WorkflowCategory ScriptModuleCategory]
	Type string `json:"type,omitempty"`
}

// Validate validates this category
func (m *Category) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Category) validateRelations(formats strfmt.Registry) error {
	if swag.IsZero(m.Relations) { // not required
		return nil
	}

	if m.Relations != nil {
		if err := m.Relations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

var categoryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ResourceElementCategory","ConfigurationElementCategory","WorkflowCategory","ScriptModuleCategory"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		categoryTypeTypePropEnum = append(categoryTypeTypePropEnum, v)
	}
}

const (

	// CategoryTypeResourceElementCategory captures enum value "ResourceElementCategory"
	CategoryTypeResourceElementCategory string = "ResourceElementCategory"

	// CategoryTypeConfigurationElementCategory captures enum value "ConfigurationElementCategory"
	CategoryTypeConfigurationElementCategory string = "ConfigurationElementCategory"

	// CategoryTypeWorkflowCategory captures enum value "WorkflowCategory"
	CategoryTypeWorkflowCategory string = "WorkflowCategory"

	// CategoryTypeScriptModuleCategory captures enum value "ScriptModuleCategory"
	CategoryTypeScriptModuleCategory string = "ScriptModuleCategory"
)

// prop value enum
func (m *Category) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, categoryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Category) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this category based on the context it is used
func (m *Category) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Category) contextValidateRelations(ctx context.Context, formats strfmt.Registry) error {

	if m.Relations != nil {

		if swag.IsZero(m.Relations) { // not required
			return nil
		}

		if err := m.Relations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Category) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Category) UnmarshalBinary(b []byte) error {
	var res Category
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
