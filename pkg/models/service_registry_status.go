// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceRegistryStatus service registry status
//
// swagger:model ServiceRegistryStatus
type ServiceRegistryStatus struct {

	// default service endpoint type
	DefaultServiceEndpointType string `json:"defaultServiceEndpointType,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// identity certificate info
	IdentityCertificateInfo *CertificateInfo `json:"identityCertificateInfo,omitempty"`

	// initialized
	Initialized *bool `json:"initialized,omitempty"`

	// service initialization status
	ServiceInitializationStatus string `json:"serviceInitializationStatus,omitempty"`

	// service name
	ServiceName string `json:"serviceName,omitempty"`

	// service registration Id
	ServiceRegistrationID string `json:"serviceRegistrationId,omitempty"`

	// solution user
	SolutionUser string `json:"solutionUser,omitempty"`

	// ssl certificate info
	SslCertificateInfo *CertificateInfo `json:"sslCertificateInfo,omitempty"`

	// started time
	// Format: date-time
	StartedTime strfmt.DateTime `json:"startedTime,omitempty"`
}

// Validate validates this service registry status
func (m *ServiceRegistryStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentityCertificateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslCertificateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceRegistryStatus) validateIdentityCertificateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityCertificateInfo) { // not required
		return nil
	}

	if m.IdentityCertificateInfo != nil {
		if err := m.IdentityCertificateInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identityCertificateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identityCertificateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRegistryStatus) validateSslCertificateInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SslCertificateInfo) { // not required
		return nil
	}

	if m.SslCertificateInfo != nil {
		if err := m.SslCertificateInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslCertificateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslCertificateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRegistryStatus) validateStartedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startedTime", "body", "date-time", m.StartedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service registry status based on the context it is used
func (m *ServiceRegistryStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdentityCertificateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSslCertificateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceRegistryStatus) contextValidateIdentityCertificateInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityCertificateInfo != nil {

		if swag.IsZero(m.IdentityCertificateInfo) { // not required
			return nil
		}

		if err := m.IdentityCertificateInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identityCertificateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identityCertificateInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRegistryStatus) contextValidateSslCertificateInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SslCertificateInfo != nil {

		if swag.IsZero(m.SslCertificateInfo) { // not required
			return nil
		}

		if err := m.SslCertificateInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sslCertificateInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sslCertificateInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceRegistryStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceRegistryStatus) UnmarshalBinary(b []byte) error {
	var res ServiceRegistryStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
