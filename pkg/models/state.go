// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// State state
//
// swagger:model state
type State struct {

	// value
	// Enum: [CANCELED COMPLETED RUNNING SUSPENDED WAITING STATE_WAITING_ON_SIGNAL FAILED INITIALIZING]
	Value string `json:"value,omitempty"`
}

// Validate validates this state
func (m *State) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stateTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CANCELED","COMPLETED","RUNNING","SUSPENDED","WAITING","STATE_WAITING_ON_SIGNAL","FAILED","INITIALIZING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stateTypeValuePropEnum = append(stateTypeValuePropEnum, v)
	}
}

const (

	// StateValueCANCELED captures enum value "CANCELED"
	StateValueCANCELED string = "CANCELED"

	// StateValueCOMPLETED captures enum value "COMPLETED"
	StateValueCOMPLETED string = "COMPLETED"

	// StateValueRUNNING captures enum value "RUNNING"
	StateValueRUNNING string = "RUNNING"

	// StateValueSUSPENDED captures enum value "SUSPENDED"
	StateValueSUSPENDED string = "SUSPENDED"

	// StateValueWAITING captures enum value "WAITING"
	StateValueWAITING string = "WAITING"

	// StateValueSTATEWAITINGONSIGNAL captures enum value "STATE_WAITING_ON_SIGNAL"
	StateValueSTATEWAITINGONSIGNAL string = "STATE_WAITING_ON_SIGNAL"

	// StateValueFAILED captures enum value "FAILED"
	StateValueFAILED string = "FAILED"

	// StateValueINITIALIZING captures enum value "INITIALIZING"
	StateValueINITIALIZING string = "INITIALIZING"
)

// prop value enum
func (m *State) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stateTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *State) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this state based on context it is used
func (m *State) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *State) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *State) UnmarshalBinary(b []byte) error {
	var res State
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
