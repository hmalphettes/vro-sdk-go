// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AboutInfo about info
//
// swagger:model about-info
type AboutInfo struct {

	// api version
	APIVersion string `json:"api-version,omitempty"`

	// build date
	BuildDate string `json:"build-date,omitempty"`

	// build number
	BuildNumber string `json:"build-number,omitempty"`

	// feature
	// Unique: true
	Feature []*Feature `json:"feature" xml:"features"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this about info
func (m *AboutInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AboutInfo) validateFeature(formats strfmt.Registry) error {
	if swag.IsZero(m.Feature) { // not required
		return nil
	}

	if err := validate.UniqueItems("feature", "body", m.Feature); err != nil {
		return err
	}

	for i := 0; i < len(m.Feature); i++ {
		if swag.IsZero(m.Feature[i]) { // not required
			continue
		}

		if m.Feature[i] != nil {
			if err := m.Feature[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("feature" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("feature" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this about info based on the context it is used
func (m *AboutInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AboutInfo) contextValidateFeature(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Feature); i++ {

		if m.Feature[i] != nil {

			if swag.IsZero(m.Feature[i]) { // not required
				return nil
			}

			if err := m.Feature[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("feature" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("feature" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AboutInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AboutInfo) UnmarshalBinary(b []byte) error {
	var res AboutInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
