// Code generated by go-swagger; DO NOT EDIT.

package authorization_groups_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new authorization groups service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for authorization groups service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddReferenceToGroup(params *AddReferenceToGroupParams, opts ...ClientOption) (*AddReferenceToGroupNoContent, error)

	CreateAuthorizationGroup(params *CreateAuthorizationGroupParams, opts ...ClientOption) (*CreateAuthorizationGroupOK, *CreateAuthorizationGroupCreated, error)

	DeleteAuthorizationGroup(params *DeleteAuthorizationGroupParams, opts ...ClientOption) (*DeleteAuthorizationGroupNoContent, error)

	GetAuthorizationGroup(params *GetAuthorizationGroupParams, opts ...ClientOption) (*GetAuthorizationGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddReferenceToGroup creates an orchestrator s authorization group

Creates an Orchestrator's authorization group.
*/
func (a *Client) AddReferenceToGroup(params *AddReferenceToGroupParams, opts ...ClientOption) (*AddReferenceToGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddReferenceToGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addReferenceToGroup",
		Method:             "PUT",
		PathPattern:        "/authorization-groups/{groupId}/{objectType}/{objectId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddReferenceToGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddReferenceToGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addReferenceToGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAuthorizationGroup creates an orchestrator s authorization group

Creates an Orchestrator's authorization group.
*/
func (a *Client) CreateAuthorizationGroup(params *CreateAuthorizationGroupParams, opts ...ClientOption) (*CreateAuthorizationGroupOK, *CreateAuthorizationGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthorizationGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAuthorizationGroup",
		Method:             "POST",
		PathPattern:        "/authorization-groups",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthorizationGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAuthorizationGroupOK:
		return value, nil, nil
	case *CreateAuthorizationGroupCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for authorization_groups_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAuthorizationGroup deletes an orchestrator s authorization group

Delete an Orchestrator's authorization group.
*/
func (a *Client) DeleteAuthorizationGroup(params *DeleteAuthorizationGroupParams, opts ...ClientOption) (*DeleteAuthorizationGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthorizationGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAuthorizationGroup",
		Method:             "DELETE",
		PathPattern:        "/authorization-groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthorizationGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthorizationGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAuthorizationGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthorizationGroup gets an orchestrator s authorization group

Retrieve an Orchestrator's authorization group.
*/
func (a *Client) GetAuthorizationGroup(params *GetAuthorizationGroupParams, opts ...ClientOption) (*GetAuthorizationGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthorizationGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthorizationGroup",
		Method:             "GET",
		PathPattern:        "/authorization-groups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthorizationGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthorizationGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
