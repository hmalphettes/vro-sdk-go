// Code generated by go-swagger; DO NOT EDIT.

package policy_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policy service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policy service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePolicy(params *CreatePolicyParams, opts ...ClientOption) (*CreatePolicyOK, *CreatePolicyCreated, error)

	CreatePolicyTemplate(params *CreatePolicyTemplateParams, opts ...ClientOption) (*CreatePolicyTemplateOK, *CreatePolicyTemplateCreated, error)

	DeletePolicy(params *DeletePolicyParams, opts ...ClientOption) (*DeletePolicyNoContent, error)

	DeletePolicyTemplate(params *DeletePolicyTemplateParams, opts ...ClientOption) (*DeletePolicyTemplateNoContent, error)

	GetAllPolicies(params *GetAllPoliciesParams, opts ...ClientOption) (*GetAllPoliciesOK, error)

	GetAllPolicyTemplates(params *GetAllPolicyTemplatesParams, opts ...ClientOption) (*GetAllPolicyTemplatesOK, *GetAllPolicyTemplatesNoContent, error)

	GetPoliciesForState(params *GetPoliciesForStateParams, opts ...ClientOption) (*GetPoliciesForStateOK, error)

	GetPolicy(params *GetPolicyParams, opts ...ClientOption) (*GetPolicyOK, error)

	GetPolicyLogs(params *GetPolicyLogsParams, opts ...ClientOption) (*GetPolicyLogsOK, error)

	GetPolicyState(params *GetPolicyStateParams, opts ...ClientOption) (*GetPolicyStateOK, error)

	GetPolicyTemplate(params *GetPolicyTemplateParams, opts ...ClientOption) (*GetPolicyTemplateOK, error)

	UpdatePolicyTemplate(params *UpdatePolicyTemplateParams, opts ...ClientOption) (*UpdatePolicyTemplateNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreatePolicy creates policy

Create policy
*/
func (a *Client) CreatePolicy(params *CreatePolicyParams, opts ...ClientOption) (*CreatePolicyOK, *CreatePolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPolicy",
		Method:             "POST",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePolicyOK:
		return value, nil, nil
	case *CreatePolicyCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePolicyTemplate creates policy template

Create policy template
*/
func (a *Client) CreatePolicyTemplate(params *CreatePolicyTemplateParams, opts ...ClientOption) (*CreatePolicyTemplateOK, *CreatePolicyTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPolicyTemplate",
		Method:             "POST",
		PathPattern:        "/policies/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePolicyTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePolicyTemplateOK:
		return value, nil, nil
	case *CreatePolicyTemplateCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePolicy deletes policy

Delete policy
*/
func (a *Client) DeletePolicy(params *DeletePolicyParams, opts ...ClientOption) (*DeletePolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePolicy",
		Method:             "DELETE",
		PathPattern:        "/policies/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePolicyTemplate deletes policy template

Delete policy template
*/
func (a *Client) DeletePolicyTemplate(params *DeletePolicyTemplateParams, opts ...ClientOption) (*DeletePolicyTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePolicyTemplate",
		Method:             "DELETE",
		PathPattern:        "/policies/templates/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePolicyTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePolicyTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePolicyTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPolicies gets all policies

Get all policies
*/
func (a *Client) GetAllPolicies(params *GetAllPoliciesParams, opts ...ClientOption) (*GetAllPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllPolicies",
		Method:             "GET",
		PathPattern:        "/policies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPolicyTemplates gets all policy templates

Get all policy templates
*/
func (a *Client) GetAllPolicyTemplates(params *GetAllPolicyTemplatesParams, opts ...ClientOption) (*GetAllPolicyTemplatesOK, *GetAllPolicyTemplatesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPolicyTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllPolicyTemplates",
		Method:             "GET",
		PathPattern:        "/policies/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllPolicyTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllPolicyTemplatesOK:
		return value, nil, nil
	case *GetAllPolicyTemplatesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPoliciesForState gets all policies in state

Get all policies in state
*/
func (a *Client) GetPoliciesForState(params *GetPoliciesForStateParams, opts ...ClientOption) (*GetPoliciesForStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoliciesForStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPoliciesForState",
		Method:             "GET",
		PathPattern:        "/policies/state/{state}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPoliciesForStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPoliciesForStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPoliciesForState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicy gets policy

Get policy
*/
func (a *Client) GetPolicy(params *GetPolicyParams, opts ...ClientOption) (*GetPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicy",
		Method:             "GET",
		PathPattern:        "/policies/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyLogs gets policy logs

Policy information about each individual event that occurs when a policy is active
*/
func (a *Client) GetPolicyLogs(params *GetPolicyLogsParams, opts ...ClientOption) (*GetPolicyLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyLogs",
		Method:             "GET",
		PathPattern:        "/policies/{id}/syslogs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyState gets policy state

Get policy state
*/
func (a *Client) GetPolicyState(params *GetPolicyStateParams, opts ...ClientOption) (*GetPolicyStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyState",
		Method:             "GET",
		PathPattern:        "/policies/{id}/state",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyTemplate gets policy template

Get policy template
*/
func (a *Client) GetPolicyTemplate(params *GetPolicyTemplateParams, opts ...ClientOption) (*GetPolicyTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyTemplate",
		Method:             "GET",
		PathPattern:        "/policies/templates/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPolicyTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyTemplate updates policy template

Update policy template
*/
func (a *Client) UpdatePolicyTemplate(params *UpdatePolicyTemplateParams, opts ...ClientOption) (*UpdatePolicyTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyTemplate",
		Method:             "PUT",
		PathPattern:        "/policies/templates/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePolicyTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePolicyTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePolicyTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
