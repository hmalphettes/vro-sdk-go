// Code generated by go-swagger; DO NOT EDIT.

package configuration_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteConfigurationPermissionRuleReader is a Reader for the DeleteConfigurationPermissionRule structure.
type DeleteConfigurationPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteConfigurationPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteConfigurationPermissionRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteConfigurationPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteConfigurationPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /configurations/{id}/permissions/{ruleId}] deleteConfigurationPermissionRule", response, response.Code())
	}
}

// NewDeleteConfigurationPermissionRuleNoContent creates a DeleteConfigurationPermissionRuleNoContent with default headers values
func NewDeleteConfigurationPermissionRuleNoContent() *DeleteConfigurationPermissionRuleNoContent {
	return &DeleteConfigurationPermissionRuleNoContent{}
}

/*
DeleteConfigurationPermissionRuleNoContent describes a response with status code 204, with default header values.

No content
*/
type DeleteConfigurationPermissionRuleNoContent struct {
}

// IsSuccess returns true when this delete configuration permission rule no content response has a 2xx status code
func (o *DeleteConfigurationPermissionRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete configuration permission rule no content response has a 3xx status code
func (o *DeleteConfigurationPermissionRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete configuration permission rule no content response has a 4xx status code
func (o *DeleteConfigurationPermissionRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete configuration permission rule no content response has a 5xx status code
func (o *DeleteConfigurationPermissionRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete configuration permission rule no content response a status code equal to that given
func (o *DeleteConfigurationPermissionRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete configuration permission rule no content response
func (o *DeleteConfigurationPermissionRuleNoContent) Code() int {
	return 204
}

func (o *DeleteConfigurationPermissionRuleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions/{ruleId}][%d] deleteConfigurationPermissionRuleNoContent ", 204)
}

func (o *DeleteConfigurationPermissionRuleNoContent) String() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions/{ruleId}][%d] deleteConfigurationPermissionRuleNoContent ", 204)
}

func (o *DeleteConfigurationPermissionRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConfigurationPermissionRuleUnauthorized creates a DeleteConfigurationPermissionRuleUnauthorized with default headers values
func NewDeleteConfigurationPermissionRuleUnauthorized() *DeleteConfigurationPermissionRuleUnauthorized {
	return &DeleteConfigurationPermissionRuleUnauthorized{}
}

/*
DeleteConfigurationPermissionRuleUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type DeleteConfigurationPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this delete configuration permission rule unauthorized response has a 2xx status code
func (o *DeleteConfigurationPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete configuration permission rule unauthorized response has a 3xx status code
func (o *DeleteConfigurationPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete configuration permission rule unauthorized response has a 4xx status code
func (o *DeleteConfigurationPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete configuration permission rule unauthorized response has a 5xx status code
func (o *DeleteConfigurationPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete configuration permission rule unauthorized response a status code equal to that given
func (o *DeleteConfigurationPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete configuration permission rule unauthorized response
func (o *DeleteConfigurationPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *DeleteConfigurationPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions/{ruleId}][%d] deleteConfigurationPermissionRuleUnauthorized ", 401)
}

func (o *DeleteConfigurationPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions/{ruleId}][%d] deleteConfigurationPermissionRuleUnauthorized ", 401)
}

func (o *DeleteConfigurationPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteConfigurationPermissionRuleNotFound creates a DeleteConfigurationPermissionRuleNotFound with default headers values
func NewDeleteConfigurationPermissionRuleNotFound() *DeleteConfigurationPermissionRuleNotFound {
	return &DeleteConfigurationPermissionRuleNotFound{}
}

/*
DeleteConfigurationPermissionRuleNotFound describes a response with status code 404, with default header values.

Cannot find a configuration with the specified ID, the user does not have 'admin' access rights for that configuration, or the permission rule with the specified ID does not exist
*/
type DeleteConfigurationPermissionRuleNotFound struct {
}

// IsSuccess returns true when this delete configuration permission rule not found response has a 2xx status code
func (o *DeleteConfigurationPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete configuration permission rule not found response has a 3xx status code
func (o *DeleteConfigurationPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete configuration permission rule not found response has a 4xx status code
func (o *DeleteConfigurationPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete configuration permission rule not found response has a 5xx status code
func (o *DeleteConfigurationPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete configuration permission rule not found response a status code equal to that given
func (o *DeleteConfigurationPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete configuration permission rule not found response
func (o *DeleteConfigurationPermissionRuleNotFound) Code() int {
	return 404
}

func (o *DeleteConfigurationPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions/{ruleId}][%d] deleteConfigurationPermissionRuleNotFound ", 404)
}

func (o *DeleteConfigurationPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions/{ruleId}][%d] deleteConfigurationPermissionRuleNotFound ", 404)
}

func (o *DeleteConfigurationPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
