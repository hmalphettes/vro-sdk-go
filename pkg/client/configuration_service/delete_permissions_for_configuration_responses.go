// Code generated by go-swagger; DO NOT EDIT.

package configuration_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePermissionsForConfigurationReader is a Reader for the DeletePermissionsForConfiguration structure.
type DeletePermissionsForConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePermissionsForConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeletePermissionsForConfigurationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePermissionsForConfigurationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePermissionsForConfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /configurations/{id}/permissions] deletePermissionsForConfiguration", response, response.Code())
	}
}

// NewDeletePermissionsForConfigurationNoContent creates a DeletePermissionsForConfigurationNoContent with default headers values
func NewDeletePermissionsForConfigurationNoContent() *DeletePermissionsForConfigurationNoContent {
	return &DeletePermissionsForConfigurationNoContent{}
}

/*
DeletePermissionsForConfigurationNoContent describes a response with status code 204, with default header values.

No content
*/
type DeletePermissionsForConfigurationNoContent struct {
}

// IsSuccess returns true when this delete permissions for configuration no content response has a 2xx status code
func (o *DeletePermissionsForConfigurationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete permissions for configuration no content response has a 3xx status code
func (o *DeletePermissionsForConfigurationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for configuration no content response has a 4xx status code
func (o *DeletePermissionsForConfigurationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete permissions for configuration no content response has a 5xx status code
func (o *DeletePermissionsForConfigurationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for configuration no content response a status code equal to that given
func (o *DeletePermissionsForConfigurationNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete permissions for configuration no content response
func (o *DeletePermissionsForConfigurationNoContent) Code() int {
	return 204
}

func (o *DeletePermissionsForConfigurationNoContent) Error() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions][%d] deletePermissionsForConfigurationNoContent ", 204)
}

func (o *DeletePermissionsForConfigurationNoContent) String() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions][%d] deletePermissionsForConfigurationNoContent ", 204)
}

func (o *DeletePermissionsForConfigurationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForConfigurationUnauthorized creates a DeletePermissionsForConfigurationUnauthorized with default headers values
func NewDeletePermissionsForConfigurationUnauthorized() *DeletePermissionsForConfigurationUnauthorized {
	return &DeletePermissionsForConfigurationUnauthorized{}
}

/*
DeletePermissionsForConfigurationUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type DeletePermissionsForConfigurationUnauthorized struct {
}

// IsSuccess returns true when this delete permissions for configuration unauthorized response has a 2xx status code
func (o *DeletePermissionsForConfigurationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for configuration unauthorized response has a 3xx status code
func (o *DeletePermissionsForConfigurationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for configuration unauthorized response has a 4xx status code
func (o *DeletePermissionsForConfigurationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for configuration unauthorized response has a 5xx status code
func (o *DeletePermissionsForConfigurationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for configuration unauthorized response a status code equal to that given
func (o *DeletePermissionsForConfigurationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete permissions for configuration unauthorized response
func (o *DeletePermissionsForConfigurationUnauthorized) Code() int {
	return 401
}

func (o *DeletePermissionsForConfigurationUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions][%d] deletePermissionsForConfigurationUnauthorized ", 401)
}

func (o *DeletePermissionsForConfigurationUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions][%d] deletePermissionsForConfigurationUnauthorized ", 401)
}

func (o *DeletePermissionsForConfigurationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForConfigurationNotFound creates a DeletePermissionsForConfigurationNotFound with default headers values
func NewDeletePermissionsForConfigurationNotFound() *DeletePermissionsForConfigurationNotFound {
	return &DeletePermissionsForConfigurationNotFound{}
}

/*
DeletePermissionsForConfigurationNotFound describes a response with status code 404, with default header values.

Cannot find configuration with the specified ID
*/
type DeletePermissionsForConfigurationNotFound struct {
}

// IsSuccess returns true when this delete permissions for configuration not found response has a 2xx status code
func (o *DeletePermissionsForConfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for configuration not found response has a 3xx status code
func (o *DeletePermissionsForConfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for configuration not found response has a 4xx status code
func (o *DeletePermissionsForConfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for configuration not found response has a 5xx status code
func (o *DeletePermissionsForConfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for configuration not found response a status code equal to that given
func (o *DeletePermissionsForConfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete permissions for configuration not found response
func (o *DeletePermissionsForConfigurationNotFound) Code() int {
	return 404
}

func (o *DeletePermissionsForConfigurationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions][%d] deletePermissionsForConfigurationNotFound ", 404)
}

func (o *DeletePermissionsForConfigurationNotFound) String() string {
	return fmt.Sprintf("[DELETE /configurations/{id}/permissions][%d] deletePermissionsForConfigurationNotFound ", 404)
}

func (o *DeletePermissionsForConfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
