// Code generated by go-swagger; DO NOT EDIT.

package orchestrator_server_instance_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// InsertPermissionsForOrchestratorServerInstanceReader is a Reader for the InsertPermissionsForOrchestratorServerInstance structure.
type InsertPermissionsForOrchestratorServerInstanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertPermissionsForOrchestratorServerInstanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertPermissionsForOrchestratorServerInstanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewInsertPermissionsForOrchestratorServerInstanceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertPermissionsForOrchestratorServerInstanceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertPermissionsForOrchestratorServerInstanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /server/permissions] insertPermissionsForOrchestratorServerInstance", response, response.Code())
	}
}

// NewInsertPermissionsForOrchestratorServerInstanceOK creates a InsertPermissionsForOrchestratorServerInstanceOK with default headers values
func NewInsertPermissionsForOrchestratorServerInstanceOK() *InsertPermissionsForOrchestratorServerInstanceOK {
	return &InsertPermissionsForOrchestratorServerInstanceOK{}
}

/*
InsertPermissionsForOrchestratorServerInstanceOK describes a response with status code 200, with default header values.

successful operation
*/
type InsertPermissionsForOrchestratorServerInstanceOK struct {
	Payload *models.Permissions
}

// IsSuccess returns true when this insert permissions for orchestrator server instance o k response has a 2xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for orchestrator server instance o k response has a 3xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for orchestrator server instance o k response has a 4xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for orchestrator server instance o k response has a 5xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for orchestrator server instance o k response a status code equal to that given
func (o *InsertPermissionsForOrchestratorServerInstanceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert permissions for orchestrator server instance o k response
func (o *InsertPermissionsForOrchestratorServerInstanceOK) Code() int {
	return 200
}

func (o *InsertPermissionsForOrchestratorServerInstanceOK) Error() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForOrchestratorServerInstanceOK) String() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForOrchestratorServerInstanceOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *InsertPermissionsForOrchestratorServerInstanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertPermissionsForOrchestratorServerInstanceCreated creates a InsertPermissionsForOrchestratorServerInstanceCreated with default headers values
func NewInsertPermissionsForOrchestratorServerInstanceCreated() *InsertPermissionsForOrchestratorServerInstanceCreated {
	return &InsertPermissionsForOrchestratorServerInstanceCreated{}
}

/*
InsertPermissionsForOrchestratorServerInstanceCreated describes a response with status code 201, with default header values.

Created
*/
type InsertPermissionsForOrchestratorServerInstanceCreated struct {
}

// IsSuccess returns true when this insert permissions for orchestrator server instance created response has a 2xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for orchestrator server instance created response has a 3xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for orchestrator server instance created response has a 4xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for orchestrator server instance created response has a 5xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for orchestrator server instance created response a status code equal to that given
func (o *InsertPermissionsForOrchestratorServerInstanceCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the insert permissions for orchestrator server instance created response
func (o *InsertPermissionsForOrchestratorServerInstanceCreated) Code() int {
	return 201
}

func (o *InsertPermissionsForOrchestratorServerInstanceCreated) Error() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceCreated ", 201)
}

func (o *InsertPermissionsForOrchestratorServerInstanceCreated) String() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceCreated ", 201)
}

func (o *InsertPermissionsForOrchestratorServerInstanceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForOrchestratorServerInstanceBadRequest creates a InsertPermissionsForOrchestratorServerInstanceBadRequest with default headers values
func NewInsertPermissionsForOrchestratorServerInstanceBadRequest() *InsertPermissionsForOrchestratorServerInstanceBadRequest {
	return &InsertPermissionsForOrchestratorServerInstanceBadRequest{}
}

/*
InsertPermissionsForOrchestratorServerInstanceBadRequest describes a response with status code 400, with default header values.

The request is invalid(validation error).
*/
type InsertPermissionsForOrchestratorServerInstanceBadRequest struct {
}

// IsSuccess returns true when this insert permissions for orchestrator server instance bad request response has a 2xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for orchestrator server instance bad request response has a 3xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for orchestrator server instance bad request response has a 4xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for orchestrator server instance bad request response has a 5xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for orchestrator server instance bad request response a status code equal to that given
func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert permissions for orchestrator server instance bad request response
func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) Code() int {
	return 400
}

func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) Error() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceBadRequest ", 400)
}

func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) String() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceBadRequest ", 400)
}

func (o *InsertPermissionsForOrchestratorServerInstanceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForOrchestratorServerInstanceUnauthorized creates a InsertPermissionsForOrchestratorServerInstanceUnauthorized with default headers values
func NewInsertPermissionsForOrchestratorServerInstanceUnauthorized() *InsertPermissionsForOrchestratorServerInstanceUnauthorized {
	return &InsertPermissionsForOrchestratorServerInstanceUnauthorized{}
}

/*
InsertPermissionsForOrchestratorServerInstanceUnauthorized describes a response with status code 401, with default header values.

The user is not authorized.
*/
type InsertPermissionsForOrchestratorServerInstanceUnauthorized struct {
}

// IsSuccess returns true when this insert permissions for orchestrator server instance unauthorized response has a 2xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for orchestrator server instance unauthorized response has a 3xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for orchestrator server instance unauthorized response has a 4xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for orchestrator server instance unauthorized response has a 5xx status code
func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for orchestrator server instance unauthorized response a status code equal to that given
func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert permissions for orchestrator server instance unauthorized response
func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) Code() int {
	return 401
}

func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceUnauthorized ", 401)
}

func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) String() string {
	return fmt.Sprintf("[POST /server/permissions][%d] insertPermissionsForOrchestratorServerInstanceUnauthorized ", 401)
}

func (o *InsertPermissionsForOrchestratorServerInstanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
