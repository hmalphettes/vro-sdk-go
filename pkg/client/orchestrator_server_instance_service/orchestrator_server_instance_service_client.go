// Code generated by go-swagger; DO NOT EDIT.

package orchestrator_server_instance_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new orchestrator server instance service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for orchestrator server instance service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOrchestratorServerInstancePermissionRule(params *DeleteOrchestratorServerInstancePermissionRuleParams, opts ...ClientOption) (*DeleteOrchestratorServerInstancePermissionRuleNoContent, error)

	DeletePermissionsForOrchestratorServerInstance(params *DeletePermissionsForOrchestratorServerInstanceParams, opts ...ClientOption) (*DeletePermissionsForOrchestratorServerInstanceNoContent, error)

	EnumerateOrchestratorServerInstanceServices(params *EnumerateOrchestratorServerInstanceServicesParams, opts ...ClientOption) (*EnumerateOrchestratorServerInstanceServicesOK, error)

	GetAuthentication(params *GetAuthenticationParams, opts ...ClientOption) (*GetAuthenticationOK, error)

	GetGroups(params *GetGroupsParams, opts ...ClientOption) (*GetGroupsOK, error)

	GetOrchestratorServerInstancePermissionRule(params *GetOrchestratorServerInstancePermissionRuleParams, opts ...ClientOption) (*GetOrchestratorServerInstancePermissionRuleOK, error)

	GetPermissionsForOrchestatorServerInstance(params *GetPermissionsForOrchestatorServerInstanceParams, opts ...ClientOption) (*GetPermissionsForOrchestatorServerInstanceOK, error)

	InsertPermissionsForOrchestratorServerInstance(params *InsertPermissionsForOrchestratorServerInstanceParams, opts ...ClientOption) (*InsertPermissionsForOrchestratorServerInstanceOK, *InsertPermissionsForOrchestratorServerInstanceCreated, error)

	UpdateOrchestratorServerInstancePermissionRule(params *UpdateOrchestratorServerInstancePermissionRuleParams, opts ...ClientOption) (*UpdateOrchestratorServerInstancePermissionRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteOrchestratorServerInstancePermissionRule deletes permission rule

Deletes a single permission rule with a given ID.
*/
func (a *Client) DeleteOrchestratorServerInstancePermissionRule(params *DeleteOrchestratorServerInstancePermissionRuleParams, opts ...ClientOption) (*DeleteOrchestratorServerInstancePermissionRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrchestratorServerInstancePermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOrchestratorServerInstancePermissionRule",
		Method:             "DELETE",
		PathPattern:        "/server/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrchestratorServerInstancePermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrchestratorServerInstancePermissionRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOrchestratorServerInstancePermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePermissionsForOrchestratorServerInstance deletes all permissions for the orchestrator server

Deletes all permissions for the Orchestrator Server.
*/
func (a *Client) DeletePermissionsForOrchestratorServerInstance(params *DeletePermissionsForOrchestratorServerInstanceParams, opts ...ClientOption) (*DeletePermissionsForOrchestratorServerInstanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsForOrchestratorServerInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePermissionsForOrchestratorServerInstance",
		Method:             "DELETE",
		PathPattern:        "/server/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePermissionsForOrchestratorServerInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePermissionsForOrchestratorServerInstanceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePermissionsForOrchestratorServerInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EnumerateOrchestratorServerInstanceServices enumerates services

A REST endpoint for listing Orchestrator Server instance services.
*/
func (a *Client) EnumerateOrchestratorServerInstanceServices(params *EnumerateOrchestratorServerInstanceServicesParams, opts ...ClientOption) (*EnumerateOrchestratorServerInstanceServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnumerateOrchestratorServerInstanceServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enumerateOrchestratorServerInstanceServices",
		Method:             "GET",
		PathPattern:        "/server",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnumerateOrchestratorServerInstanceServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnumerateOrchestratorServerInstanceServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for enumerateOrchestratorServerInstanceServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthentication gets authentication

Retrieve the Orchestrator Server Authentication configuration type and login url.
*/
func (a *Client) GetAuthentication(params *GetAuthenticationParams, opts ...ClientOption) (*GetAuthenticationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthenticationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthentication",
		Method:             "GET",
		PathPattern:        "/server/authentication",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthenticationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthenticationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthentication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGroups gets groups

A REST endpoint for getting all available user groups that can be used for setting permissions. If maxResult request parameters is not used the groups returned will be limited to 200.
*/
func (a *Client) GetGroups(params *GetGroupsParams, opts ...ClientOption) (*GetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGroups",
		Method:             "GET",
		PathPattern:        "/server/groups",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrchestratorServerInstancePermissionRule gets permission rule

Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.
*/
func (a *Client) GetOrchestratorServerInstancePermissionRule(params *GetOrchestratorServerInstancePermissionRuleParams, opts ...ClientOption) (*GetOrchestratorServerInstancePermissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrchestratorServerInstancePermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrchestratorServerInstancePermissionRule",
		Method:             "GET",
		PathPattern:        "/server/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrchestratorServerInstancePermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrchestratorServerInstancePermissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrchestratorServerInstancePermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPermissionsForOrchestatorServerInstance gets orchestrator server permissions

Retrieve the Orchestrator Server permissions.
*/
func (a *Client) GetPermissionsForOrchestatorServerInstance(params *GetPermissionsForOrchestatorServerInstanceParams, opts ...ClientOption) (*GetPermissionsForOrchestatorServerInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsForOrchestatorServerInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermissionsForOrchestatorServerInstance",
		Method:             "GET",
		PathPattern:        "/server/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPermissionsForOrchestatorServerInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsForOrchestatorServerInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPermissionsForOrchestatorServerInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPermissionsForOrchestratorServerInstance inserts permissions for orchestrator server

Adds new permissions for the Orchestrator Server or updates the current ones if such permission rules exist. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN
*/
func (a *Client) InsertPermissionsForOrchestratorServerInstance(params *InsertPermissionsForOrchestratorServerInstanceParams, opts ...ClientOption) (*InsertPermissionsForOrchestratorServerInstanceOK, *InsertPermissionsForOrchestratorServerInstanceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPermissionsForOrchestratorServerInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPermissionsForOrchestratorServerInstance",
		Method:             "POST",
		PathPattern:        "/server/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InsertPermissionsForOrchestratorServerInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertPermissionsForOrchestratorServerInstanceOK:
		return value, nil, nil
	case *InsertPermissionsForOrchestratorServerInstanceCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for orchestrator_server_instance_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrchestratorServerInstancePermissionRule updates permission rule

Updates principal or access rights for a single permission rule with a given ID.
*/
func (a *Client) UpdateOrchestratorServerInstancePermissionRule(params *UpdateOrchestratorServerInstancePermissionRuleParams, opts ...ClientOption) (*UpdateOrchestratorServerInstancePermissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrchestratorServerInstancePermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrchestratorServerInstancePermissionRule",
		Method:             "PUT",
		PathPattern:        "/server/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrchestratorServerInstancePermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrchestratorServerInstancePermissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrchestratorServerInstancePermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
