// Code generated by go-swagger; DO NOT EDIT.

package server_configuration_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPluginAPIParams creates a new GetPluginAPIParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPluginAPIParams() *GetPluginAPIParams {
	return &GetPluginAPIParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPluginAPIParamsWithTimeout creates a new GetPluginAPIParams object
// with the ability to set a timeout on a request.
func NewGetPluginAPIParamsWithTimeout(timeout time.Duration) *GetPluginAPIParams {
	return &GetPluginAPIParams{
		timeout: timeout,
	}
}

// NewGetPluginAPIParamsWithContext creates a new GetPluginAPIParams object
// with the ability to set a context for a request.
func NewGetPluginAPIParamsWithContext(ctx context.Context) *GetPluginAPIParams {
	return &GetPluginAPIParams{
		Context: ctx,
	}
}

// NewGetPluginAPIParamsWithHTTPClient creates a new GetPluginAPIParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPluginAPIParamsWithHTTPClient(client *http.Client) *GetPluginAPIParams {
	return &GetPluginAPIParams{
		HTTPClient: client,
	}
}

/*
GetPluginAPIParams contains all the parameters to send to the API endpoint

	for the get plugin Api operation.

	Typically these are written to a http.Request.
*/
type GetPluginAPIParams struct {

	// Build.
	//
	// Format: int64
	Build int64

	// Filter.
	Filter *string

	// IsStrict.
	IsStrict *bool

	// Plugin.
	Plugin string

	// Scope.
	Scope *string

	// Version.
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get plugin Api params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPluginAPIParams) WithDefaults() *GetPluginAPIParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get plugin Api params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPluginAPIParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get plugin Api params
func (o *GetPluginAPIParams) WithTimeout(timeout time.Duration) *GetPluginAPIParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get plugin Api params
func (o *GetPluginAPIParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get plugin Api params
func (o *GetPluginAPIParams) WithContext(ctx context.Context) *GetPluginAPIParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get plugin Api params
func (o *GetPluginAPIParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get plugin Api params
func (o *GetPluginAPIParams) WithHTTPClient(client *http.Client) *GetPluginAPIParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get plugin Api params
func (o *GetPluginAPIParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBuild adds the build to the get plugin Api params
func (o *GetPluginAPIParams) WithBuild(build int64) *GetPluginAPIParams {
	o.SetBuild(build)
	return o
}

// SetBuild adds the build to the get plugin Api params
func (o *GetPluginAPIParams) SetBuild(build int64) {
	o.Build = build
}

// WithFilter adds the filter to the get plugin Api params
func (o *GetPluginAPIParams) WithFilter(filter *string) *GetPluginAPIParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get plugin Api params
func (o *GetPluginAPIParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithIsStrict adds the isStrict to the get plugin Api params
func (o *GetPluginAPIParams) WithIsStrict(isStrict *bool) *GetPluginAPIParams {
	o.SetIsStrict(isStrict)
	return o
}

// SetIsStrict adds the isStrict to the get plugin Api params
func (o *GetPluginAPIParams) SetIsStrict(isStrict *bool) {
	o.IsStrict = isStrict
}

// WithPlugin adds the plugin to the get plugin Api params
func (o *GetPluginAPIParams) WithPlugin(plugin string) *GetPluginAPIParams {
	o.SetPlugin(plugin)
	return o
}

// SetPlugin adds the plugin to the get plugin Api params
func (o *GetPluginAPIParams) SetPlugin(plugin string) {
	o.Plugin = plugin
}

// WithScope adds the scope to the get plugin Api params
func (o *GetPluginAPIParams) WithScope(scope *string) *GetPluginAPIParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get plugin Api params
func (o *GetPluginAPIParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithVersion adds the version to the get plugin Api params
func (o *GetPluginAPIParams) WithVersion(version string) *GetPluginAPIParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get plugin Api params
func (o *GetPluginAPIParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetPluginAPIParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param build
	if err := r.SetPathParam("build", swag.FormatInt64(o.Build)); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.IsStrict != nil {

		// query param isStrict
		var qrIsStrict bool

		if o.IsStrict != nil {
			qrIsStrict = *o.IsStrict
		}
		qIsStrict := swag.FormatBool(qrIsStrict)
		if qIsStrict != "" {

			if err := r.SetQueryParam("isStrict", qIsStrict); err != nil {
				return err
			}
		}
	}

	// path param plugin
	if err := r.SetPathParam("plugin", o.Plugin); err != nil {
		return err
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	// path param version
	if err := r.SetPathParam("version", o.Version); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
