// Code generated by go-swagger; DO NOT EDIT.

package server_configuration_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImportServerConfigurationParams creates a new ImportServerConfigurationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewImportServerConfigurationParams() *ImportServerConfigurationParams {
	return &ImportServerConfigurationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewImportServerConfigurationParamsWithTimeout creates a new ImportServerConfigurationParams object
// with the ability to set a timeout on a request.
func NewImportServerConfigurationParamsWithTimeout(timeout time.Duration) *ImportServerConfigurationParams {
	return &ImportServerConfigurationParams{
		timeout: timeout,
	}
}

// NewImportServerConfigurationParamsWithContext creates a new ImportServerConfigurationParams object
// with the ability to set a context for a request.
func NewImportServerConfigurationParamsWithContext(ctx context.Context) *ImportServerConfigurationParams {
	return &ImportServerConfigurationParams{
		Context: ctx,
	}
}

// NewImportServerConfigurationParamsWithHTTPClient creates a new ImportServerConfigurationParams object
// with the ability to set a custom HTTPClient for a request.
func NewImportServerConfigurationParamsWithHTTPClient(client *http.Client) *ImportServerConfigurationParams {
	return &ImportServerConfigurationParams{
		HTTPClient: client,
	}
}

/*
ImportServerConfigurationParams contains all the parameters to send to the API endpoint

	for the import server configuration operation.

	Typically these are written to a http.Request.
*/
type ImportServerConfigurationParams struct {

	// ImportIdentity.
	ImportIdentity *bool

	// IsUpgradeBackup.
	IsUpgradeBackup *bool

	// Password.
	Password *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the import server configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportServerConfigurationParams) WithDefaults() *ImportServerConfigurationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the import server configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportServerConfigurationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the import server configuration params
func (o *ImportServerConfigurationParams) WithTimeout(timeout time.Duration) *ImportServerConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import server configuration params
func (o *ImportServerConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import server configuration params
func (o *ImportServerConfigurationParams) WithContext(ctx context.Context) *ImportServerConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import server configuration params
func (o *ImportServerConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import server configuration params
func (o *ImportServerConfigurationParams) WithHTTPClient(client *http.Client) *ImportServerConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import server configuration params
func (o *ImportServerConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImportIdentity adds the importIdentity to the import server configuration params
func (o *ImportServerConfigurationParams) WithImportIdentity(importIdentity *bool) *ImportServerConfigurationParams {
	o.SetImportIdentity(importIdentity)
	return o
}

// SetImportIdentity adds the importIdentity to the import server configuration params
func (o *ImportServerConfigurationParams) SetImportIdentity(importIdentity *bool) {
	o.ImportIdentity = importIdentity
}

// WithIsUpgradeBackup adds the isUpgradeBackup to the import server configuration params
func (o *ImportServerConfigurationParams) WithIsUpgradeBackup(isUpgradeBackup *bool) *ImportServerConfigurationParams {
	o.SetIsUpgradeBackup(isUpgradeBackup)
	return o
}

// SetIsUpgradeBackup adds the isUpgradeBackup to the import server configuration params
func (o *ImportServerConfigurationParams) SetIsUpgradeBackup(isUpgradeBackup *bool) {
	o.IsUpgradeBackup = isUpgradeBackup
}

// WithPassword adds the password to the import server configuration params
func (o *ImportServerConfigurationParams) WithPassword(password *string) *ImportServerConfigurationParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the import server configuration params
func (o *ImportServerConfigurationParams) SetPassword(password *string) {
	o.Password = password
}

// WriteToRequest writes these params to a swagger request
func (o *ImportServerConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ImportIdentity != nil {

		// query param importIdentity
		var qrImportIdentity bool

		if o.ImportIdentity != nil {
			qrImportIdentity = *o.ImportIdentity
		}
		qImportIdentity := swag.FormatBool(qrImportIdentity)
		if qImportIdentity != "" {

			if err := r.SetQueryParam("importIdentity", qImportIdentity); err != nil {
				return err
			}
		}
	}

	if o.IsUpgradeBackup != nil {

		// query param isUpgradeBackup
		var qrIsUpgradeBackup bool

		if o.IsUpgradeBackup != nil {
			qrIsUpgradeBackup = *o.IsUpgradeBackup
		}
		qIsUpgradeBackup := swag.FormatBool(qrIsUpgradeBackup)
		if qIsUpgradeBackup != "" {

			if err := r.SetQueryParam("isUpgradeBackup", qIsUpgradeBackup); err != nil {
				return err
			}
		}
	}

	if o.Password != nil {

		// query param password
		var qrPassword string

		if o.Password != nil {
			qrPassword = *o.Password
		}
		qPassword := qrPassword
		if qPassword != "" {

			if err := r.SetQueryParam("password", qPassword); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
