// Code generated by go-swagger; DO NOT EDIT.

package server_configuration_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCategoryDetailsParams creates a new GetCategoryDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCategoryDetailsParams() *GetCategoryDetailsParams {
	return &GetCategoryDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCategoryDetailsParamsWithTimeout creates a new GetCategoryDetailsParams object
// with the ability to set a timeout on a request.
func NewGetCategoryDetailsParamsWithTimeout(timeout time.Duration) *GetCategoryDetailsParams {
	return &GetCategoryDetailsParams{
		timeout: timeout,
	}
}

// NewGetCategoryDetailsParamsWithContext creates a new GetCategoryDetailsParams object
// with the ability to set a context for a request.
func NewGetCategoryDetailsParamsWithContext(ctx context.Context) *GetCategoryDetailsParams {
	return &GetCategoryDetailsParams{
		Context: ctx,
	}
}

// NewGetCategoryDetailsParamsWithHTTPClient creates a new GetCategoryDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCategoryDetailsParamsWithHTTPClient(client *http.Client) *GetCategoryDetailsParams {
	return &GetCategoryDetailsParams{
		HTTPClient: client,
	}
}

/*
GetCategoryDetailsParams contains all the parameters to send to the API endpoint

	for the get category details operation.

	Typically these are written to a http.Request.
*/
type GetCategoryDetailsParams struct {

	// Filter.
	Filter *string

	// ID.
	ID string

	// IsStrict.
	IsStrict *bool

	// Scope.
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get category details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCategoryDetailsParams) WithDefaults() *GetCategoryDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get category details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCategoryDetailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get category details params
func (o *GetCategoryDetailsParams) WithTimeout(timeout time.Duration) *GetCategoryDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get category details params
func (o *GetCategoryDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get category details params
func (o *GetCategoryDetailsParams) WithContext(ctx context.Context) *GetCategoryDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get category details params
func (o *GetCategoryDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get category details params
func (o *GetCategoryDetailsParams) WithHTTPClient(client *http.Client) *GetCategoryDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get category details params
func (o *GetCategoryDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the get category details params
func (o *GetCategoryDetailsParams) WithFilter(filter *string) *GetCategoryDetailsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get category details params
func (o *GetCategoryDetailsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithID adds the id to the get category details params
func (o *GetCategoryDetailsParams) WithID(id string) *GetCategoryDetailsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get category details params
func (o *GetCategoryDetailsParams) SetID(id string) {
	o.ID = id
}

// WithIsStrict adds the isStrict to the get category details params
func (o *GetCategoryDetailsParams) WithIsStrict(isStrict *bool) *GetCategoryDetailsParams {
	o.SetIsStrict(isStrict)
	return o
}

// SetIsStrict adds the isStrict to the get category details params
func (o *GetCategoryDetailsParams) SetIsStrict(isStrict *bool) {
	o.IsStrict = isStrict
}

// WithScope adds the scope to the get category details params
func (o *GetCategoryDetailsParams) WithScope(scope *string) *GetCategoryDetailsParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the get category details params
func (o *GetCategoryDetailsParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *GetCategoryDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IsStrict != nil {

		// query param isStrict
		var qrIsStrict bool

		if o.IsStrict != nil {
			qrIsStrict = *o.IsStrict
		}
		qIsStrict := swag.FormatBool(qrIsStrict)
		if qIsStrict != "" {

			if err := r.SetQueryParam("isStrict", qIsStrict); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
