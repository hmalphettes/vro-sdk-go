// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ImportPackageReader is a Reader for the ImportPackage structure.
type ImportPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewImportPackageCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewImportPackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewImportPackageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /packages] importPackage", response, response.Code())
	}
}

// NewImportPackageCreated creates a ImportPackageCreated with default headers values
func NewImportPackageCreated() *ImportPackageCreated {
	return &ImportPackageCreated{}
}

/*
ImportPackageCreated describes a response with status code 201, with default header values.

Package successfully imported
*/
type ImportPackageCreated struct {
}

// IsSuccess returns true when this import package created response has a 2xx status code
func (o *ImportPackageCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import package created response has a 3xx status code
func (o *ImportPackageCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import package created response has a 4xx status code
func (o *ImportPackageCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this import package created response has a 5xx status code
func (o *ImportPackageCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this import package created response a status code equal to that given
func (o *ImportPackageCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the import package created response
func (o *ImportPackageCreated) Code() int {
	return 201
}

func (o *ImportPackageCreated) Error() string {
	return fmt.Sprintf("[POST /packages][%d] importPackageCreated ", 201)
}

func (o *ImportPackageCreated) String() string {
	return fmt.Sprintf("[POST /packages][%d] importPackageCreated ", 201)
}

func (o *ImportPackageCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportPackageUnauthorized creates a ImportPackageUnauthorized with default headers values
func NewImportPackageUnauthorized() *ImportPackageUnauthorized {
	return &ImportPackageUnauthorized{}
}

/*
ImportPackageUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type ImportPackageUnauthorized struct {
}

// IsSuccess returns true when this import package unauthorized response has a 2xx status code
func (o *ImportPackageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import package unauthorized response has a 3xx status code
func (o *ImportPackageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import package unauthorized response has a 4xx status code
func (o *ImportPackageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this import package unauthorized response has a 5xx status code
func (o *ImportPackageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this import package unauthorized response a status code equal to that given
func (o *ImportPackageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the import package unauthorized response
func (o *ImportPackageUnauthorized) Code() int {
	return 401
}

func (o *ImportPackageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /packages][%d] importPackageUnauthorized ", 401)
}

func (o *ImportPackageUnauthorized) String() string {
	return fmt.Sprintf("[POST /packages][%d] importPackageUnauthorized ", 401)
}

func (o *ImportPackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportPackageConflict creates a ImportPackageConflict with default headers values
func NewImportPackageConflict() *ImportPackageConflict {
	return &ImportPackageConflict{}
}

/*
ImportPackageConflict describes a response with status code 409, with default header values.

One or more package elements have an older version.
*/
type ImportPackageConflict struct {
}

// IsSuccess returns true when this import package conflict response has a 2xx status code
func (o *ImportPackageConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import package conflict response has a 3xx status code
func (o *ImportPackageConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import package conflict response has a 4xx status code
func (o *ImportPackageConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this import package conflict response has a 5xx status code
func (o *ImportPackageConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this import package conflict response a status code equal to that given
func (o *ImportPackageConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the import package conflict response
func (o *ImportPackageConflict) Code() int {
	return 409
}

func (o *ImportPackageConflict) Error() string {
	return fmt.Sprintf("[POST /packages][%d] importPackageConflict ", 409)
}

func (o *ImportPackageConflict) String() string {
	return fmt.Sprintf("[POST /packages][%d] importPackageConflict ", 409)
}

func (o *ImportPackageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
