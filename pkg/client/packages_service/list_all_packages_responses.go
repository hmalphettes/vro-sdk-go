// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// ListAllPackagesReader is a Reader for the ListAllPackages structure.
type ListAllPackagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAllPackagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAllPackagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAllPackagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAllPackagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /packages] listAllPackages", response, response.Code())
	}
}

// NewListAllPackagesOK creates a ListAllPackagesOK with default headers values
func NewListAllPackagesOK() *ListAllPackagesOK {
	return &ListAllPackagesOK{}
}

/*
ListAllPackagesOK describes a response with status code 200, with default header values.

The request is successful
*/
type ListAllPackagesOK struct {
	Payload *models.Packages
}

// IsSuccess returns true when this list all packages o k response has a 2xx status code
func (o *ListAllPackagesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list all packages o k response has a 3xx status code
func (o *ListAllPackagesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all packages o k response has a 4xx status code
func (o *ListAllPackagesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list all packages o k response has a 5xx status code
func (o *ListAllPackagesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list all packages o k response a status code equal to that given
func (o *ListAllPackagesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list all packages o k response
func (o *ListAllPackagesOK) Code() int {
	return 200
}

func (o *ListAllPackagesOK) Error() string {
	return fmt.Sprintf("[GET /packages][%d] listAllPackagesOK  %+v", 200, o.Payload)
}

func (o *ListAllPackagesOK) String() string {
	return fmt.Sprintf("[GET /packages][%d] listAllPackagesOK  %+v", 200, o.Payload)
}

func (o *ListAllPackagesOK) GetPayload() *models.Packages {
	return o.Payload
}

func (o *ListAllPackagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Packages)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllPackagesBadRequest creates a ListAllPackagesBadRequest with default headers values
func NewListAllPackagesBadRequest() *ListAllPackagesBadRequest {
	return &ListAllPackagesBadRequest{}
}

/*
ListAllPackagesBadRequest describes a response with status code 400, with default header values.

Request is not valid (validation error)
*/
type ListAllPackagesBadRequest struct {
}

// IsSuccess returns true when this list all packages bad request response has a 2xx status code
func (o *ListAllPackagesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all packages bad request response has a 3xx status code
func (o *ListAllPackagesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all packages bad request response has a 4xx status code
func (o *ListAllPackagesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list all packages bad request response has a 5xx status code
func (o *ListAllPackagesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list all packages bad request response a status code equal to that given
func (o *ListAllPackagesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list all packages bad request response
func (o *ListAllPackagesBadRequest) Code() int {
	return 400
}

func (o *ListAllPackagesBadRequest) Error() string {
	return fmt.Sprintf("[GET /packages][%d] listAllPackagesBadRequest ", 400)
}

func (o *ListAllPackagesBadRequest) String() string {
	return fmt.Sprintf("[GET /packages][%d] listAllPackagesBadRequest ", 400)
}

func (o *ListAllPackagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListAllPackagesUnauthorized creates a ListAllPackagesUnauthorized with default headers values
func NewListAllPackagesUnauthorized() *ListAllPackagesUnauthorized {
	return &ListAllPackagesUnauthorized{}
}

/*
ListAllPackagesUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type ListAllPackagesUnauthorized struct {
}

// IsSuccess returns true when this list all packages unauthorized response has a 2xx status code
func (o *ListAllPackagesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all packages unauthorized response has a 3xx status code
func (o *ListAllPackagesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all packages unauthorized response has a 4xx status code
func (o *ListAllPackagesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list all packages unauthorized response has a 5xx status code
func (o *ListAllPackagesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list all packages unauthorized response a status code equal to that given
func (o *ListAllPackagesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list all packages unauthorized response
func (o *ListAllPackagesUnauthorized) Code() int {
	return 401
}

func (o *ListAllPackagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /packages][%d] listAllPackagesUnauthorized ", 401)
}

func (o *ListAllPackagesUnauthorized) String() string {
	return fmt.Sprintf("[GET /packages][%d] listAllPackagesUnauthorized ", 401)
}

func (o *ListAllPackagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
