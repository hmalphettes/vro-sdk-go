// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeletePackageParams creates a new DeletePackageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeletePackageParams() *DeletePackageParams {
	return &DeletePackageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeletePackageParamsWithTimeout creates a new DeletePackageParams object
// with the ability to set a timeout on a request.
func NewDeletePackageParamsWithTimeout(timeout time.Duration) *DeletePackageParams {
	return &DeletePackageParams{
		timeout: timeout,
	}
}

// NewDeletePackageParamsWithContext creates a new DeletePackageParams object
// with the ability to set a context for a request.
func NewDeletePackageParamsWithContext(ctx context.Context) *DeletePackageParams {
	return &DeletePackageParams{
		Context: ctx,
	}
}

// NewDeletePackageParamsWithHTTPClient creates a new DeletePackageParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeletePackageParamsWithHTTPClient(client *http.Client) *DeletePackageParams {
	return &DeletePackageParams{
		HTTPClient: client,
	}
}

/*
DeletePackageParams contains all the parameters to send to the API endpoint

	for the delete package operation.

	Typically these are written to a http.Request.
*/
type DeletePackageParams struct {

	// Option.
	//
	// Default: "deletePackage"
	Option *string

	// PackageName.
	PackageName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete package params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeletePackageParams) WithDefaults() *DeletePackageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete package params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeletePackageParams) SetDefaults() {
	var (
		optionDefault = string("deletePackage")
	)

	val := DeletePackageParams{
		Option: &optionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete package params
func (o *DeletePackageParams) WithTimeout(timeout time.Duration) *DeletePackageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete package params
func (o *DeletePackageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete package params
func (o *DeletePackageParams) WithContext(ctx context.Context) *DeletePackageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete package params
func (o *DeletePackageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete package params
func (o *DeletePackageParams) WithHTTPClient(client *http.Client) *DeletePackageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete package params
func (o *DeletePackageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOption adds the option to the delete package params
func (o *DeletePackageParams) WithOption(option *string) *DeletePackageParams {
	o.SetOption(option)
	return o
}

// SetOption adds the option to the delete package params
func (o *DeletePackageParams) SetOption(option *string) {
	o.Option = option
}

// WithPackageName adds the packageName to the delete package params
func (o *DeletePackageParams) WithPackageName(packageName string) *DeletePackageParams {
	o.SetPackageName(packageName)
	return o
}

// SetPackageName adds the packageName to the delete package params
func (o *DeletePackageParams) SetPackageName(packageName string) {
	o.PackageName = packageName
}

// WriteToRequest writes these params to a swagger request
func (o *DeletePackageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Option != nil {

		// query param option
		var qrOption string

		if o.Option != nil {
			qrOption = *o.Option
		}
		qOption := qrOption
		if qOption != "" {

			if err := r.SetQueryParam("option", qOption); err != nil {
				return err
			}
		}
	}

	// path param packageName
	if err := r.SetPathParam("packageName", o.PackageName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
