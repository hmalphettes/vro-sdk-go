// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CreatePackageReader is a Reader for the CreatePackage structure.
type CreatePackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePackageCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreatePackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreatePackageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /packages/{packageName}] createPackage", response, response.Code())
	}
}

// NewCreatePackageCreated creates a CreatePackageCreated with default headers values
func NewCreatePackageCreated() *CreatePackageCreated {
	return &CreatePackageCreated{}
}

/*
CreatePackageCreated describes a response with status code 201, with default header values.

The request is successful
*/
type CreatePackageCreated struct {
}

// IsSuccess returns true when this create package created response has a 2xx status code
func (o *CreatePackageCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create package created response has a 3xx status code
func (o *CreatePackageCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create package created response has a 4xx status code
func (o *CreatePackageCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create package created response has a 5xx status code
func (o *CreatePackageCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create package created response a status code equal to that given
func (o *CreatePackageCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create package created response
func (o *CreatePackageCreated) Code() int {
	return 201
}

func (o *CreatePackageCreated) Error() string {
	return fmt.Sprintf("[PUT /packages/{packageName}][%d] createPackageCreated ", 201)
}

func (o *CreatePackageCreated) String() string {
	return fmt.Sprintf("[PUT /packages/{packageName}][%d] createPackageCreated ", 201)
}

func (o *CreatePackageCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreatePackageUnauthorized creates a CreatePackageUnauthorized with default headers values
func NewCreatePackageUnauthorized() *CreatePackageUnauthorized {
	return &CreatePackageUnauthorized{}
}

/*
CreatePackageUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type CreatePackageUnauthorized struct {
}

// IsSuccess returns true when this create package unauthorized response has a 2xx status code
func (o *CreatePackageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create package unauthorized response has a 3xx status code
func (o *CreatePackageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create package unauthorized response has a 4xx status code
func (o *CreatePackageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create package unauthorized response has a 5xx status code
func (o *CreatePackageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create package unauthorized response a status code equal to that given
func (o *CreatePackageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create package unauthorized response
func (o *CreatePackageUnauthorized) Code() int {
	return 401
}

func (o *CreatePackageUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /packages/{packageName}][%d] createPackageUnauthorized ", 401)
}

func (o *CreatePackageUnauthorized) String() string {
	return fmt.Sprintf("[PUT /packages/{packageName}][%d] createPackageUnauthorized ", 401)
}

func (o *CreatePackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreatePackageConflict creates a CreatePackageConflict with default headers values
func NewCreatePackageConflict() *CreatePackageConflict {
	return &CreatePackageConflict{}
}

/*
CreatePackageConflict describes a response with status code 409, with default header values.

Package already exists
*/
type CreatePackageConflict struct {
}

// IsSuccess returns true when this create package conflict response has a 2xx status code
func (o *CreatePackageConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create package conflict response has a 3xx status code
func (o *CreatePackageConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create package conflict response has a 4xx status code
func (o *CreatePackageConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create package conflict response has a 5xx status code
func (o *CreatePackageConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create package conflict response a status code equal to that given
func (o *CreatePackageConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create package conflict response
func (o *CreatePackageConflict) Code() int {
	return 409
}

func (o *CreatePackageConflict) Error() string {
	return fmt.Sprintf("[PUT /packages/{packageName}][%d] createPackageConflict ", 409)
}

func (o *CreatePackageConflict) String() string {
	return fmt.Sprintf("[PUT /packages/{packageName}][%d] createPackageConflict ", 409)
}

func (o *CreatePackageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
