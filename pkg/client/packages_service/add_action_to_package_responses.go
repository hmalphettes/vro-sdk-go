// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AddActionToPackageReader is a Reader for the AddActionToPackage structure.
type AddActionToPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddActionToPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddActionToPackageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddActionToPackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddActionToPackageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /packages/{packageName}/action/{categoryName}/{actionName}] addActionToPackage", response, response.Code())
	}
}

// NewAddActionToPackageNoContent creates a AddActionToPackageNoContent with default headers values
func NewAddActionToPackageNoContent() *AddActionToPackageNoContent {
	return &AddActionToPackageNoContent{}
}

/*
AddActionToPackageNoContent describes a response with status code 204, with default header values.

The request is successful
*/
type AddActionToPackageNoContent struct {
}

// IsSuccess returns true when this add action to package no content response has a 2xx status code
func (o *AddActionToPackageNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add action to package no content response has a 3xx status code
func (o *AddActionToPackageNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add action to package no content response has a 4xx status code
func (o *AddActionToPackageNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add action to package no content response has a 5xx status code
func (o *AddActionToPackageNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add action to package no content response a status code equal to that given
func (o *AddActionToPackageNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the add action to package no content response
func (o *AddActionToPackageNoContent) Code() int {
	return 204
}

func (o *AddActionToPackageNoContent) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/action/{categoryName}/{actionName}][%d] addActionToPackageNoContent ", 204)
}

func (o *AddActionToPackageNoContent) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/action/{categoryName}/{actionName}][%d] addActionToPackageNoContent ", 204)
}

func (o *AddActionToPackageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddActionToPackageUnauthorized creates a AddActionToPackageUnauthorized with default headers values
func NewAddActionToPackageUnauthorized() *AddActionToPackageUnauthorized {
	return &AddActionToPackageUnauthorized{}
}

/*
AddActionToPackageUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type AddActionToPackageUnauthorized struct {
}

// IsSuccess returns true when this add action to package unauthorized response has a 2xx status code
func (o *AddActionToPackageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add action to package unauthorized response has a 3xx status code
func (o *AddActionToPackageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add action to package unauthorized response has a 4xx status code
func (o *AddActionToPackageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add action to package unauthorized response has a 5xx status code
func (o *AddActionToPackageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add action to package unauthorized response a status code equal to that given
func (o *AddActionToPackageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add action to package unauthorized response
func (o *AddActionToPackageUnauthorized) Code() int {
	return 401
}

func (o *AddActionToPackageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/action/{categoryName}/{actionName}][%d] addActionToPackageUnauthorized ", 401)
}

func (o *AddActionToPackageUnauthorized) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/action/{categoryName}/{actionName}][%d] addActionToPackageUnauthorized ", 401)
}

func (o *AddActionToPackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddActionToPackageNotFound creates a AddActionToPackageNotFound with default headers values
func NewAddActionToPackageNotFound() *AddActionToPackageNotFound {
	return &AddActionToPackageNotFound{}
}

/*
AddActionToPackageNotFound describes a response with status code 404, with default header values.

Package or workflow is missing
*/
type AddActionToPackageNotFound struct {
}

// IsSuccess returns true when this add action to package not found response has a 2xx status code
func (o *AddActionToPackageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add action to package not found response has a 3xx status code
func (o *AddActionToPackageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add action to package not found response has a 4xx status code
func (o *AddActionToPackageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add action to package not found response has a 5xx status code
func (o *AddActionToPackageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add action to package not found response a status code equal to that given
func (o *AddActionToPackageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add action to package not found response
func (o *AddActionToPackageNotFound) Code() int {
	return 404
}

func (o *AddActionToPackageNotFound) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/action/{categoryName}/{actionName}][%d] addActionToPackageNotFound ", 404)
}

func (o *AddActionToPackageNotFound) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/action/{categoryName}/{actionName}][%d] addActionToPackageNotFound ", 404)
}

func (o *AddActionToPackageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
