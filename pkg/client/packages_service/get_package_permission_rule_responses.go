// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetPackagePermissionRuleReader is a Reader for the GetPackagePermissionRule structure.
type GetPackagePermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPackagePermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPackagePermissionRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPackagePermissionRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPackagePermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPackagePermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /packages/{packageName}/permissions/{ruleId}] getPackagePermissionRule", response, response.Code())
	}
}

// NewGetPackagePermissionRuleOK creates a GetPackagePermissionRuleOK with default headers values
func NewGetPackagePermissionRuleOK() *GetPackagePermissionRuleOK {
	return &GetPackagePermissionRuleOK{}
}

/*
GetPackagePermissionRuleOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetPackagePermissionRuleOK struct {
	Payload *models.Permission
}

// IsSuccess returns true when this get package permission rule o k response has a 2xx status code
func (o *GetPackagePermissionRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get package permission rule o k response has a 3xx status code
func (o *GetPackagePermissionRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package permission rule o k response has a 4xx status code
func (o *GetPackagePermissionRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get package permission rule o k response has a 5xx status code
func (o *GetPackagePermissionRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get package permission rule o k response a status code equal to that given
func (o *GetPackagePermissionRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get package permission rule o k response
func (o *GetPackagePermissionRuleOK) Code() int {
	return 200
}

func (o *GetPackagePermissionRuleOK) Error() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetPackagePermissionRuleOK) String() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetPackagePermissionRuleOK) GetPayload() *models.Permission {
	return o.Payload
}

func (o *GetPackagePermissionRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPackagePermissionRuleBadRequest creates a GetPackagePermissionRuleBadRequest with default headers values
func NewGetPackagePermissionRuleBadRequest() *GetPackagePermissionRuleBadRequest {
	return &GetPackagePermissionRuleBadRequest{}
}

/*
GetPackagePermissionRuleBadRequest describes a response with status code 400, with default header values.

Request is not valid (validation error)
*/
type GetPackagePermissionRuleBadRequest struct {
}

// IsSuccess returns true when this get package permission rule bad request response has a 2xx status code
func (o *GetPackagePermissionRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package permission rule bad request response has a 3xx status code
func (o *GetPackagePermissionRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package permission rule bad request response has a 4xx status code
func (o *GetPackagePermissionRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get package permission rule bad request response has a 5xx status code
func (o *GetPackagePermissionRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get package permission rule bad request response a status code equal to that given
func (o *GetPackagePermissionRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get package permission rule bad request response
func (o *GetPackagePermissionRuleBadRequest) Code() int {
	return 400
}

func (o *GetPackagePermissionRuleBadRequest) Error() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleBadRequest ", 400)
}

func (o *GetPackagePermissionRuleBadRequest) String() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleBadRequest ", 400)
}

func (o *GetPackagePermissionRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPackagePermissionRuleUnauthorized creates a GetPackagePermissionRuleUnauthorized with default headers values
func NewGetPackagePermissionRuleUnauthorized() *GetPackagePermissionRuleUnauthorized {
	return &GetPackagePermissionRuleUnauthorized{}
}

/*
GetPackagePermissionRuleUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type GetPackagePermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this get package permission rule unauthorized response has a 2xx status code
func (o *GetPackagePermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package permission rule unauthorized response has a 3xx status code
func (o *GetPackagePermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package permission rule unauthorized response has a 4xx status code
func (o *GetPackagePermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get package permission rule unauthorized response has a 5xx status code
func (o *GetPackagePermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get package permission rule unauthorized response a status code equal to that given
func (o *GetPackagePermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get package permission rule unauthorized response
func (o *GetPackagePermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *GetPackagePermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleUnauthorized ", 401)
}

func (o *GetPackagePermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleUnauthorized ", 401)
}

func (o *GetPackagePermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPackagePermissionRuleNotFound creates a GetPackagePermissionRuleNotFound with default headers values
func NewGetPackagePermissionRuleNotFound() *GetPackagePermissionRuleNotFound {
	return &GetPackagePermissionRuleNotFound{}
}

/*
GetPackagePermissionRuleNotFound describes a response with status code 404, with default header values.

Cannot find a package with the specified name, the user does not have 'read' access rights for that package, or the permission rule with the specified ID does not exist
*/
type GetPackagePermissionRuleNotFound struct {
}

// IsSuccess returns true when this get package permission rule not found response has a 2xx status code
func (o *GetPackagePermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get package permission rule not found response has a 3xx status code
func (o *GetPackagePermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get package permission rule not found response has a 4xx status code
func (o *GetPackagePermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get package permission rule not found response has a 5xx status code
func (o *GetPackagePermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get package permission rule not found response a status code equal to that given
func (o *GetPackagePermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get package permission rule not found response
func (o *GetPackagePermissionRuleNotFound) Code() int {
	return 404
}

func (o *GetPackagePermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleNotFound ", 404)
}

func (o *GetPackagePermissionRuleNotFound) String() string {
	return fmt.Sprintf("[GET /packages/{packageName}/permissions/{ruleId}][%d] getPackagePermissionRuleNotFound ", 404)
}

func (o *GetPackagePermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
