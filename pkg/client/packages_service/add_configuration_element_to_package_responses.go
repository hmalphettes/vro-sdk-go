// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AddConfigurationElementToPackageReader is a Reader for the AddConfigurationElementToPackage structure.
type AddConfigurationElementToPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddConfigurationElementToPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddConfigurationElementToPackageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddConfigurationElementToPackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddConfigurationElementToPackageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /packages/{packageName}/configuration/{configurationId}] addConfigurationElementToPackage", response, response.Code())
	}
}

// NewAddConfigurationElementToPackageNoContent creates a AddConfigurationElementToPackageNoContent with default headers values
func NewAddConfigurationElementToPackageNoContent() *AddConfigurationElementToPackageNoContent {
	return &AddConfigurationElementToPackageNoContent{}
}

/*
AddConfigurationElementToPackageNoContent describes a response with status code 204, with default header values.

The request is successful
*/
type AddConfigurationElementToPackageNoContent struct {
}

// IsSuccess returns true when this add configuration element to package no content response has a 2xx status code
func (o *AddConfigurationElementToPackageNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add configuration element to package no content response has a 3xx status code
func (o *AddConfigurationElementToPackageNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add configuration element to package no content response has a 4xx status code
func (o *AddConfigurationElementToPackageNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add configuration element to package no content response has a 5xx status code
func (o *AddConfigurationElementToPackageNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add configuration element to package no content response a status code equal to that given
func (o *AddConfigurationElementToPackageNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the add configuration element to package no content response
func (o *AddConfigurationElementToPackageNoContent) Code() int {
	return 204
}

func (o *AddConfigurationElementToPackageNoContent) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration/{configurationId}][%d] addConfigurationElementToPackageNoContent ", 204)
}

func (o *AddConfigurationElementToPackageNoContent) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration/{configurationId}][%d] addConfigurationElementToPackageNoContent ", 204)
}

func (o *AddConfigurationElementToPackageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddConfigurationElementToPackageUnauthorized creates a AddConfigurationElementToPackageUnauthorized with default headers values
func NewAddConfigurationElementToPackageUnauthorized() *AddConfigurationElementToPackageUnauthorized {
	return &AddConfigurationElementToPackageUnauthorized{}
}

/*
AddConfigurationElementToPackageUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type AddConfigurationElementToPackageUnauthorized struct {
}

// IsSuccess returns true when this add configuration element to package unauthorized response has a 2xx status code
func (o *AddConfigurationElementToPackageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add configuration element to package unauthorized response has a 3xx status code
func (o *AddConfigurationElementToPackageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add configuration element to package unauthorized response has a 4xx status code
func (o *AddConfigurationElementToPackageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add configuration element to package unauthorized response has a 5xx status code
func (o *AddConfigurationElementToPackageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add configuration element to package unauthorized response a status code equal to that given
func (o *AddConfigurationElementToPackageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add configuration element to package unauthorized response
func (o *AddConfigurationElementToPackageUnauthorized) Code() int {
	return 401
}

func (o *AddConfigurationElementToPackageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration/{configurationId}][%d] addConfigurationElementToPackageUnauthorized ", 401)
}

func (o *AddConfigurationElementToPackageUnauthorized) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration/{configurationId}][%d] addConfigurationElementToPackageUnauthorized ", 401)
}

func (o *AddConfigurationElementToPackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddConfigurationElementToPackageNotFound creates a AddConfigurationElementToPackageNotFound with default headers values
func NewAddConfigurationElementToPackageNotFound() *AddConfigurationElementToPackageNotFound {
	return &AddConfigurationElementToPackageNotFound{}
}

/*
AddConfigurationElementToPackageNotFound describes a response with status code 404, with default header values.

Package or configuration element is missing
*/
type AddConfigurationElementToPackageNotFound struct {
}

// IsSuccess returns true when this add configuration element to package not found response has a 2xx status code
func (o *AddConfigurationElementToPackageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add configuration element to package not found response has a 3xx status code
func (o *AddConfigurationElementToPackageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add configuration element to package not found response has a 4xx status code
func (o *AddConfigurationElementToPackageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add configuration element to package not found response has a 5xx status code
func (o *AddConfigurationElementToPackageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add configuration element to package not found response a status code equal to that given
func (o *AddConfigurationElementToPackageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add configuration element to package not found response
func (o *AddConfigurationElementToPackageNotFound) Code() int {
	return 404
}

func (o *AddConfigurationElementToPackageNotFound) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration/{configurationId}][%d] addConfigurationElementToPackageNotFound ", 404)
}

func (o *AddConfigurationElementToPackageNotFound) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration/{configurationId}][%d] addConfigurationElementToPackageNotFound ", 404)
}

func (o *AddConfigurationElementToPackageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
