// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AddRecourceElementToPackageReader is a Reader for the AddRecourceElementToPackage structure.
type AddRecourceElementToPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRecourceElementToPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddRecourceElementToPackageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddRecourceElementToPackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddRecourceElementToPackageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /packages/{packageName}/resource/{resourceId}] addRecourceElementToPackage", response, response.Code())
	}
}

// NewAddRecourceElementToPackageNoContent creates a AddRecourceElementToPackageNoContent with default headers values
func NewAddRecourceElementToPackageNoContent() *AddRecourceElementToPackageNoContent {
	return &AddRecourceElementToPackageNoContent{}
}

/*
AddRecourceElementToPackageNoContent describes a response with status code 204, with default header values.

The request is successful
*/
type AddRecourceElementToPackageNoContent struct {
}

// IsSuccess returns true when this add recource element to package no content response has a 2xx status code
func (o *AddRecourceElementToPackageNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add recource element to package no content response has a 3xx status code
func (o *AddRecourceElementToPackageNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add recource element to package no content response has a 4xx status code
func (o *AddRecourceElementToPackageNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add recource element to package no content response has a 5xx status code
func (o *AddRecourceElementToPackageNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add recource element to package no content response a status code equal to that given
func (o *AddRecourceElementToPackageNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the add recource element to package no content response
func (o *AddRecourceElementToPackageNoContent) Code() int {
	return 204
}

func (o *AddRecourceElementToPackageNoContent) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/resource/{resourceId}][%d] addRecourceElementToPackageNoContent ", 204)
}

func (o *AddRecourceElementToPackageNoContent) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/resource/{resourceId}][%d] addRecourceElementToPackageNoContent ", 204)
}

func (o *AddRecourceElementToPackageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRecourceElementToPackageUnauthorized creates a AddRecourceElementToPackageUnauthorized with default headers values
func NewAddRecourceElementToPackageUnauthorized() *AddRecourceElementToPackageUnauthorized {
	return &AddRecourceElementToPackageUnauthorized{}
}

/*
AddRecourceElementToPackageUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type AddRecourceElementToPackageUnauthorized struct {
}

// IsSuccess returns true when this add recource element to package unauthorized response has a 2xx status code
func (o *AddRecourceElementToPackageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add recource element to package unauthorized response has a 3xx status code
func (o *AddRecourceElementToPackageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add recource element to package unauthorized response has a 4xx status code
func (o *AddRecourceElementToPackageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add recource element to package unauthorized response has a 5xx status code
func (o *AddRecourceElementToPackageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add recource element to package unauthorized response a status code equal to that given
func (o *AddRecourceElementToPackageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add recource element to package unauthorized response
func (o *AddRecourceElementToPackageUnauthorized) Code() int {
	return 401
}

func (o *AddRecourceElementToPackageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/resource/{resourceId}][%d] addRecourceElementToPackageUnauthorized ", 401)
}

func (o *AddRecourceElementToPackageUnauthorized) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/resource/{resourceId}][%d] addRecourceElementToPackageUnauthorized ", 401)
}

func (o *AddRecourceElementToPackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRecourceElementToPackageNotFound creates a AddRecourceElementToPackageNotFound with default headers values
func NewAddRecourceElementToPackageNotFound() *AddRecourceElementToPackageNotFound {
	return &AddRecourceElementToPackageNotFound{}
}

/*
AddRecourceElementToPackageNotFound describes a response with status code 404, with default header values.

Package or workflow is missing
*/
type AddRecourceElementToPackageNotFound struct {
}

// IsSuccess returns true when this add recource element to package not found response has a 2xx status code
func (o *AddRecourceElementToPackageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add recource element to package not found response has a 3xx status code
func (o *AddRecourceElementToPackageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add recource element to package not found response has a 4xx status code
func (o *AddRecourceElementToPackageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add recource element to package not found response has a 5xx status code
func (o *AddRecourceElementToPackageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add recource element to package not found response a status code equal to that given
func (o *AddRecourceElementToPackageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add recource element to package not found response
func (o *AddRecourceElementToPackageNotFound) Code() int {
	return 404
}

func (o *AddRecourceElementToPackageNotFound) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/resource/{resourceId}][%d] addRecourceElementToPackageNotFound ", 404)
}

func (o *AddRecourceElementToPackageNotFound) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/resource/{resourceId}][%d] addRecourceElementToPackageNotFound ", 404)
}

func (o *AddRecourceElementToPackageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
