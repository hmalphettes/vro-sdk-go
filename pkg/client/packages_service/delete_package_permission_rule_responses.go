// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePackagePermissionRuleReader is a Reader for the DeletePackagePermissionRule structure.
type DeletePackagePermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePackagePermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeletePackagePermissionRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePackagePermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePackagePermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /packages/{packageName}/permissions/{ruleId}] deletePackagePermissionRule", response, response.Code())
	}
}

// NewDeletePackagePermissionRuleNoContent creates a DeletePackagePermissionRuleNoContent with default headers values
func NewDeletePackagePermissionRuleNoContent() *DeletePackagePermissionRuleNoContent {
	return &DeletePackagePermissionRuleNoContent{}
}

/*
DeletePackagePermissionRuleNoContent describes a response with status code 204, with default header values.

No content
*/
type DeletePackagePermissionRuleNoContent struct {
}

// IsSuccess returns true when this delete package permission rule no content response has a 2xx status code
func (o *DeletePackagePermissionRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete package permission rule no content response has a 3xx status code
func (o *DeletePackagePermissionRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete package permission rule no content response has a 4xx status code
func (o *DeletePackagePermissionRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete package permission rule no content response has a 5xx status code
func (o *DeletePackagePermissionRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete package permission rule no content response a status code equal to that given
func (o *DeletePackagePermissionRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete package permission rule no content response
func (o *DeletePackagePermissionRuleNoContent) Code() int {
	return 204
}

func (o *DeletePackagePermissionRuleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /packages/{packageName}/permissions/{ruleId}][%d] deletePackagePermissionRuleNoContent ", 204)
}

func (o *DeletePackagePermissionRuleNoContent) String() string {
	return fmt.Sprintf("[DELETE /packages/{packageName}/permissions/{ruleId}][%d] deletePackagePermissionRuleNoContent ", 204)
}

func (o *DeletePackagePermissionRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePackagePermissionRuleUnauthorized creates a DeletePackagePermissionRuleUnauthorized with default headers values
func NewDeletePackagePermissionRuleUnauthorized() *DeletePackagePermissionRuleUnauthorized {
	return &DeletePackagePermissionRuleUnauthorized{}
}

/*
DeletePackagePermissionRuleUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type DeletePackagePermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this delete package permission rule unauthorized response has a 2xx status code
func (o *DeletePackagePermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete package permission rule unauthorized response has a 3xx status code
func (o *DeletePackagePermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete package permission rule unauthorized response has a 4xx status code
func (o *DeletePackagePermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete package permission rule unauthorized response has a 5xx status code
func (o *DeletePackagePermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete package permission rule unauthorized response a status code equal to that given
func (o *DeletePackagePermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete package permission rule unauthorized response
func (o *DeletePackagePermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *DeletePackagePermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /packages/{packageName}/permissions/{ruleId}][%d] deletePackagePermissionRuleUnauthorized ", 401)
}

func (o *DeletePackagePermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /packages/{packageName}/permissions/{ruleId}][%d] deletePackagePermissionRuleUnauthorized ", 401)
}

func (o *DeletePackagePermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePackagePermissionRuleNotFound creates a DeletePackagePermissionRuleNotFound with default headers values
func NewDeletePackagePermissionRuleNotFound() *DeletePackagePermissionRuleNotFound {
	return &DeletePackagePermissionRuleNotFound{}
}

/*
DeletePackagePermissionRuleNotFound describes a response with status code 404, with default header values.

Cannot find a package with the specified name, the user does not have 'admin' access rights for that package, or the permission rule with the specified ID does not exist
*/
type DeletePackagePermissionRuleNotFound struct {
}

// IsSuccess returns true when this delete package permission rule not found response has a 2xx status code
func (o *DeletePackagePermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete package permission rule not found response has a 3xx status code
func (o *DeletePackagePermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete package permission rule not found response has a 4xx status code
func (o *DeletePackagePermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete package permission rule not found response has a 5xx status code
func (o *DeletePackagePermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete package permission rule not found response a status code equal to that given
func (o *DeletePackagePermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete package permission rule not found response
func (o *DeletePackagePermissionRuleNotFound) Code() int {
	return 404
}

func (o *DeletePackagePermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /packages/{packageName}/permissions/{ruleId}][%d] deletePackagePermissionRuleNotFound ", 404)
}

func (o *DeletePackagePermissionRuleNotFound) String() string {
	return fmt.Sprintf("[DELETE /packages/{packageName}/permissions/{ruleId}][%d] deletePackagePermissionRuleNotFound ", 404)
}

func (o *DeletePackagePermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
