// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// AddConfigurationElementCategoryToPackageReader is a Reader for the AddConfigurationElementCategoryToPackage structure.
type AddConfigurationElementCategoryToPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddConfigurationElementCategoryToPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddConfigurationElementCategoryToPackageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddConfigurationElementCategoryToPackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddConfigurationElementCategoryToPackageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /packages/{packageName}/configuration_category/{configurationCategoryName}] addConfigurationElementCategoryToPackage", response, response.Code())
	}
}

// NewAddConfigurationElementCategoryToPackageNoContent creates a AddConfigurationElementCategoryToPackageNoContent with default headers values
func NewAddConfigurationElementCategoryToPackageNoContent() *AddConfigurationElementCategoryToPackageNoContent {
	return &AddConfigurationElementCategoryToPackageNoContent{}
}

/*
AddConfigurationElementCategoryToPackageNoContent describes a response with status code 204, with default header values.

The request is successful
*/
type AddConfigurationElementCategoryToPackageNoContent struct {
}

// IsSuccess returns true when this add configuration element category to package no content response has a 2xx status code
func (o *AddConfigurationElementCategoryToPackageNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add configuration element category to package no content response has a 3xx status code
func (o *AddConfigurationElementCategoryToPackageNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add configuration element category to package no content response has a 4xx status code
func (o *AddConfigurationElementCategoryToPackageNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add configuration element category to package no content response has a 5xx status code
func (o *AddConfigurationElementCategoryToPackageNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add configuration element category to package no content response a status code equal to that given
func (o *AddConfigurationElementCategoryToPackageNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the add configuration element category to package no content response
func (o *AddConfigurationElementCategoryToPackageNoContent) Code() int {
	return 204
}

func (o *AddConfigurationElementCategoryToPackageNoContent) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration_category/{configurationCategoryName}][%d] addConfigurationElementCategoryToPackageNoContent ", 204)
}

func (o *AddConfigurationElementCategoryToPackageNoContent) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration_category/{configurationCategoryName}][%d] addConfigurationElementCategoryToPackageNoContent ", 204)
}

func (o *AddConfigurationElementCategoryToPackageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddConfigurationElementCategoryToPackageUnauthorized creates a AddConfigurationElementCategoryToPackageUnauthorized with default headers values
func NewAddConfigurationElementCategoryToPackageUnauthorized() *AddConfigurationElementCategoryToPackageUnauthorized {
	return &AddConfigurationElementCategoryToPackageUnauthorized{}
}

/*
AddConfigurationElementCategoryToPackageUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type AddConfigurationElementCategoryToPackageUnauthorized struct {
}

// IsSuccess returns true when this add configuration element category to package unauthorized response has a 2xx status code
func (o *AddConfigurationElementCategoryToPackageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add configuration element category to package unauthorized response has a 3xx status code
func (o *AddConfigurationElementCategoryToPackageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add configuration element category to package unauthorized response has a 4xx status code
func (o *AddConfigurationElementCategoryToPackageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add configuration element category to package unauthorized response has a 5xx status code
func (o *AddConfigurationElementCategoryToPackageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add configuration element category to package unauthorized response a status code equal to that given
func (o *AddConfigurationElementCategoryToPackageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add configuration element category to package unauthorized response
func (o *AddConfigurationElementCategoryToPackageUnauthorized) Code() int {
	return 401
}

func (o *AddConfigurationElementCategoryToPackageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration_category/{configurationCategoryName}][%d] addConfigurationElementCategoryToPackageUnauthorized ", 401)
}

func (o *AddConfigurationElementCategoryToPackageUnauthorized) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration_category/{configurationCategoryName}][%d] addConfigurationElementCategoryToPackageUnauthorized ", 401)
}

func (o *AddConfigurationElementCategoryToPackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddConfigurationElementCategoryToPackageNotFound creates a AddConfigurationElementCategoryToPackageNotFound with default headers values
func NewAddConfigurationElementCategoryToPackageNotFound() *AddConfigurationElementCategoryToPackageNotFound {
	return &AddConfigurationElementCategoryToPackageNotFound{}
}

/*
AddConfigurationElementCategoryToPackageNotFound describes a response with status code 404, with default header values.

Package or configuration category is missing
*/
type AddConfigurationElementCategoryToPackageNotFound struct {
}

// IsSuccess returns true when this add configuration element category to package not found response has a 2xx status code
func (o *AddConfigurationElementCategoryToPackageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add configuration element category to package not found response has a 3xx status code
func (o *AddConfigurationElementCategoryToPackageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add configuration element category to package not found response has a 4xx status code
func (o *AddConfigurationElementCategoryToPackageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add configuration element category to package not found response has a 5xx status code
func (o *AddConfigurationElementCategoryToPackageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add configuration element category to package not found response a status code equal to that given
func (o *AddConfigurationElementCategoryToPackageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add configuration element category to package not found response
func (o *AddConfigurationElementCategoryToPackageNotFound) Code() int {
	return 404
}

func (o *AddConfigurationElementCategoryToPackageNotFound) Error() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration_category/{configurationCategoryName}][%d] addConfigurationElementCategoryToPackageNotFound ", 404)
}

func (o *AddConfigurationElementCategoryToPackageNotFound) String() string {
	return fmt.Sprintf("[POST /packages/{packageName}/configuration_category/{configurationCategoryName}][%d] addConfigurationElementCategoryToPackageNotFound ", 404)
}

func (o *AddConfigurationElementCategoryToPackageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
