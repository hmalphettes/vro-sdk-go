// Code generated by go-swagger; DO NOT EDIT.

package packages_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdatePackagePermissionRuleReader is a Reader for the UpdatePackagePermissionRule structure.
type UpdatePackagePermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePackagePermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdatePackagePermissionRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePackagePermissionRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdatePackagePermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePackagePermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /packages/{packageName}/permissions/{ruleId}] updatePackagePermissionRule", response, response.Code())
	}
}

// NewUpdatePackagePermissionRuleNoContent creates a UpdatePackagePermissionRuleNoContent with default headers values
func NewUpdatePackagePermissionRuleNoContent() *UpdatePackagePermissionRuleNoContent {
	return &UpdatePackagePermissionRuleNoContent{}
}

/*
UpdatePackagePermissionRuleNoContent describes a response with status code 204, with default header values.

No content
*/
type UpdatePackagePermissionRuleNoContent struct {
}

// IsSuccess returns true when this update package permission rule no content response has a 2xx status code
func (o *UpdatePackagePermissionRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update package permission rule no content response has a 3xx status code
func (o *UpdatePackagePermissionRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update package permission rule no content response has a 4xx status code
func (o *UpdatePackagePermissionRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update package permission rule no content response has a 5xx status code
func (o *UpdatePackagePermissionRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update package permission rule no content response a status code equal to that given
func (o *UpdatePackagePermissionRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update package permission rule no content response
func (o *UpdatePackagePermissionRuleNoContent) Code() int {
	return 204
}

func (o *UpdatePackagePermissionRuleNoContent) Error() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleNoContent ", 204)
}

func (o *UpdatePackagePermissionRuleNoContent) String() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleNoContent ", 204)
}

func (o *UpdatePackagePermissionRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePackagePermissionRuleBadRequest creates a UpdatePackagePermissionRuleBadRequest with default headers values
func NewUpdatePackagePermissionRuleBadRequest() *UpdatePackagePermissionRuleBadRequest {
	return &UpdatePackagePermissionRuleBadRequest{}
}

/*
UpdatePackagePermissionRuleBadRequest describes a response with status code 400, with default header values.

Request is not valid (validation error)
*/
type UpdatePackagePermissionRuleBadRequest struct {
}

// IsSuccess returns true when this update package permission rule bad request response has a 2xx status code
func (o *UpdatePackagePermissionRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update package permission rule bad request response has a 3xx status code
func (o *UpdatePackagePermissionRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update package permission rule bad request response has a 4xx status code
func (o *UpdatePackagePermissionRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update package permission rule bad request response has a 5xx status code
func (o *UpdatePackagePermissionRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update package permission rule bad request response a status code equal to that given
func (o *UpdatePackagePermissionRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update package permission rule bad request response
func (o *UpdatePackagePermissionRuleBadRequest) Code() int {
	return 400
}

func (o *UpdatePackagePermissionRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleBadRequest ", 400)
}

func (o *UpdatePackagePermissionRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleBadRequest ", 400)
}

func (o *UpdatePackagePermissionRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePackagePermissionRuleUnauthorized creates a UpdatePackagePermissionRuleUnauthorized with default headers values
func NewUpdatePackagePermissionRuleUnauthorized() *UpdatePackagePermissionRuleUnauthorized {
	return &UpdatePackagePermissionRuleUnauthorized{}
}

/*
UpdatePackagePermissionRuleUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type UpdatePackagePermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this update package permission rule unauthorized response has a 2xx status code
func (o *UpdatePackagePermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update package permission rule unauthorized response has a 3xx status code
func (o *UpdatePackagePermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update package permission rule unauthorized response has a 4xx status code
func (o *UpdatePackagePermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update package permission rule unauthorized response has a 5xx status code
func (o *UpdatePackagePermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update package permission rule unauthorized response a status code equal to that given
func (o *UpdatePackagePermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update package permission rule unauthorized response
func (o *UpdatePackagePermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *UpdatePackagePermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleUnauthorized ", 401)
}

func (o *UpdatePackagePermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleUnauthorized ", 401)
}

func (o *UpdatePackagePermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePackagePermissionRuleNotFound creates a UpdatePackagePermissionRuleNotFound with default headers values
func NewUpdatePackagePermissionRuleNotFound() *UpdatePackagePermissionRuleNotFound {
	return &UpdatePackagePermissionRuleNotFound{}
}

/*
UpdatePackagePermissionRuleNotFound describes a response with status code 404, with default header values.

Cannot find a package with the specified name, the user does not have 'admin' access rights for that package, or the permission rule with the specified ID does not exist
*/
type UpdatePackagePermissionRuleNotFound struct {
}

// IsSuccess returns true when this update package permission rule not found response has a 2xx status code
func (o *UpdatePackagePermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update package permission rule not found response has a 3xx status code
func (o *UpdatePackagePermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update package permission rule not found response has a 4xx status code
func (o *UpdatePackagePermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update package permission rule not found response has a 5xx status code
func (o *UpdatePackagePermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update package permission rule not found response a status code equal to that given
func (o *UpdatePackagePermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update package permission rule not found response
func (o *UpdatePackagePermissionRuleNotFound) Code() int {
	return 404
}

func (o *UpdatePackagePermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleNotFound ", 404)
}

func (o *UpdatePackagePermissionRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /packages/{packageName}/permissions/{ruleId}][%d] updatePackagePermissionRuleNotFound ", 404)
}

func (o *UpdatePackagePermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
