// Code generated by go-swagger; DO NOT EDIT.

package tagging_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tagging service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tagging service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetTagsByTagNameAndOwner(params *GetTagsByTagNameAndOwnerParams, opts ...ClientOption) (*GetTagsByTagNameAndOwnerOK, error)

	ListAllTags(params *ListAllTagsParams, opts ...ClientOption) (*ListAllTagsOK, error)

	ListTagOwners(params *ListTagOwnersParams, opts ...ClientOption) (*ListTagOwnersOK, error)

	ListTagsByOwner(params *ListTagsByOwnerParams, opts ...ClientOption) (*ListTagsByOwnerOK, error)

	UntagObjectsByTagNameAndOwner(params *UntagObjectsByTagNameAndOwnerParams, opts ...ClientOption) (*UntagObjectsByTagNameAndOwnerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetTagsByTagNameAndOwner gets tags by tag name and owner

Retrieves list of tag instance created by specific user. Retrieved information is composed of reference to tagged object, tag name, tag value and is this instance global or private.
*/
func (a *Client) GetTagsByTagNameAndOwner(params *GetTagsByTagNameAndOwnerParams, opts ...ClientOption) (*GetTagsByTagNameAndOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagsByTagNameAndOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagsByTagNameAndOwner",
		Method:             "GET",
		PathPattern:        "/tags/{owner}/{tagName}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTagsByTagNameAndOwnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagsByTagNameAndOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagsByTagNameAndOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAllTags lists global and self tags

Retrieves list of tag created by current and __GLOBAL__ users.
*/
func (a *Client) ListAllTags(params *ListAllTagsParams, opts ...ClientOption) (*ListAllTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAllTags",
		Method:             "GET",
		PathPattern:        "/tags/all",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAllTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTagOwners lists tag owners

Returned list contains users created at least one tag. Global tags are listed under system user __GLOBAL__.
*/
func (a *Client) ListTagOwners(params *ListTagOwnersParams, opts ...ClientOption) (*ListTagOwnersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTagOwnersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTagOwners",
		Method:             "GET",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTagOwnersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTagOwnersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTagOwners: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTagsByOwner lists tags by owner

Retrieves list of tag created by specific user. Global tags are listed under system user __GLOBAL__.
*/
func (a *Client) ListTagsByOwner(params *ListTagsByOwnerParams, opts ...ClientOption) (*ListTagsByOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTagsByOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTagsByOwner",
		Method:             "GET",
		PathPattern:        "/tags/{owner}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTagsByOwnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTagsByOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTagsByOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UntagObjectsByTagNameAndOwner untags object

Removes all tags created by specified owner.
*/
func (a *Client) UntagObjectsByTagNameAndOwner(params *UntagObjectsByTagNameAndOwnerParams, opts ...ClientOption) (*UntagObjectsByTagNameAndOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUntagObjectsByTagNameAndOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "untagObjectsByTagNameAndOwner",
		Method:             "DELETE",
		PathPattern:        "/tags/{owner}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UntagObjectsByTagNameAndOwnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UntagObjectsByTagNameAndOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for untagObjectsByTagNameAndOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
