// Code generated by go-swagger; DO NOT EDIT.

package tagging_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UntagObjectsByTagNameAndOwnerReader is a Reader for the UntagObjectsByTagNameAndOwner structure.
type UntagObjectsByTagNameAndOwnerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UntagObjectsByTagNameAndOwnerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUntagObjectsByTagNameAndOwnerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUntagObjectsByTagNameAndOwnerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tags/{owner}] untagObjectsByTagNameAndOwner", response, response.Code())
	}
}

// NewUntagObjectsByTagNameAndOwnerOK creates a UntagObjectsByTagNameAndOwnerOK with default headers values
func NewUntagObjectsByTagNameAndOwnerOK() *UntagObjectsByTagNameAndOwnerOK {
	return &UntagObjectsByTagNameAndOwnerOK{}
}

/*
UntagObjectsByTagNameAndOwnerOK describes a response with status code 200, with default header values.

The request is successful
*/
type UntagObjectsByTagNameAndOwnerOK struct {
}

// IsSuccess returns true when this untag objects by tag name and owner o k response has a 2xx status code
func (o *UntagObjectsByTagNameAndOwnerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this untag objects by tag name and owner o k response has a 3xx status code
func (o *UntagObjectsByTagNameAndOwnerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this untag objects by tag name and owner o k response has a 4xx status code
func (o *UntagObjectsByTagNameAndOwnerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this untag objects by tag name and owner o k response has a 5xx status code
func (o *UntagObjectsByTagNameAndOwnerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this untag objects by tag name and owner o k response a status code equal to that given
func (o *UntagObjectsByTagNameAndOwnerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the untag objects by tag name and owner o k response
func (o *UntagObjectsByTagNameAndOwnerOK) Code() int {
	return 200
}

func (o *UntagObjectsByTagNameAndOwnerOK) Error() string {
	return fmt.Sprintf("[DELETE /tags/{owner}][%d] untagObjectsByTagNameAndOwnerOK ", 200)
}

func (o *UntagObjectsByTagNameAndOwnerOK) String() string {
	return fmt.Sprintf("[DELETE /tags/{owner}][%d] untagObjectsByTagNameAndOwnerOK ", 200)
}

func (o *UntagObjectsByTagNameAndOwnerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUntagObjectsByTagNameAndOwnerUnauthorized creates a UntagObjectsByTagNameAndOwnerUnauthorized with default headers values
func NewUntagObjectsByTagNameAndOwnerUnauthorized() *UntagObjectsByTagNameAndOwnerUnauthorized {
	return &UntagObjectsByTagNameAndOwnerUnauthorized{}
}

/*
UntagObjectsByTagNameAndOwnerUnauthorized describes a response with status code 401, with default header values.

Only admin users can delete tags owned by a different user
*/
type UntagObjectsByTagNameAndOwnerUnauthorized struct {
}

// IsSuccess returns true when this untag objects by tag name and owner unauthorized response has a 2xx status code
func (o *UntagObjectsByTagNameAndOwnerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this untag objects by tag name and owner unauthorized response has a 3xx status code
func (o *UntagObjectsByTagNameAndOwnerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this untag objects by tag name and owner unauthorized response has a 4xx status code
func (o *UntagObjectsByTagNameAndOwnerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this untag objects by tag name and owner unauthorized response has a 5xx status code
func (o *UntagObjectsByTagNameAndOwnerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this untag objects by tag name and owner unauthorized response a status code equal to that given
func (o *UntagObjectsByTagNameAndOwnerUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the untag objects by tag name and owner unauthorized response
func (o *UntagObjectsByTagNameAndOwnerUnauthorized) Code() int {
	return 401
}

func (o *UntagObjectsByTagNameAndOwnerUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /tags/{owner}][%d] untagObjectsByTagNameAndOwnerUnauthorized ", 401)
}

func (o *UntagObjectsByTagNameAndOwnerUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /tags/{owner}][%d] untagObjectsByTagNameAndOwnerUnauthorized ", 401)
}

func (o *UntagObjectsByTagNameAndOwnerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
