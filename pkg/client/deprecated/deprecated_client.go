// Code generated by go-swagger; DO NOT EDIT.

package deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new deprecated API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for deprecated API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DisablePlugin(params *DisablePluginParams, opts ...ClientOption) (*DisablePluginNoContent, error)

	ExportPlugin(params *ExportPluginParams, opts ...ClientOption) (*ExportPluginOK, error)

	ImportPlugin(params *ImportPluginParams, opts ...ClientOption) (*ImportPluginNoContent, error)

	InstallPluginDynamically(params *InstallPluginDynamicallyParams, opts ...ClientOption) (*InstallPluginDynamicallyNoContent, error)

	ListAllPlugins(params *ListAllPluginsParams, opts ...ClientOption) (*ListAllPluginsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	DisablePlugin enables disable plugin

	Enables/disables plug-in.<p>In a clustered setup this may not function properly. Use the ControlCenter's API instead -

https://localhost:8283/vco-controlcenter/docs/#/plugin-controller.</p>
*/
func (a *Client) DisablePlugin(params *DisablePluginParams, opts ...ClientOption) (*DisablePluginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisablePluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "disablePlugin",
		Method:             "PUT",
		PathPattern:        "/plugins/{pluginName}/state",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisablePluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisablePluginNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for disablePlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportPlugin exports plugin

Exports a plug-in by name. If the request is successful, the plug-in binary content is available as an attachment with MIME type application/zip (that is, a normal ZIP file). It is up to the client application to properly fetch and process this attachment, for example by saving it to local file system. The exported plug-in has the same format as that needed by the configurator when uploading a plug-in.<p>In a clustered setup this may not function properly. Use the ControlCenter's API instead - https://localhost:8283/vco-controlcenter/docs/#/plugin-controller</p>
*/
func (a *Client) ExportPlugin(params *ExportPluginParams, opts ...ClientOption) (*ExportPluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportPlugin",
		Method:             "GET",
		PathPattern:        "/plugins/{pluginName}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportPluginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ImportPlugin imports plugin

	Imports a plug-in. If a plug-in with the same name is already installed, the import will fail unless the overwrite parameter is set to true. The plug-in binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = "https://localhost:8281/vco/api/plugins/";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource("D:/path/to/plugin.dar");<br />parts.put("file", Arrays.asList(r));<br />parts.put("categoryId", "");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre><p>In a clustered setup this may not function properly. Use the ControlCenter's API instead -

https://localhost:8283/vco-controlcenter/docs/#/plugin-controller.</p>
*/
func (a *Client) ImportPlugin(params *ImportPluginParams, opts ...ClientOption) (*ImportPluginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportPluginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importPlugin",
		Method:             "POST",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportPluginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportPluginNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importPlugin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	InstallPluginDynamically installs plugin dynamically

	Imports a plug-in. If a plug-in with the same name is already installed, the import will fail unless the overwrite parameter is set to true. The plug-in binary content must be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = "https://localhost:8281/vco/api/plugins/";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource("D:/path/to/plugin.dar");<br />parts.put("file", Arrays.asList(r));<br />parts.put("categoryId", "");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre><p>In a clustered setup this may not function properly. Use the ControlCenter's API instead -

https://localhost:8283/vco-controlcenter/docs/#/plugin-controller.</p>
*/
func (a *Client) InstallPluginDynamically(params *InstallPluginDynamicallyParams, opts ...ClientOption) (*InstallPluginDynamicallyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallPluginDynamicallyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "installPluginDynamically",
		Method:             "POST",
		PathPattern:        "/plugins/installPluginDynamically",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstallPluginDynamicallyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallPluginDynamicallyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for installPluginDynamically: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListAllPlugins lists all plugins

	Returns metadata information for all installed plug-ins.<p>In a clustered setup this may not function properly. Use the ControlCenter's API instead -

https://localhost:8283/vco-controlcenter/docs/#/plugin-controller</p>
*/
func (a *Client) ListAllPlugins(params *ListAllPluginsParams, opts ...ClientOption) (*ListAllPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllPluginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAllPlugins",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAllPluginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllPluginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllPlugins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
