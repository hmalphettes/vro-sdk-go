// Code generated by go-swagger; DO NOT EDIT.

package deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImportPluginParams creates a new ImportPluginParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewImportPluginParams() *ImportPluginParams {
	return &ImportPluginParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewImportPluginParamsWithTimeout creates a new ImportPluginParams object
// with the ability to set a timeout on a request.
func NewImportPluginParamsWithTimeout(timeout time.Duration) *ImportPluginParams {
	return &ImportPluginParams{
		timeout: timeout,
	}
}

// NewImportPluginParamsWithContext creates a new ImportPluginParams object
// with the ability to set a context for a request.
func NewImportPluginParamsWithContext(ctx context.Context) *ImportPluginParams {
	return &ImportPluginParams{
		Context: ctx,
	}
}

// NewImportPluginParamsWithHTTPClient creates a new ImportPluginParams object
// with the ability to set a custom HTTPClient for a request.
func NewImportPluginParamsWithHTTPClient(client *http.Client) *ImportPluginParams {
	return &ImportPluginParams{
		HTTPClient: client,
	}
}

/*
ImportPluginParams contains all the parameters to send to the API endpoint

	for the import plugin operation.

	Typically these are written to a http.Request.
*/
type ImportPluginParams struct {

	// File.
	File runtime.NamedReadCloser

	// Format.
	//
	// Default: "dar"
	Format string

	// Overwrite.
	Overwrite bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the import plugin params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportPluginParams) WithDefaults() *ImportPluginParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the import plugin params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportPluginParams) SetDefaults() {
	var (
		formatDefault = string("dar")

		overwriteDefault = bool(false)
	)

	val := ImportPluginParams{
		Format:    formatDefault,
		Overwrite: overwriteDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the import plugin params
func (o *ImportPluginParams) WithTimeout(timeout time.Duration) *ImportPluginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import plugin params
func (o *ImportPluginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import plugin params
func (o *ImportPluginParams) WithContext(ctx context.Context) *ImportPluginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import plugin params
func (o *ImportPluginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import plugin params
func (o *ImportPluginParams) WithHTTPClient(client *http.Client) *ImportPluginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import plugin params
func (o *ImportPluginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the import plugin params
func (o *ImportPluginParams) WithFile(file runtime.NamedReadCloser) *ImportPluginParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the import plugin params
func (o *ImportPluginParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithFormat adds the format to the import plugin params
func (o *ImportPluginParams) WithFormat(format string) *ImportPluginParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the import plugin params
func (o *ImportPluginParams) SetFormat(format string) {
	o.Format = format
}

// WithOverwrite adds the overwrite to the import plugin params
func (o *ImportPluginParams) WithOverwrite(overwrite bool) *ImportPluginParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the import plugin params
func (o *ImportPluginParams) SetOverwrite(overwrite bool) {
	o.Overwrite = overwrite
}

// WriteToRequest writes these params to a swagger request
func (o *ImportPluginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// query param format
	qrFormat := o.Format
	qFormat := qrFormat
	if qFormat != "" {

		if err := r.SetQueryParam("format", qFormat); err != nil {
			return err
		}
	}

	// query param overwrite
	qrOverwrite := o.Overwrite
	qOverwrite := swag.FormatBool(qrOverwrite)
	if qOverwrite != "" {

		if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
