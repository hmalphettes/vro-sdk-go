// Code generated by go-swagger; DO NOT EDIT.

package deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// InstallPluginDynamicallyReader is a Reader for the InstallPluginDynamically structure.
type InstallPluginDynamicallyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstallPluginDynamicallyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewInstallPluginDynamicallyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInstallPluginDynamicallyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInstallPluginDynamicallyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInstallPluginDynamicallyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewInstallPluginDynamicallyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /plugins/installPluginDynamically] installPluginDynamically", response, response.Code())
	}
}

// NewInstallPluginDynamicallyNoContent creates a InstallPluginDynamicallyNoContent with default headers values
func NewInstallPluginDynamicallyNoContent() *InstallPluginDynamicallyNoContent {
	return &InstallPluginDynamicallyNoContent{}
}

/*
InstallPluginDynamicallyNoContent describes a response with status code 204, with default header values.

No content
*/
type InstallPluginDynamicallyNoContent struct {
}

// IsSuccess returns true when this install plugin dynamically no content response has a 2xx status code
func (o *InstallPluginDynamicallyNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this install plugin dynamically no content response has a 3xx status code
func (o *InstallPluginDynamicallyNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install plugin dynamically no content response has a 4xx status code
func (o *InstallPluginDynamicallyNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this install plugin dynamically no content response has a 5xx status code
func (o *InstallPluginDynamicallyNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this install plugin dynamically no content response a status code equal to that given
func (o *InstallPluginDynamicallyNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the install plugin dynamically no content response
func (o *InstallPluginDynamicallyNoContent) Code() int {
	return 204
}

func (o *InstallPluginDynamicallyNoContent) Error() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyNoContent ", 204)
}

func (o *InstallPluginDynamicallyNoContent) String() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyNoContent ", 204)
}

func (o *InstallPluginDynamicallyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstallPluginDynamicallyBadRequest creates a InstallPluginDynamicallyBadRequest with default headers values
func NewInstallPluginDynamicallyBadRequest() *InstallPluginDynamicallyBadRequest {
	return &InstallPluginDynamicallyBadRequest{}
}

/*
InstallPluginDynamicallyBadRequest describes a response with status code 400, with default header values.

Request is not valid (validation error)
*/
type InstallPluginDynamicallyBadRequest struct {
}

// IsSuccess returns true when this install plugin dynamically bad request response has a 2xx status code
func (o *InstallPluginDynamicallyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this install plugin dynamically bad request response has a 3xx status code
func (o *InstallPluginDynamicallyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install plugin dynamically bad request response has a 4xx status code
func (o *InstallPluginDynamicallyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this install plugin dynamically bad request response has a 5xx status code
func (o *InstallPluginDynamicallyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this install plugin dynamically bad request response a status code equal to that given
func (o *InstallPluginDynamicallyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the install plugin dynamically bad request response
func (o *InstallPluginDynamicallyBadRequest) Code() int {
	return 400
}

func (o *InstallPluginDynamicallyBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyBadRequest ", 400)
}

func (o *InstallPluginDynamicallyBadRequest) String() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyBadRequest ", 400)
}

func (o *InstallPluginDynamicallyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstallPluginDynamicallyUnauthorized creates a InstallPluginDynamicallyUnauthorized with default headers values
func NewInstallPluginDynamicallyUnauthorized() *InstallPluginDynamicallyUnauthorized {
	return &InstallPluginDynamicallyUnauthorized{}
}

/*
InstallPluginDynamicallyUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type InstallPluginDynamicallyUnauthorized struct {
}

// IsSuccess returns true when this install plugin dynamically unauthorized response has a 2xx status code
func (o *InstallPluginDynamicallyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this install plugin dynamically unauthorized response has a 3xx status code
func (o *InstallPluginDynamicallyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install plugin dynamically unauthorized response has a 4xx status code
func (o *InstallPluginDynamicallyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this install plugin dynamically unauthorized response has a 5xx status code
func (o *InstallPluginDynamicallyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this install plugin dynamically unauthorized response a status code equal to that given
func (o *InstallPluginDynamicallyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the install plugin dynamically unauthorized response
func (o *InstallPluginDynamicallyUnauthorized) Code() int {
	return 401
}

func (o *InstallPluginDynamicallyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyUnauthorized ", 401)
}

func (o *InstallPluginDynamicallyUnauthorized) String() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyUnauthorized ", 401)
}

func (o *InstallPluginDynamicallyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstallPluginDynamicallyForbidden creates a InstallPluginDynamicallyForbidden with default headers values
func NewInstallPluginDynamicallyForbidden() *InstallPluginDynamicallyForbidden {
	return &InstallPluginDynamicallyForbidden{}
}

/*
InstallPluginDynamicallyForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type InstallPluginDynamicallyForbidden struct {
}

// IsSuccess returns true when this install plugin dynamically forbidden response has a 2xx status code
func (o *InstallPluginDynamicallyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this install plugin dynamically forbidden response has a 3xx status code
func (o *InstallPluginDynamicallyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install plugin dynamically forbidden response has a 4xx status code
func (o *InstallPluginDynamicallyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this install plugin dynamically forbidden response has a 5xx status code
func (o *InstallPluginDynamicallyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this install plugin dynamically forbidden response a status code equal to that given
func (o *InstallPluginDynamicallyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the install plugin dynamically forbidden response
func (o *InstallPluginDynamicallyForbidden) Code() int {
	return 403
}

func (o *InstallPluginDynamicallyForbidden) Error() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyForbidden ", 403)
}

func (o *InstallPluginDynamicallyForbidden) String() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyForbidden ", 403)
}

func (o *InstallPluginDynamicallyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstallPluginDynamicallyConflict creates a InstallPluginDynamicallyConflict with default headers values
func NewInstallPluginDynamicallyConflict() *InstallPluginDynamicallyConflict {
	return &InstallPluginDynamicallyConflict{}
}

/*
InstallPluginDynamicallyConflict describes a response with status code 409, with default header values.

Plug-in already exists
*/
type InstallPluginDynamicallyConflict struct {
}

// IsSuccess returns true when this install plugin dynamically conflict response has a 2xx status code
func (o *InstallPluginDynamicallyConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this install plugin dynamically conflict response has a 3xx status code
func (o *InstallPluginDynamicallyConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this install plugin dynamically conflict response has a 4xx status code
func (o *InstallPluginDynamicallyConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this install plugin dynamically conflict response has a 5xx status code
func (o *InstallPluginDynamicallyConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this install plugin dynamically conflict response a status code equal to that given
func (o *InstallPluginDynamicallyConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the install plugin dynamically conflict response
func (o *InstallPluginDynamicallyConflict) Code() int {
	return 409
}

func (o *InstallPluginDynamicallyConflict) Error() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyConflict ", 409)
}

func (o *InstallPluginDynamicallyConflict) String() string {
	return fmt.Sprintf("[POST /plugins/installPluginDynamically][%d] installPluginDynamicallyConflict ", 409)
}

func (o *InstallPluginDynamicallyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
