// Code generated by go-swagger; DO NOT EDIT.

package deprecated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ExportPluginReader is a Reader for the ExportPlugin structure.
type ExportPluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportPluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportPluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportPluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExportPluginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /plugins/{pluginName}] exportPlugin", response, response.Code())
	}
}

// NewExportPluginOK creates a ExportPluginOK with default headers values
func NewExportPluginOK() *ExportPluginOK {
	return &ExportPluginOK{}
}

/*
ExportPluginOK describes a response with status code 200, with default header values.

The request is successful
*/
type ExportPluginOK struct {
}

// IsSuccess returns true when this export plugin o k response has a 2xx status code
func (o *ExportPluginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this export plugin o k response has a 3xx status code
func (o *ExportPluginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export plugin o k response has a 4xx status code
func (o *ExportPluginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this export plugin o k response has a 5xx status code
func (o *ExportPluginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this export plugin o k response a status code equal to that given
func (o *ExportPluginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the export plugin o k response
func (o *ExportPluginOK) Code() int {
	return 200
}

func (o *ExportPluginOK) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginName}][%d] exportPluginOK ", 200)
}

func (o *ExportPluginOK) String() string {
	return fmt.Sprintf("[GET /plugins/{pluginName}][%d] exportPluginOK ", 200)
}

func (o *ExportPluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportPluginUnauthorized creates a ExportPluginUnauthorized with default headers values
func NewExportPluginUnauthorized() *ExportPluginUnauthorized {
	return &ExportPluginUnauthorized{}
}

/*
ExportPluginUnauthorized describes a response with status code 401, with default header values.

User is not authenticated
*/
type ExportPluginUnauthorized struct {
}

// IsSuccess returns true when this export plugin unauthorized response has a 2xx status code
func (o *ExportPluginUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export plugin unauthorized response has a 3xx status code
func (o *ExportPluginUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export plugin unauthorized response has a 4xx status code
func (o *ExportPluginUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this export plugin unauthorized response has a 5xx status code
func (o *ExportPluginUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this export plugin unauthorized response a status code equal to that given
func (o *ExportPluginUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the export plugin unauthorized response
func (o *ExportPluginUnauthorized) Code() int {
	return 401
}

func (o *ExportPluginUnauthorized) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginName}][%d] exportPluginUnauthorized ", 401)
}

func (o *ExportPluginUnauthorized) String() string {
	return fmt.Sprintf("[GET /plugins/{pluginName}][%d] exportPluginUnauthorized ", 401)
}

func (o *ExportPluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportPluginForbidden creates a ExportPluginForbidden with default headers values
func NewExportPluginForbidden() *ExportPluginForbidden {
	return &ExportPluginForbidden{}
}

/*
ExportPluginForbidden describes a response with status code 403, with default header values.

User is not authorized
*/
type ExportPluginForbidden struct {
}

// IsSuccess returns true when this export plugin forbidden response has a 2xx status code
func (o *ExportPluginForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export plugin forbidden response has a 3xx status code
func (o *ExportPluginForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export plugin forbidden response has a 4xx status code
func (o *ExportPluginForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this export plugin forbidden response has a 5xx status code
func (o *ExportPluginForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this export plugin forbidden response a status code equal to that given
func (o *ExportPluginForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the export plugin forbidden response
func (o *ExportPluginForbidden) Code() int {
	return 403
}

func (o *ExportPluginForbidden) Error() string {
	return fmt.Sprintf("[GET /plugins/{pluginName}][%d] exportPluginForbidden ", 403)
}

func (o *ExportPluginForbidden) String() string {
	return fmt.Sprintf("[GET /plugins/{pluginName}][%d] exportPluginForbidden ", 403)
}

func (o *ExportPluginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
