// Code generated by go-swagger; DO NOT EDIT.

package category_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteCategoryReader is a Reader for the DeleteCategory structure.
type DeleteCategoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCategoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCategoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteCategoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteCategoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteCategoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteCategoryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /categories/{id}] deleteCategory", response, response.Code())
	}
}

// NewDeleteCategoryOK creates a DeleteCategoryOK with default headers values
func NewDeleteCategoryOK() *DeleteCategoryOK {
	return &DeleteCategoryOK{}
}

/*
DeleteCategoryOK describes a response with status code 200, with default header values.

The request is successful
*/
type DeleteCategoryOK struct {
}

// IsSuccess returns true when this delete category o k response has a 2xx status code
func (o *DeleteCategoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete category o k response has a 3xx status code
func (o *DeleteCategoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete category o k response has a 4xx status code
func (o *DeleteCategoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete category o k response has a 5xx status code
func (o *DeleteCategoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete category o k response a status code equal to that given
func (o *DeleteCategoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete category o k response
func (o *DeleteCategoryOK) Code() int {
	return 200
}

func (o *DeleteCategoryOK) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryOK ", 200)
}

func (o *DeleteCategoryOK) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryOK ", 200)
}

func (o *DeleteCategoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCategoryNoContent creates a DeleteCategoryNoContent with default headers values
func NewDeleteCategoryNoContent() *DeleteCategoryNoContent {
	return &DeleteCategoryNoContent{}
}

/*
DeleteCategoryNoContent describes a response with status code 204, with default header values.

Delete operation completed OK
*/
type DeleteCategoryNoContent struct {
}

// IsSuccess returns true when this delete category no content response has a 2xx status code
func (o *DeleteCategoryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete category no content response has a 3xx status code
func (o *DeleteCategoryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete category no content response has a 4xx status code
func (o *DeleteCategoryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete category no content response has a 5xx status code
func (o *DeleteCategoryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete category no content response a status code equal to that given
func (o *DeleteCategoryNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete category no content response
func (o *DeleteCategoryNoContent) Code() int {
	return 204
}

func (o *DeleteCategoryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryNoContent ", 204)
}

func (o *DeleteCategoryNoContent) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryNoContent ", 204)
}

func (o *DeleteCategoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCategoryForbidden creates a DeleteCategoryForbidden with default headers values
func NewDeleteCategoryForbidden() *DeleteCategoryForbidden {
	return &DeleteCategoryForbidden{}
}

/*
DeleteCategoryForbidden describes a response with status code 403, with default header values.

User doesn't have permission to delete the category
*/
type DeleteCategoryForbidden struct {
}

// IsSuccess returns true when this delete category forbidden response has a 2xx status code
func (o *DeleteCategoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete category forbidden response has a 3xx status code
func (o *DeleteCategoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete category forbidden response has a 4xx status code
func (o *DeleteCategoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete category forbidden response has a 5xx status code
func (o *DeleteCategoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete category forbidden response a status code equal to that given
func (o *DeleteCategoryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete category forbidden response
func (o *DeleteCategoryForbidden) Code() int {
	return 403
}

func (o *DeleteCategoryForbidden) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryForbidden ", 403)
}

func (o *DeleteCategoryForbidden) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryForbidden ", 403)
}

func (o *DeleteCategoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCategoryNotFound creates a DeleteCategoryNotFound with default headers values
func NewDeleteCategoryNotFound() *DeleteCategoryNotFound {
	return &DeleteCategoryNotFound{}
}

/*
DeleteCategoryNotFound describes a response with status code 404, with default header values.

Cannot find a category with the specified ID,
*/
type DeleteCategoryNotFound struct {
}

// IsSuccess returns true when this delete category not found response has a 2xx status code
func (o *DeleteCategoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete category not found response has a 3xx status code
func (o *DeleteCategoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete category not found response has a 4xx status code
func (o *DeleteCategoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete category not found response has a 5xx status code
func (o *DeleteCategoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete category not found response a status code equal to that given
func (o *DeleteCategoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete category not found response
func (o *DeleteCategoryNotFound) Code() int {
	return 404
}

func (o *DeleteCategoryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryNotFound ", 404)
}

func (o *DeleteCategoryNotFound) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryNotFound ", 404)
}

func (o *DeleteCategoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteCategoryConflict creates a DeleteCategoryConflict with default headers values
func NewDeleteCategoryConflict() *DeleteCategoryConflict {
	return &DeleteCategoryConflict{}
}

/*
DeleteCategoryConflict describes a response with status code 409, with default header values.

Category has child elements
*/
type DeleteCategoryConflict struct {
}

// IsSuccess returns true when this delete category conflict response has a 2xx status code
func (o *DeleteCategoryConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete category conflict response has a 3xx status code
func (o *DeleteCategoryConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete category conflict response has a 4xx status code
func (o *DeleteCategoryConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete category conflict response has a 5xx status code
func (o *DeleteCategoryConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete category conflict response a status code equal to that given
func (o *DeleteCategoryConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete category conflict response
func (o *DeleteCategoryConflict) Code() int {
	return 409
}

func (o *DeleteCategoryConflict) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryConflict ", 409)
}

func (o *DeleteCategoryConflict) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}][%d] deleteCategoryConflict ", 409)
}

func (o *DeleteCategoryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
