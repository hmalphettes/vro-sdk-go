// Code generated by go-swagger; DO NOT EDIT.

package category_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetCategoryPermissionRuleReader is a Reader for the GetCategoryPermissionRule structure.
type GetCategoryPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCategoryPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCategoryPermissionRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCategoryPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCategoryPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /categories/{id}/permissions/{ruleId}] getCategoryPermissionRule", response, response.Code())
	}
}

// NewGetCategoryPermissionRuleOK creates a GetCategoryPermissionRuleOK with default headers values
func NewGetCategoryPermissionRuleOK() *GetCategoryPermissionRuleOK {
	return &GetCategoryPermissionRuleOK{}
}

/*
GetCategoryPermissionRuleOK describes a response with status code 200, with default header values.

The request is successful.
*/
type GetCategoryPermissionRuleOK struct {
	Payload *models.Permission
}

// IsSuccess returns true when this get category permission rule o k response has a 2xx status code
func (o *GetCategoryPermissionRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get category permission rule o k response has a 3xx status code
func (o *GetCategoryPermissionRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get category permission rule o k response has a 4xx status code
func (o *GetCategoryPermissionRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get category permission rule o k response has a 5xx status code
func (o *GetCategoryPermissionRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get category permission rule o k response a status code equal to that given
func (o *GetCategoryPermissionRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get category permission rule o k response
func (o *GetCategoryPermissionRuleOK) Code() int {
	return 200
}

func (o *GetCategoryPermissionRuleOK) Error() string {
	return fmt.Sprintf("[GET /categories/{id}/permissions/{ruleId}][%d] getCategoryPermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetCategoryPermissionRuleOK) String() string {
	return fmt.Sprintf("[GET /categories/{id}/permissions/{ruleId}][%d] getCategoryPermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetCategoryPermissionRuleOK) GetPayload() *models.Permission {
	return o.Payload
}

func (o *GetCategoryPermissionRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCategoryPermissionRuleUnauthorized creates a GetCategoryPermissionRuleUnauthorized with default headers values
func NewGetCategoryPermissionRuleUnauthorized() *GetCategoryPermissionRuleUnauthorized {
	return &GetCategoryPermissionRuleUnauthorized{}
}

/*
GetCategoryPermissionRuleUnauthorized describes a response with status code 401, with default header values.

User is not authorized.
*/
type GetCategoryPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this get category permission rule unauthorized response has a 2xx status code
func (o *GetCategoryPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get category permission rule unauthorized response has a 3xx status code
func (o *GetCategoryPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get category permission rule unauthorized response has a 4xx status code
func (o *GetCategoryPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get category permission rule unauthorized response has a 5xx status code
func (o *GetCategoryPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get category permission rule unauthorized response a status code equal to that given
func (o *GetCategoryPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get category permission rule unauthorized response
func (o *GetCategoryPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *GetCategoryPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /categories/{id}/permissions/{ruleId}][%d] getCategoryPermissionRuleUnauthorized ", 401)
}

func (o *GetCategoryPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[GET /categories/{id}/permissions/{ruleId}][%d] getCategoryPermissionRuleUnauthorized ", 401)
}

func (o *GetCategoryPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCategoryPermissionRuleNotFound creates a GetCategoryPermissionRuleNotFound with default headers values
func NewGetCategoryPermissionRuleNotFound() *GetCategoryPermissionRuleNotFound {
	return &GetCategoryPermissionRuleNotFound{}
}

/*
GetCategoryPermissionRuleNotFound describes a response with status code 404, with default header values.

Cannot find a category with the specified ID, the user does not have 'read' access rights for that category, or the permission rule with the specified ID does not exist.
*/
type GetCategoryPermissionRuleNotFound struct {
}

// IsSuccess returns true when this get category permission rule not found response has a 2xx status code
func (o *GetCategoryPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get category permission rule not found response has a 3xx status code
func (o *GetCategoryPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get category permission rule not found response has a 4xx status code
func (o *GetCategoryPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get category permission rule not found response has a 5xx status code
func (o *GetCategoryPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get category permission rule not found response a status code equal to that given
func (o *GetCategoryPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get category permission rule not found response
func (o *GetCategoryPermissionRuleNotFound) Code() int {
	return 404
}

func (o *GetCategoryPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /categories/{id}/permissions/{ruleId}][%d] getCategoryPermissionRuleNotFound ", 404)
}

func (o *GetCategoryPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[GET /categories/{id}/permissions/{ruleId}][%d] getCategoryPermissionRuleNotFound ", 404)
}

func (o *GetCategoryPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
