// Code generated by go-swagger; DO NOT EDIT.

package category_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// AddRootCategoryReader is a Reader for the AddRootCategory structure.
type AddRootCategoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddRootCategoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddRootCategoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAddRootCategoryCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddRootCategoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddRootCategoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddRootCategoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /categories] addRootCategory", response, response.Code())
	}
}

// NewAddRootCategoryOK creates a AddRootCategoryOK with default headers values
func NewAddRootCategoryOK() *AddRootCategoryOK {
	return &AddRootCategoryOK{}
}

/*
AddRootCategoryOK describes a response with status code 200, with default header values.

successful operation
*/
type AddRootCategoryOK struct {
	Payload *models.Category
}

// IsSuccess returns true when this add root category o k response has a 2xx status code
func (o *AddRootCategoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add root category o k response has a 3xx status code
func (o *AddRootCategoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add root category o k response has a 4xx status code
func (o *AddRootCategoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add root category o k response has a 5xx status code
func (o *AddRootCategoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add root category o k response a status code equal to that given
func (o *AddRootCategoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add root category o k response
func (o *AddRootCategoryOK) Code() int {
	return 200
}

func (o *AddRootCategoryOK) Error() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryOK  %+v", 200, o.Payload)
}

func (o *AddRootCategoryOK) String() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryOK  %+v", 200, o.Payload)
}

func (o *AddRootCategoryOK) GetPayload() *models.Category {
	return o.Payload
}

func (o *AddRootCategoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Category)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddRootCategoryCreated creates a AddRootCategoryCreated with default headers values
func NewAddRootCategoryCreated() *AddRootCategoryCreated {
	return &AddRootCategoryCreated{}
}

/*
AddRootCategoryCreated describes a response with status code 201, with default header values.

The request is successful
*/
type AddRootCategoryCreated struct {
}

// IsSuccess returns true when this add root category created response has a 2xx status code
func (o *AddRootCategoryCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add root category created response has a 3xx status code
func (o *AddRootCategoryCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add root category created response has a 4xx status code
func (o *AddRootCategoryCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add root category created response has a 5xx status code
func (o *AddRootCategoryCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add root category created response a status code equal to that given
func (o *AddRootCategoryCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add root category created response
func (o *AddRootCategoryCreated) Code() int {
	return 201
}

func (o *AddRootCategoryCreated) Error() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryCreated ", 201)
}

func (o *AddRootCategoryCreated) String() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryCreated ", 201)
}

func (o *AddRootCategoryCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRootCategoryBadRequest creates a AddRootCategoryBadRequest with default headers values
func NewAddRootCategoryBadRequest() *AddRootCategoryBadRequest {
	return &AddRootCategoryBadRequest{}
}

/*
AddRootCategoryBadRequest describes a response with status code 400, with default header values.

Category name must be specified
*/
type AddRootCategoryBadRequest struct {
}

// IsSuccess returns true when this add root category bad request response has a 2xx status code
func (o *AddRootCategoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add root category bad request response has a 3xx status code
func (o *AddRootCategoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add root category bad request response has a 4xx status code
func (o *AddRootCategoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add root category bad request response has a 5xx status code
func (o *AddRootCategoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add root category bad request response a status code equal to that given
func (o *AddRootCategoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add root category bad request response
func (o *AddRootCategoryBadRequest) Code() int {
	return 400
}

func (o *AddRootCategoryBadRequest) Error() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryBadRequest ", 400)
}

func (o *AddRootCategoryBadRequest) String() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryBadRequest ", 400)
}

func (o *AddRootCategoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRootCategoryUnauthorized creates a AddRootCategoryUnauthorized with default headers values
func NewAddRootCategoryUnauthorized() *AddRootCategoryUnauthorized {
	return &AddRootCategoryUnauthorized{}
}

/*
AddRootCategoryUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type AddRootCategoryUnauthorized struct {
}

// IsSuccess returns true when this add root category unauthorized response has a 2xx status code
func (o *AddRootCategoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add root category unauthorized response has a 3xx status code
func (o *AddRootCategoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add root category unauthorized response has a 4xx status code
func (o *AddRootCategoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add root category unauthorized response has a 5xx status code
func (o *AddRootCategoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add root category unauthorized response a status code equal to that given
func (o *AddRootCategoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add root category unauthorized response
func (o *AddRootCategoryUnauthorized) Code() int {
	return 401
}

func (o *AddRootCategoryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryUnauthorized ", 401)
}

func (o *AddRootCategoryUnauthorized) String() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryUnauthorized ", 401)
}

func (o *AddRootCategoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddRootCategoryNotFound creates a AddRootCategoryNotFound with default headers values
func NewAddRootCategoryNotFound() *AddRootCategoryNotFound {
	return &AddRootCategoryNotFound{}
}

/*
AddRootCategoryNotFound describes a response with status code 404, with default header values.

Cannot find a category with the specified name
*/
type AddRootCategoryNotFound struct {
}

// IsSuccess returns true when this add root category not found response has a 2xx status code
func (o *AddRootCategoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add root category not found response has a 3xx status code
func (o *AddRootCategoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add root category not found response has a 4xx status code
func (o *AddRootCategoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add root category not found response has a 5xx status code
func (o *AddRootCategoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add root category not found response a status code equal to that given
func (o *AddRootCategoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add root category not found response
func (o *AddRootCategoryNotFound) Code() int {
	return 404
}

func (o *AddRootCategoryNotFound) Error() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryNotFound ", 404)
}

func (o *AddRootCategoryNotFound) String() string {
	return fmt.Sprintf("[POST /categories][%d] addRootCategoryNotFound ", 404)
}

func (o *AddRootCategoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
