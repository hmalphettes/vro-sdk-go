// Code generated by go-swagger; DO NOT EDIT.

package category_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new category service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for category service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddChildCategory(params *AddChildCategoryParams, opts ...ClientOption) (*AddChildCategoryOK, error)

	AddRootCategory(params *AddRootCategoryParams, opts ...ClientOption) (*AddRootCategoryOK, *AddRootCategoryCreated, error)

	DeleteCategory(params *DeleteCategoryParams, opts ...ClientOption) (*DeleteCategoryOK, *DeleteCategoryNoContent, error)

	DeleteCategoryPermissionRule(params *DeleteCategoryPermissionRuleParams, opts ...ClientOption) (*DeleteCategoryPermissionRuleNoContent, error)

	DeletePermissionsForCategory(params *DeletePermissionsForCategoryParams, opts ...ClientOption) (*DeletePermissionsForCategoryOK, error)

	GetCategory(params *GetCategoryParams, opts ...ClientOption) (*GetCategoryOK, error)

	GetCategoryPermissionRule(params *GetCategoryPermissionRuleParams, opts ...ClientOption) (*GetCategoryPermissionRuleOK, error)

	GetPermissionsForCategory(params *GetPermissionsForCategoryParams, opts ...ClientOption) (*GetPermissionsForCategoryOK, error)

	InsertPermissionsForCategory(params *InsertPermissionsForCategoryParams, opts ...ClientOption) (*InsertPermissionsForCategoryOK, *InsertPermissionsForCategoryCreated, error)

	ListCategories(params *ListCategoriesParams, opts ...ClientOption) (*ListCategoriesOK, error)

	UpdateCategoryPermissionRule(params *UpdateCategoryPermissionRuleParams, opts ...ClientOption) (*UpdateCategoryPermissionRuleNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddChildCategory adds child category

Endpoint for adding child categories.
*/
func (a *Client) AddChildCategory(params *AddChildCategoryParams, opts ...ClientOption) (*AddChildCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddChildCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addChildCategory",
		Method:             "POST",
		PathPattern:        "/categories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddChildCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddChildCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addChildCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddRootCategory adds root category

Endpoint for adding categories in root.
*/
func (a *Client) AddRootCategory(params *AddRootCategoryParams, opts ...ClientOption) (*AddRootCategoryOK, *AddRootCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRootCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRootCategory",
		Method:             "POST",
		PathPattern:        "/categories",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddRootCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddRootCategoryOK:
		return value, nil, nil
	case *AddRootCategoryCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCategory deletes category

Deletes a category with a given ID.
*/
func (a *Client) DeleteCategory(params *DeleteCategoryParams, opts ...ClientOption) (*DeleteCategoryOK, *DeleteCategoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCategory",
		Method:             "DELETE",
		PathPattern:        "/categories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCategoryOK:
		return value, nil, nil
	case *DeleteCategoryNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCategoryPermissionRule deletes permission rule

Deletes a single permission rule with a given ID.
*/
func (a *Client) DeleteCategoryPermissionRule(params *DeleteCategoryPermissionRuleParams, opts ...ClientOption) (*DeleteCategoryPermissionRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCategoryPermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCategoryPermissionRule",
		Method:             "DELETE",
		PathPattern:        "/categories/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCategoryPermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCategoryPermissionRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCategoryPermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePermissionsForCategory deletes all permissions

Deletes all permissions for a category with a given ID.
*/
func (a *Client) DeletePermissionsForCategory(params *DeletePermissionsForCategoryParams, opts ...ClientOption) (*DeletePermissionsForCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsForCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePermissionsForCategory",
		Method:             "DELETE",
		PathPattern:        "/categories/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePermissionsForCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePermissionsForCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePermissionsForCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCategory gets category

Endpoint for retrieving details for a category.
*/
func (a *Client) GetCategory(params *GetCategoryParams, opts ...ClientOption) (*GetCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCategory",
		Method:             "GET",
		PathPattern:        "/categories/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCategoryPermissionRule gets permission rule

Retrieves details for a specific permission rule. Each rule contains information about the principal and he access rights assigned.
*/
func (a *Client) GetCategoryPermissionRule(params *GetCategoryPermissionRuleParams, opts ...ClientOption) (*GetCategoryPermissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCategoryPermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCategoryPermissionRule",
		Method:             "GET",
		PathPattern:        "/categories/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCategoryPermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCategoryPermissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCategoryPermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPermissionsForCategory gets category permissions

Retrieves category permissions.
*/
func (a *Client) GetPermissionsForCategory(params *GetPermissionsForCategoryParams, opts ...ClientOption) (*GetPermissionsForCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsForCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermissionsForCategory",
		Method:             "GET",
		PathPattern:        "/categories/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPermissionsForCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsForCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPermissionsForCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPermissionsForCategory inserts permissions

Sets permissions for a category with a given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN
*/
func (a *Client) InsertPermissionsForCategory(params *InsertPermissionsForCategoryParams, opts ...ClientOption) (*InsertPermissionsForCategoryOK, *InsertPermissionsForCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPermissionsForCategoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPermissionsForCategory",
		Method:             "POST",
		PathPattern:        "/categories/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InsertPermissionsForCategoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertPermissionsForCategoryOK:
		return value, nil, nil
	case *InsertPermissionsForCategoryCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for category_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCategories gets all categories

Endpoint for retrieving all categories.
*/
func (a *Client) ListCategories(params *ListCategoriesParams, opts ...ClientOption) (*ListCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCategories",
		Method:             "GET",
		PathPattern:        "/categories",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCategoryPermissionRule updates permission rule

Updates principal or access rights for a single permission rule with a given ID.
*/
func (a *Client) UpdateCategoryPermissionRule(params *UpdateCategoryPermissionRuleParams, opts ...ClientOption) (*UpdateCategoryPermissionRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCategoryPermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCategoryPermissionRule",
		Method:             "PUT",
		PathPattern:        "/categories/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCategoryPermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCategoryPermissionRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCategoryPermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
