// Code generated by go-swagger; DO NOT EDIT.

package category_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePermissionsForCategoryReader is a Reader for the DeletePermissionsForCategory structure.
type DeletePermissionsForCategoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePermissionsForCategoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeletePermissionsForCategoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePermissionsForCategoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePermissionsForCategoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /categories/{id}/permissions] deletePermissionsForCategory", response, response.Code())
	}
}

// NewDeletePermissionsForCategoryOK creates a DeletePermissionsForCategoryOK with default headers values
func NewDeletePermissionsForCategoryOK() *DeletePermissionsForCategoryOK {
	return &DeletePermissionsForCategoryOK{}
}

/*
DeletePermissionsForCategoryOK describes a response with status code 200, with default header values.

The request is successful.
*/
type DeletePermissionsForCategoryOK struct {
}

// IsSuccess returns true when this delete permissions for category o k response has a 2xx status code
func (o *DeletePermissionsForCategoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete permissions for category o k response has a 3xx status code
func (o *DeletePermissionsForCategoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for category o k response has a 4xx status code
func (o *DeletePermissionsForCategoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete permissions for category o k response has a 5xx status code
func (o *DeletePermissionsForCategoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for category o k response a status code equal to that given
func (o *DeletePermissionsForCategoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete permissions for category o k response
func (o *DeletePermissionsForCategoryOK) Code() int {
	return 200
}

func (o *DeletePermissionsForCategoryOK) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}/permissions][%d] deletePermissionsForCategoryOK ", 200)
}

func (o *DeletePermissionsForCategoryOK) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}/permissions][%d] deletePermissionsForCategoryOK ", 200)
}

func (o *DeletePermissionsForCategoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForCategoryUnauthorized creates a DeletePermissionsForCategoryUnauthorized with default headers values
func NewDeletePermissionsForCategoryUnauthorized() *DeletePermissionsForCategoryUnauthorized {
	return &DeletePermissionsForCategoryUnauthorized{}
}

/*
DeletePermissionsForCategoryUnauthorized describes a response with status code 401, with default header values.

User is not authorized.
*/
type DeletePermissionsForCategoryUnauthorized struct {
}

// IsSuccess returns true when this delete permissions for category unauthorized response has a 2xx status code
func (o *DeletePermissionsForCategoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for category unauthorized response has a 3xx status code
func (o *DeletePermissionsForCategoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for category unauthorized response has a 4xx status code
func (o *DeletePermissionsForCategoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for category unauthorized response has a 5xx status code
func (o *DeletePermissionsForCategoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for category unauthorized response a status code equal to that given
func (o *DeletePermissionsForCategoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete permissions for category unauthorized response
func (o *DeletePermissionsForCategoryUnauthorized) Code() int {
	return 401
}

func (o *DeletePermissionsForCategoryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}/permissions][%d] deletePermissionsForCategoryUnauthorized ", 401)
}

func (o *DeletePermissionsForCategoryUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}/permissions][%d] deletePermissionsForCategoryUnauthorized ", 401)
}

func (o *DeletePermissionsForCategoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForCategoryNotFound creates a DeletePermissionsForCategoryNotFound with default headers values
func NewDeletePermissionsForCategoryNotFound() *DeletePermissionsForCategoryNotFound {
	return &DeletePermissionsForCategoryNotFound{}
}

/*
DeletePermissionsForCategoryNotFound describes a response with status code 404, with default header values.

Cannot find a category with the specified ID,
*/
type DeletePermissionsForCategoryNotFound struct {
}

// IsSuccess returns true when this delete permissions for category not found response has a 2xx status code
func (o *DeletePermissionsForCategoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for category not found response has a 3xx status code
func (o *DeletePermissionsForCategoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for category not found response has a 4xx status code
func (o *DeletePermissionsForCategoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for category not found response has a 5xx status code
func (o *DeletePermissionsForCategoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for category not found response a status code equal to that given
func (o *DeletePermissionsForCategoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete permissions for category not found response
func (o *DeletePermissionsForCategoryNotFound) Code() int {
	return 404
}

func (o *DeletePermissionsForCategoryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /categories/{id}/permissions][%d] deletePermissionsForCategoryNotFound ", 404)
}

func (o *DeletePermissionsForCategoryNotFound) String() string {
	return fmt.Sprintf("[DELETE /categories/{id}/permissions][%d] deletePermissionsForCategoryNotFound ", 404)
}

func (o *DeletePermissionsForCategoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
