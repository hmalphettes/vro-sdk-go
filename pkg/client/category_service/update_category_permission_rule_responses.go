// Code generated by go-swagger; DO NOT EDIT.

package category_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateCategoryPermissionRuleReader is a Reader for the UpdateCategoryPermissionRule structure.
type UpdateCategoryPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCategoryPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateCategoryPermissionRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCategoryPermissionRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCategoryPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCategoryPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /categories/{id}/permissions/{ruleId}] updateCategoryPermissionRule", response, response.Code())
	}
}

// NewUpdateCategoryPermissionRuleNoContent creates a UpdateCategoryPermissionRuleNoContent with default headers values
func NewUpdateCategoryPermissionRuleNoContent() *UpdateCategoryPermissionRuleNoContent {
	return &UpdateCategoryPermissionRuleNoContent{}
}

/*
UpdateCategoryPermissionRuleNoContent describes a response with status code 204, with default header values.

No content
*/
type UpdateCategoryPermissionRuleNoContent struct {
}

// IsSuccess returns true when this update category permission rule no content response has a 2xx status code
func (o *UpdateCategoryPermissionRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update category permission rule no content response has a 3xx status code
func (o *UpdateCategoryPermissionRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update category permission rule no content response has a 4xx status code
func (o *UpdateCategoryPermissionRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update category permission rule no content response has a 5xx status code
func (o *UpdateCategoryPermissionRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update category permission rule no content response a status code equal to that given
func (o *UpdateCategoryPermissionRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update category permission rule no content response
func (o *UpdateCategoryPermissionRuleNoContent) Code() int {
	return 204
}

func (o *UpdateCategoryPermissionRuleNoContent) Error() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleNoContent ", 204)
}

func (o *UpdateCategoryPermissionRuleNoContent) String() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleNoContent ", 204)
}

func (o *UpdateCategoryPermissionRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCategoryPermissionRuleBadRequest creates a UpdateCategoryPermissionRuleBadRequest with default headers values
func NewUpdateCategoryPermissionRuleBadRequest() *UpdateCategoryPermissionRuleBadRequest {
	return &UpdateCategoryPermissionRuleBadRequest{}
}

/*
UpdateCategoryPermissionRuleBadRequest describes a response with status code 400, with default header values.

Request is not valid (validation error)
*/
type UpdateCategoryPermissionRuleBadRequest struct {
}

// IsSuccess returns true when this update category permission rule bad request response has a 2xx status code
func (o *UpdateCategoryPermissionRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update category permission rule bad request response has a 3xx status code
func (o *UpdateCategoryPermissionRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update category permission rule bad request response has a 4xx status code
func (o *UpdateCategoryPermissionRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update category permission rule bad request response has a 5xx status code
func (o *UpdateCategoryPermissionRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update category permission rule bad request response a status code equal to that given
func (o *UpdateCategoryPermissionRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update category permission rule bad request response
func (o *UpdateCategoryPermissionRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateCategoryPermissionRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleBadRequest ", 400)
}

func (o *UpdateCategoryPermissionRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleBadRequest ", 400)
}

func (o *UpdateCategoryPermissionRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCategoryPermissionRuleUnauthorized creates a UpdateCategoryPermissionRuleUnauthorized with default headers values
func NewUpdateCategoryPermissionRuleUnauthorized() *UpdateCategoryPermissionRuleUnauthorized {
	return &UpdateCategoryPermissionRuleUnauthorized{}
}

/*
UpdateCategoryPermissionRuleUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type UpdateCategoryPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this update category permission rule unauthorized response has a 2xx status code
func (o *UpdateCategoryPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update category permission rule unauthorized response has a 3xx status code
func (o *UpdateCategoryPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update category permission rule unauthorized response has a 4xx status code
func (o *UpdateCategoryPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update category permission rule unauthorized response has a 5xx status code
func (o *UpdateCategoryPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update category permission rule unauthorized response a status code equal to that given
func (o *UpdateCategoryPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update category permission rule unauthorized response
func (o *UpdateCategoryPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *UpdateCategoryPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleUnauthorized ", 401)
}

func (o *UpdateCategoryPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleUnauthorized ", 401)
}

func (o *UpdateCategoryPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCategoryPermissionRuleNotFound creates a UpdateCategoryPermissionRuleNotFound with default headers values
func NewUpdateCategoryPermissionRuleNotFound() *UpdateCategoryPermissionRuleNotFound {
	return &UpdateCategoryPermissionRuleNotFound{}
}

/*
UpdateCategoryPermissionRuleNotFound describes a response with status code 404, with default header values.

Cannot find a category with the specified ID, the user does not have 'admin' access rights for that category, or the permission rule with the specified ID does not exist
*/
type UpdateCategoryPermissionRuleNotFound struct {
}

// IsSuccess returns true when this update category permission rule not found response has a 2xx status code
func (o *UpdateCategoryPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update category permission rule not found response has a 3xx status code
func (o *UpdateCategoryPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update category permission rule not found response has a 4xx status code
func (o *UpdateCategoryPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update category permission rule not found response has a 5xx status code
func (o *UpdateCategoryPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update category permission rule not found response a status code equal to that given
func (o *UpdateCategoryPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update category permission rule not found response
func (o *UpdateCategoryPermissionRuleNotFound) Code() int {
	return 404
}

func (o *UpdateCategoryPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleNotFound ", 404)
}

func (o *UpdateCategoryPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /categories/{id}/permissions/{ruleId}][%d] updateCategoryPermissionRuleNotFound ", 404)
}

func (o *UpdateCategoryPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
