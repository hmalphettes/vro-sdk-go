// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteActionReader is a Reader for the DeleteAction structure.
type DeleteActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /actions/{actionId}] deleteAction", response, response.Code())
	}
}

// NewDeleteActionOK creates a DeleteActionOK with default headers values
func NewDeleteActionOK() *DeleteActionOK {
	return &DeleteActionOK{}
}

/*
DeleteActionOK describes a response with status code 200, with default header values.

Action successfully deleted
*/
type DeleteActionOK struct {
}

// IsSuccess returns true when this delete action o k response has a 2xx status code
func (o *DeleteActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete action o k response has a 3xx status code
func (o *DeleteActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action o k response has a 4xx status code
func (o *DeleteActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete action o k response has a 5xx status code
func (o *DeleteActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action o k response a status code equal to that given
func (o *DeleteActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete action o k response
func (o *DeleteActionOK) Code() int {
	return 200
}

func (o *DeleteActionOK) Error() string {
	return fmt.Sprintf("[DELETE /actions/{actionId}][%d] deleteActionOK ", 200)
}

func (o *DeleteActionOK) String() string {
	return fmt.Sprintf("[DELETE /actions/{actionId}][%d] deleteActionOK ", 200)
}

func (o *DeleteActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteActionUnauthorized creates a DeleteActionUnauthorized with default headers values
func NewDeleteActionUnauthorized() *DeleteActionUnauthorized {
	return &DeleteActionUnauthorized{}
}

/*
DeleteActionUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type DeleteActionUnauthorized struct {
}

// IsSuccess returns true when this delete action unauthorized response has a 2xx status code
func (o *DeleteActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action unauthorized response has a 3xx status code
func (o *DeleteActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action unauthorized response has a 4xx status code
func (o *DeleteActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action unauthorized response has a 5xx status code
func (o *DeleteActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action unauthorized response a status code equal to that given
func (o *DeleteActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete action unauthorized response
func (o *DeleteActionUnauthorized) Code() int {
	return 401
}

func (o *DeleteActionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /actions/{actionId}][%d] deleteActionUnauthorized ", 401)
}

func (o *DeleteActionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /actions/{actionId}][%d] deleteActionUnauthorized ", 401)
}

func (o *DeleteActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteActionNotFound creates a DeleteActionNotFound with default headers values
func NewDeleteActionNotFound() *DeleteActionNotFound {
	return &DeleteActionNotFound{}
}

/*
DeleteActionNotFound describes a response with status code 404, with default header values.

Can not find an action with the specified id
*/
type DeleteActionNotFound struct {
}

// IsSuccess returns true when this delete action not found response has a 2xx status code
func (o *DeleteActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action not found response has a 3xx status code
func (o *DeleteActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action not found response has a 4xx status code
func (o *DeleteActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action not found response has a 5xx status code
func (o *DeleteActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action not found response a status code equal to that given
func (o *DeleteActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete action not found response
func (o *DeleteActionNotFound) Code() int {
	return 404
}

func (o *DeleteActionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /actions/{actionId}][%d] deleteActionNotFound ", 404)
}

func (o *DeleteActionNotFound) String() string {
	return fmt.Sprintf("[DELETE /actions/{actionId}][%d] deleteActionNotFound ", 404)
}

func (o *DeleteActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
