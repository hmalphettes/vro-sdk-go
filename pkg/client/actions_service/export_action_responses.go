// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ExportActionReader is a Reader for the ExportAction structure.
type ExportActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /actions/{actionId}] exportAction", response, response.Code())
	}
}

// NewExportActionOK creates a ExportActionOK with default headers values
func NewExportActionOK() *ExportActionOK {
	return &ExportActionOK{}
}

/*
ExportActionOK describes a response with status code 200, with default header values.

The request is successful
*/
type ExportActionOK struct {
}

// IsSuccess returns true when this export action o k response has a 2xx status code
func (o *ExportActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this export action o k response has a 3xx status code
func (o *ExportActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export action o k response has a 4xx status code
func (o *ExportActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this export action o k response has a 5xx status code
func (o *ExportActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this export action o k response a status code equal to that given
func (o *ExportActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the export action o k response
func (o *ExportActionOK) Code() int {
	return 200
}

func (o *ExportActionOK) Error() string {
	return fmt.Sprintf("[GET /actions/{actionId}][%d] exportActionOK ", 200)
}

func (o *ExportActionOK) String() string {
	return fmt.Sprintf("[GET /actions/{actionId}][%d] exportActionOK ", 200)
}

func (o *ExportActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportActionUnauthorized creates a ExportActionUnauthorized with default headers values
func NewExportActionUnauthorized() *ExportActionUnauthorized {
	return &ExportActionUnauthorized{}
}

/*
ExportActionUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type ExportActionUnauthorized struct {
}

// IsSuccess returns true when this export action unauthorized response has a 2xx status code
func (o *ExportActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export action unauthorized response has a 3xx status code
func (o *ExportActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export action unauthorized response has a 4xx status code
func (o *ExportActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this export action unauthorized response has a 5xx status code
func (o *ExportActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this export action unauthorized response a status code equal to that given
func (o *ExportActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the export action unauthorized response
func (o *ExportActionUnauthorized) Code() int {
	return 401
}

func (o *ExportActionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /actions/{actionId}][%d] exportActionUnauthorized ", 401)
}

func (o *ExportActionUnauthorized) String() string {
	return fmt.Sprintf("[GET /actions/{actionId}][%d] exportActionUnauthorized ", 401)
}

func (o *ExportActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExportActionNotFound creates a ExportActionNotFound with default headers values
func NewExportActionNotFound() *ExportActionNotFound {
	return &ExportActionNotFound{}
}

/*
ExportActionNotFound describes a response with status code 404, with default header values.

Can not find an action with the specified id
*/
type ExportActionNotFound struct {
}

// IsSuccess returns true when this export action not found response has a 2xx status code
func (o *ExportActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export action not found response has a 3xx status code
func (o *ExportActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export action not found response has a 4xx status code
func (o *ExportActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this export action not found response has a 5xx status code
func (o *ExportActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this export action not found response a status code equal to that given
func (o *ExportActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the export action not found response
func (o *ExportActionNotFound) Code() int {
	return 404
}

func (o *ExportActionNotFound) Error() string {
	return fmt.Sprintf("[GET /actions/{actionId}][%d] exportActionNotFound ", 404)
}

func (o *ExportActionNotFound) String() string {
	return fmt.Sprintf("[GET /actions/{actionId}][%d] exportActionNotFound ", 404)
}

func (o *ExportActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
