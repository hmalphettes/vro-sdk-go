// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// ExecuteActionByNameReader is a Reader for the ExecuteActionByName structure.
type ExecuteActionByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteActionByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteActionByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExecuteActionByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecuteActionByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /actions/{categoryName}/{actionName}/executions] executeActionByName", response, response.Code())
	}
}

// NewExecuteActionByNameOK creates a ExecuteActionByNameOK with default headers values
func NewExecuteActionByNameOK() *ExecuteActionByNameOK {
	return &ExecuteActionByNameOK{}
}

/*
ExecuteActionByNameOK describes a response with status code 200, with default header values.

The request is successful
*/
type ExecuteActionByNameOK struct {
	Payload *models.Parameter
}

// IsSuccess returns true when this execute action by name o k response has a 2xx status code
func (o *ExecuteActionByNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute action by name o k response has a 3xx status code
func (o *ExecuteActionByNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute action by name o k response has a 4xx status code
func (o *ExecuteActionByNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute action by name o k response has a 5xx status code
func (o *ExecuteActionByNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute action by name o k response a status code equal to that given
func (o *ExecuteActionByNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute action by name o k response
func (o *ExecuteActionByNameOK) Code() int {
	return 200
}

func (o *ExecuteActionByNameOK) Error() string {
	return fmt.Sprintf("[POST /actions/{categoryName}/{actionName}/executions][%d] executeActionByNameOK  %+v", 200, o.Payload)
}

func (o *ExecuteActionByNameOK) String() string {
	return fmt.Sprintf("[POST /actions/{categoryName}/{actionName}/executions][%d] executeActionByNameOK  %+v", 200, o.Payload)
}

func (o *ExecuteActionByNameOK) GetPayload() *models.Parameter {
	return o.Payload
}

func (o *ExecuteActionByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Parameter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteActionByNameUnauthorized creates a ExecuteActionByNameUnauthorized with default headers values
func NewExecuteActionByNameUnauthorized() *ExecuteActionByNameUnauthorized {
	return &ExecuteActionByNameUnauthorized{}
}

/*
ExecuteActionByNameUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type ExecuteActionByNameUnauthorized struct {
}

// IsSuccess returns true when this execute action by name unauthorized response has a 2xx status code
func (o *ExecuteActionByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute action by name unauthorized response has a 3xx status code
func (o *ExecuteActionByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute action by name unauthorized response has a 4xx status code
func (o *ExecuteActionByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute action by name unauthorized response has a 5xx status code
func (o *ExecuteActionByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute action by name unauthorized response a status code equal to that given
func (o *ExecuteActionByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute action by name unauthorized response
func (o *ExecuteActionByNameUnauthorized) Code() int {
	return 401
}

func (o *ExecuteActionByNameUnauthorized) Error() string {
	return fmt.Sprintf("[POST /actions/{categoryName}/{actionName}/executions][%d] executeActionByNameUnauthorized ", 401)
}

func (o *ExecuteActionByNameUnauthorized) String() string {
	return fmt.Sprintf("[POST /actions/{categoryName}/{actionName}/executions][%d] executeActionByNameUnauthorized ", 401)
}

func (o *ExecuteActionByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecuteActionByNameNotFound creates a ExecuteActionByNameNotFound with default headers values
func NewExecuteActionByNameNotFound() *ExecuteActionByNameNotFound {
	return &ExecuteActionByNameNotFound{}
}

/*
ExecuteActionByNameNotFound describes a response with status code 404, with default header values.

Can not find an action with the specified name
*/
type ExecuteActionByNameNotFound struct {
}

// IsSuccess returns true when this execute action by name not found response has a 2xx status code
func (o *ExecuteActionByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute action by name not found response has a 3xx status code
func (o *ExecuteActionByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute action by name not found response has a 4xx status code
func (o *ExecuteActionByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute action by name not found response has a 5xx status code
func (o *ExecuteActionByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execute action by name not found response a status code equal to that given
func (o *ExecuteActionByNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the execute action by name not found response
func (o *ExecuteActionByNameNotFound) Code() int {
	return 404
}

func (o *ExecuteActionByNameNotFound) Error() string {
	return fmt.Sprintf("[POST /actions/{categoryName}/{actionName}/executions][%d] executeActionByNameNotFound ", 404)
}

func (o *ExecuteActionByNameNotFound) String() string {
	return fmt.Sprintf("[POST /actions/{categoryName}/{actionName}/executions][%d] executeActionByNameNotFound ", 404)
}

func (o *ExecuteActionByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
