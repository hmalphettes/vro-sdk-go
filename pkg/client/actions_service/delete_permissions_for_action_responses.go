// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePermissionsForActionReader is a Reader for the DeletePermissionsForAction structure.
type DeletePermissionsForActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePermissionsForActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeletePermissionsForActionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePermissionsForActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePermissionsForActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /actions/{id}/permissions] deletePermissionsForAction", response, response.Code())
	}
}

// NewDeletePermissionsForActionNoContent creates a DeletePermissionsForActionNoContent with default headers values
func NewDeletePermissionsForActionNoContent() *DeletePermissionsForActionNoContent {
	return &DeletePermissionsForActionNoContent{}
}

/*
DeletePermissionsForActionNoContent describes a response with status code 204, with default header values.

No content
*/
type DeletePermissionsForActionNoContent struct {
}

// IsSuccess returns true when this delete permissions for action no content response has a 2xx status code
func (o *DeletePermissionsForActionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete permissions for action no content response has a 3xx status code
func (o *DeletePermissionsForActionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for action no content response has a 4xx status code
func (o *DeletePermissionsForActionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete permissions for action no content response has a 5xx status code
func (o *DeletePermissionsForActionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for action no content response a status code equal to that given
func (o *DeletePermissionsForActionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete permissions for action no content response
func (o *DeletePermissionsForActionNoContent) Code() int {
	return 204
}

func (o *DeletePermissionsForActionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}/permissions][%d] deletePermissionsForActionNoContent ", 204)
}

func (o *DeletePermissionsForActionNoContent) String() string {
	return fmt.Sprintf("[DELETE /actions/{id}/permissions][%d] deletePermissionsForActionNoContent ", 204)
}

func (o *DeletePermissionsForActionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForActionUnauthorized creates a DeletePermissionsForActionUnauthorized with default headers values
func NewDeletePermissionsForActionUnauthorized() *DeletePermissionsForActionUnauthorized {
	return &DeletePermissionsForActionUnauthorized{}
}

/*
DeletePermissionsForActionUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type DeletePermissionsForActionUnauthorized struct {
}

// IsSuccess returns true when this delete permissions for action unauthorized response has a 2xx status code
func (o *DeletePermissionsForActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for action unauthorized response has a 3xx status code
func (o *DeletePermissionsForActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for action unauthorized response has a 4xx status code
func (o *DeletePermissionsForActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for action unauthorized response has a 5xx status code
func (o *DeletePermissionsForActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for action unauthorized response a status code equal to that given
func (o *DeletePermissionsForActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete permissions for action unauthorized response
func (o *DeletePermissionsForActionUnauthorized) Code() int {
	return 401
}

func (o *DeletePermissionsForActionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}/permissions][%d] deletePermissionsForActionUnauthorized ", 401)
}

func (o *DeletePermissionsForActionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /actions/{id}/permissions][%d] deletePermissionsForActionUnauthorized ", 401)
}

func (o *DeletePermissionsForActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForActionNotFound creates a DeletePermissionsForActionNotFound with default headers values
func NewDeletePermissionsForActionNotFound() *DeletePermissionsForActionNotFound {
	return &DeletePermissionsForActionNotFound{}
}

/*
DeletePermissionsForActionNotFound describes a response with status code 404, with default header values.

Can not find an action with the specified id
*/
type DeletePermissionsForActionNotFound struct {
}

// IsSuccess returns true when this delete permissions for action not found response has a 2xx status code
func (o *DeletePermissionsForActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for action not found response has a 3xx status code
func (o *DeletePermissionsForActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for action not found response has a 4xx status code
func (o *DeletePermissionsForActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for action not found response has a 5xx status code
func (o *DeletePermissionsForActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for action not found response a status code equal to that given
func (o *DeletePermissionsForActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete permissions for action not found response
func (o *DeletePermissionsForActionNotFound) Code() int {
	return 404
}

func (o *DeletePermissionsForActionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /actions/{id}/permissions][%d] deletePermissionsForActionNotFound ", 404)
}

func (o *DeletePermissionsForActionNotFound) String() string {
	return fmt.Sprintf("[DELETE /actions/{id}/permissions][%d] deletePermissionsForActionNotFound ", 404)
}

func (o *DeletePermissionsForActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
