// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// ExecuteActionByIDReader is a Reader for the ExecuteActionByID structure.
type ExecuteActionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecuteActionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExecuteActionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExecuteActionByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExecuteActionByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /actions/{actionId}/executions] executeActionById", response, response.Code())
	}
}

// NewExecuteActionByIDOK creates a ExecuteActionByIDOK with default headers values
func NewExecuteActionByIDOK() *ExecuteActionByIDOK {
	return &ExecuteActionByIDOK{}
}

/*
ExecuteActionByIDOK describes a response with status code 200, with default header values.

The request is successful
*/
type ExecuteActionByIDOK struct {
	Payload *models.Parameter
}

// IsSuccess returns true when this execute action by Id o k response has a 2xx status code
func (o *ExecuteActionByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this execute action by Id o k response has a 3xx status code
func (o *ExecuteActionByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute action by Id o k response has a 4xx status code
func (o *ExecuteActionByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this execute action by Id o k response has a 5xx status code
func (o *ExecuteActionByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this execute action by Id o k response a status code equal to that given
func (o *ExecuteActionByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the execute action by Id o k response
func (o *ExecuteActionByIDOK) Code() int {
	return 200
}

func (o *ExecuteActionByIDOK) Error() string {
	return fmt.Sprintf("[POST /actions/{actionId}/executions][%d] executeActionByIdOK  %+v", 200, o.Payload)
}

func (o *ExecuteActionByIDOK) String() string {
	return fmt.Sprintf("[POST /actions/{actionId}/executions][%d] executeActionByIdOK  %+v", 200, o.Payload)
}

func (o *ExecuteActionByIDOK) GetPayload() *models.Parameter {
	return o.Payload
}

func (o *ExecuteActionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Parameter)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecuteActionByIDUnauthorized creates a ExecuteActionByIDUnauthorized with default headers values
func NewExecuteActionByIDUnauthorized() *ExecuteActionByIDUnauthorized {
	return &ExecuteActionByIDUnauthorized{}
}

/*
ExecuteActionByIDUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type ExecuteActionByIDUnauthorized struct {
}

// IsSuccess returns true when this execute action by Id unauthorized response has a 2xx status code
func (o *ExecuteActionByIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute action by Id unauthorized response has a 3xx status code
func (o *ExecuteActionByIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute action by Id unauthorized response has a 4xx status code
func (o *ExecuteActionByIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute action by Id unauthorized response has a 5xx status code
func (o *ExecuteActionByIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this execute action by Id unauthorized response a status code equal to that given
func (o *ExecuteActionByIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the execute action by Id unauthorized response
func (o *ExecuteActionByIDUnauthorized) Code() int {
	return 401
}

func (o *ExecuteActionByIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /actions/{actionId}/executions][%d] executeActionByIdUnauthorized ", 401)
}

func (o *ExecuteActionByIDUnauthorized) String() string {
	return fmt.Sprintf("[POST /actions/{actionId}/executions][%d] executeActionByIdUnauthorized ", 401)
}

func (o *ExecuteActionByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecuteActionByIDNotFound creates a ExecuteActionByIDNotFound with default headers values
func NewExecuteActionByIDNotFound() *ExecuteActionByIDNotFound {
	return &ExecuteActionByIDNotFound{}
}

/*
ExecuteActionByIDNotFound describes a response with status code 404, with default header values.

Can not find an action with the specified id
*/
type ExecuteActionByIDNotFound struct {
}

// IsSuccess returns true when this execute action by Id not found response has a 2xx status code
func (o *ExecuteActionByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this execute action by Id not found response has a 3xx status code
func (o *ExecuteActionByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this execute action by Id not found response has a 4xx status code
func (o *ExecuteActionByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this execute action by Id not found response has a 5xx status code
func (o *ExecuteActionByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this execute action by Id not found response a status code equal to that given
func (o *ExecuteActionByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the execute action by Id not found response
func (o *ExecuteActionByIDNotFound) Code() int {
	return 404
}

func (o *ExecuteActionByIDNotFound) Error() string {
	return fmt.Sprintf("[POST /actions/{actionId}/executions][%d] executeActionByIdNotFound ", 404)
}

func (o *ExecuteActionByIDNotFound) String() string {
	return fmt.Sprintf("[POST /actions/{actionId}/executions][%d] executeActionByIdNotFound ", 404)
}

func (o *ExecuteActionByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
