// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetActionPermissionRuleReader is a Reader for the GetActionPermissionRule structure.
type GetActionPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetActionPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetActionPermissionRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetActionPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetActionPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /actions/{id}/permissions/{ruleId}] getActionPermissionRule", response, response.Code())
	}
}

// NewGetActionPermissionRuleOK creates a GetActionPermissionRuleOK with default headers values
func NewGetActionPermissionRuleOK() *GetActionPermissionRuleOK {
	return &GetActionPermissionRuleOK{}
}

/*
GetActionPermissionRuleOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetActionPermissionRuleOK struct {
	Payload *models.Permission
}

// IsSuccess returns true when this get action permission rule o k response has a 2xx status code
func (o *GetActionPermissionRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get action permission rule o k response has a 3xx status code
func (o *GetActionPermissionRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get action permission rule o k response has a 4xx status code
func (o *GetActionPermissionRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get action permission rule o k response has a 5xx status code
func (o *GetActionPermissionRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get action permission rule o k response a status code equal to that given
func (o *GetActionPermissionRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get action permission rule o k response
func (o *GetActionPermissionRuleOK) Code() int {
	return 200
}

func (o *GetActionPermissionRuleOK) Error() string {
	return fmt.Sprintf("[GET /actions/{id}/permissions/{ruleId}][%d] getActionPermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetActionPermissionRuleOK) String() string {
	return fmt.Sprintf("[GET /actions/{id}/permissions/{ruleId}][%d] getActionPermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetActionPermissionRuleOK) GetPayload() *models.Permission {
	return o.Payload
}

func (o *GetActionPermissionRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetActionPermissionRuleUnauthorized creates a GetActionPermissionRuleUnauthorized with default headers values
func NewGetActionPermissionRuleUnauthorized() *GetActionPermissionRuleUnauthorized {
	return &GetActionPermissionRuleUnauthorized{}
}

/*
GetActionPermissionRuleUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type GetActionPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this get action permission rule unauthorized response has a 2xx status code
func (o *GetActionPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get action permission rule unauthorized response has a 3xx status code
func (o *GetActionPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get action permission rule unauthorized response has a 4xx status code
func (o *GetActionPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get action permission rule unauthorized response has a 5xx status code
func (o *GetActionPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get action permission rule unauthorized response a status code equal to that given
func (o *GetActionPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get action permission rule unauthorized response
func (o *GetActionPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *GetActionPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /actions/{id}/permissions/{ruleId}][%d] getActionPermissionRuleUnauthorized ", 401)
}

func (o *GetActionPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[GET /actions/{id}/permissions/{ruleId}][%d] getActionPermissionRuleUnauthorized ", 401)
}

func (o *GetActionPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetActionPermissionRuleNotFound creates a GetActionPermissionRuleNotFound with default headers values
func NewGetActionPermissionRuleNotFound() *GetActionPermissionRuleNotFound {
	return &GetActionPermissionRuleNotFound{}
}

/*
GetActionPermissionRuleNotFound describes a response with status code 404, with default header values.

Can not find an action with the specified ID, the user does not have 'read' access rights for that action, or the permission rule with the specified ID does not exist
*/
type GetActionPermissionRuleNotFound struct {
}

// IsSuccess returns true when this get action permission rule not found response has a 2xx status code
func (o *GetActionPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get action permission rule not found response has a 3xx status code
func (o *GetActionPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get action permission rule not found response has a 4xx status code
func (o *GetActionPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get action permission rule not found response has a 5xx status code
func (o *GetActionPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get action permission rule not found response a status code equal to that given
func (o *GetActionPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get action permission rule not found response
func (o *GetActionPermissionRuleNotFound) Code() int {
	return 404
}

func (o *GetActionPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /actions/{id}/permissions/{ruleId}][%d] getActionPermissionRuleNotFound ", 404)
}

func (o *GetActionPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[GET /actions/{id}/permissions/{ruleId}][%d] getActionPermissionRuleNotFound ", 404)
}

func (o *GetActionPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
