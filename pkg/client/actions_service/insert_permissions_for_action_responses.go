// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// InsertPermissionsForActionReader is a Reader for the InsertPermissionsForAction structure.
type InsertPermissionsForActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertPermissionsForActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertPermissionsForActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewInsertPermissionsForActionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewInsertPermissionsForActionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertPermissionsForActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertPermissionsForActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsertPermissionsForActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /actions/{id}/permissions] insertPermissionsForAction", response, response.Code())
	}
}

// NewInsertPermissionsForActionOK creates a InsertPermissionsForActionOK with default headers values
func NewInsertPermissionsForActionOK() *InsertPermissionsForActionOK {
	return &InsertPermissionsForActionOK{}
}

/*
InsertPermissionsForActionOK describes a response with status code 200, with default header values.

successful operation
*/
type InsertPermissionsForActionOK struct {
	Payload *models.Permissions
}

// IsSuccess returns true when this insert permissions for action o k response has a 2xx status code
func (o *InsertPermissionsForActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for action o k response has a 3xx status code
func (o *InsertPermissionsForActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for action o k response has a 4xx status code
func (o *InsertPermissionsForActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for action o k response has a 5xx status code
func (o *InsertPermissionsForActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for action o k response a status code equal to that given
func (o *InsertPermissionsForActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert permissions for action o k response
func (o *InsertPermissionsForActionOK) Code() int {
	return 200
}

func (o *InsertPermissionsForActionOK) Error() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForActionOK) String() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForActionOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *InsertPermissionsForActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertPermissionsForActionCreated creates a InsertPermissionsForActionCreated with default headers values
func NewInsertPermissionsForActionCreated() *InsertPermissionsForActionCreated {
	return &InsertPermissionsForActionCreated{}
}

/*
InsertPermissionsForActionCreated describes a response with status code 201, with default header values.

The request is successful
*/
type InsertPermissionsForActionCreated struct {
}

// IsSuccess returns true when this insert permissions for action created response has a 2xx status code
func (o *InsertPermissionsForActionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for action created response has a 3xx status code
func (o *InsertPermissionsForActionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for action created response has a 4xx status code
func (o *InsertPermissionsForActionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for action created response has a 5xx status code
func (o *InsertPermissionsForActionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for action created response a status code equal to that given
func (o *InsertPermissionsForActionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the insert permissions for action created response
func (o *InsertPermissionsForActionCreated) Code() int {
	return 201
}

func (o *InsertPermissionsForActionCreated) Error() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionCreated ", 201)
}

func (o *InsertPermissionsForActionCreated) String() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionCreated ", 201)
}

func (o *InsertPermissionsForActionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForActionNoContent creates a InsertPermissionsForActionNoContent with default headers values
func NewInsertPermissionsForActionNoContent() *InsertPermissionsForActionNoContent {
	return &InsertPermissionsForActionNoContent{}
}

/*
InsertPermissionsForActionNoContent describes a response with status code 204, with default header values.

No content
*/
type InsertPermissionsForActionNoContent struct {
}

// IsSuccess returns true when this insert permissions for action no content response has a 2xx status code
func (o *InsertPermissionsForActionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for action no content response has a 3xx status code
func (o *InsertPermissionsForActionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for action no content response has a 4xx status code
func (o *InsertPermissionsForActionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for action no content response has a 5xx status code
func (o *InsertPermissionsForActionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for action no content response a status code equal to that given
func (o *InsertPermissionsForActionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the insert permissions for action no content response
func (o *InsertPermissionsForActionNoContent) Code() int {
	return 204
}

func (o *InsertPermissionsForActionNoContent) Error() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionNoContent ", 204)
}

func (o *InsertPermissionsForActionNoContent) String() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionNoContent ", 204)
}

func (o *InsertPermissionsForActionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForActionBadRequest creates a InsertPermissionsForActionBadRequest with default headers values
func NewInsertPermissionsForActionBadRequest() *InsertPermissionsForActionBadRequest {
	return &InsertPermissionsForActionBadRequest{}
}

/*
InsertPermissionsForActionBadRequest describes a response with status code 400, with default header values.

Request is not valid (validation error)
*/
type InsertPermissionsForActionBadRequest struct {
}

// IsSuccess returns true when this insert permissions for action bad request response has a 2xx status code
func (o *InsertPermissionsForActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for action bad request response has a 3xx status code
func (o *InsertPermissionsForActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for action bad request response has a 4xx status code
func (o *InsertPermissionsForActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for action bad request response has a 5xx status code
func (o *InsertPermissionsForActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for action bad request response a status code equal to that given
func (o *InsertPermissionsForActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert permissions for action bad request response
func (o *InsertPermissionsForActionBadRequest) Code() int {
	return 400
}

func (o *InsertPermissionsForActionBadRequest) Error() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionBadRequest ", 400)
}

func (o *InsertPermissionsForActionBadRequest) String() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionBadRequest ", 400)
}

func (o *InsertPermissionsForActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForActionUnauthorized creates a InsertPermissionsForActionUnauthorized with default headers values
func NewInsertPermissionsForActionUnauthorized() *InsertPermissionsForActionUnauthorized {
	return &InsertPermissionsForActionUnauthorized{}
}

/*
InsertPermissionsForActionUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type InsertPermissionsForActionUnauthorized struct {
}

// IsSuccess returns true when this insert permissions for action unauthorized response has a 2xx status code
func (o *InsertPermissionsForActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for action unauthorized response has a 3xx status code
func (o *InsertPermissionsForActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for action unauthorized response has a 4xx status code
func (o *InsertPermissionsForActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for action unauthorized response has a 5xx status code
func (o *InsertPermissionsForActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for action unauthorized response a status code equal to that given
func (o *InsertPermissionsForActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert permissions for action unauthorized response
func (o *InsertPermissionsForActionUnauthorized) Code() int {
	return 401
}

func (o *InsertPermissionsForActionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionUnauthorized ", 401)
}

func (o *InsertPermissionsForActionUnauthorized) String() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionUnauthorized ", 401)
}

func (o *InsertPermissionsForActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForActionNotFound creates a InsertPermissionsForActionNotFound with default headers values
func NewInsertPermissionsForActionNotFound() *InsertPermissionsForActionNotFound {
	return &InsertPermissionsForActionNotFound{}
}

/*
InsertPermissionsForActionNotFound describes a response with status code 404, with default header values.

Can not find an action with the specified id
*/
type InsertPermissionsForActionNotFound struct {
}

// IsSuccess returns true when this insert permissions for action not found response has a 2xx status code
func (o *InsertPermissionsForActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for action not found response has a 3xx status code
func (o *InsertPermissionsForActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for action not found response has a 4xx status code
func (o *InsertPermissionsForActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for action not found response has a 5xx status code
func (o *InsertPermissionsForActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for action not found response a status code equal to that given
func (o *InsertPermissionsForActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the insert permissions for action not found response
func (o *InsertPermissionsForActionNotFound) Code() int {
	return 404
}

func (o *InsertPermissionsForActionNotFound) Error() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionNotFound ", 404)
}

func (o *InsertPermissionsForActionNotFound) String() string {
	return fmt.Sprintf("[POST /actions/{id}/permissions][%d] insertPermissionsForActionNotFound ", 404)
}

func (o *InsertPermissionsForActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
