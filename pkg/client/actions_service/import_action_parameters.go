// Code generated by go-swagger; DO NOT EDIT.

package actions_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImportActionParams creates a new ImportActionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewImportActionParams() *ImportActionParams {
	return &ImportActionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewImportActionParamsWithTimeout creates a new ImportActionParams object
// with the ability to set a timeout on a request.
func NewImportActionParamsWithTimeout(timeout time.Duration) *ImportActionParams {
	return &ImportActionParams{
		timeout: timeout,
	}
}

// NewImportActionParamsWithContext creates a new ImportActionParams object
// with the ability to set a context for a request.
func NewImportActionParamsWithContext(ctx context.Context) *ImportActionParams {
	return &ImportActionParams{
		Context: ctx,
	}
}

// NewImportActionParamsWithHTTPClient creates a new ImportActionParams object
// with the ability to set a custom HTTPClient for a request.
func NewImportActionParamsWithHTTPClient(client *http.Client) *ImportActionParams {
	return &ImportActionParams{
		HTTPClient: client,
	}
}

/*
ImportActionParams contains all the parameters to send to the API endpoint

	for the import action operation.

	Typically these are written to a http.Request.
*/
type ImportActionParams struct {

	// CategoryName.
	CategoryName string

	// File.
	File runtime.NamedReadCloser

	// Overwrite.
	Overwrite *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the import action params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportActionParams) WithDefaults() *ImportActionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the import action params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportActionParams) SetDefaults() {
	var (
		overwriteDefault = bool(false)
	)

	val := ImportActionParams{
		Overwrite: &overwriteDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the import action params
func (o *ImportActionParams) WithTimeout(timeout time.Duration) *ImportActionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import action params
func (o *ImportActionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import action params
func (o *ImportActionParams) WithContext(ctx context.Context) *ImportActionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import action params
func (o *ImportActionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import action params
func (o *ImportActionParams) WithHTTPClient(client *http.Client) *ImportActionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import action params
func (o *ImportActionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategoryName adds the categoryName to the import action params
func (o *ImportActionParams) WithCategoryName(categoryName string) *ImportActionParams {
	o.SetCategoryName(categoryName)
	return o
}

// SetCategoryName adds the categoryName to the import action params
func (o *ImportActionParams) SetCategoryName(categoryName string) {
	o.CategoryName = categoryName
}

// WithFile adds the file to the import action params
func (o *ImportActionParams) WithFile(file runtime.NamedReadCloser) *ImportActionParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the import action params
func (o *ImportActionParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithOverwrite adds the overwrite to the import action params
func (o *ImportActionParams) WithOverwrite(overwrite *bool) *ImportActionParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the import action params
func (o *ImportActionParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WriteToRequest writes these params to a swagger request
func (o *ImportActionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param categoryName
	qrCategoryName := o.CategoryName
	qCategoryName := qrCategoryName
	if qCategoryName != "" {

		if err := r.SetQueryParam("categoryName", qCategoryName); err != nil {
			return err
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool

		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {

			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
