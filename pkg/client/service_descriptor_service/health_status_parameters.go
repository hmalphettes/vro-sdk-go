// Code generated by go-swagger; DO NOT EDIT.

package service_descriptor_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHealthStatusParams creates a new HealthStatusParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHealthStatusParams() *HealthStatusParams {
	return &HealthStatusParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHealthStatusParamsWithTimeout creates a new HealthStatusParams object
// with the ability to set a timeout on a request.
func NewHealthStatusParamsWithTimeout(timeout time.Duration) *HealthStatusParams {
	return &HealthStatusParams{
		timeout: timeout,
	}
}

// NewHealthStatusParamsWithContext creates a new HealthStatusParams object
// with the ability to set a context for a request.
func NewHealthStatusParamsWithContext(ctx context.Context) *HealthStatusParams {
	return &HealthStatusParams{
		Context: ctx,
	}
}

// NewHealthStatusParamsWithHTTPClient creates a new HealthStatusParams object
// with the ability to set a custom HTTPClient for a request.
func NewHealthStatusParamsWithHTTPClient(client *http.Client) *HealthStatusParams {
	return &HealthStatusParams{
		HTTPClient: client,
	}
}

/*
HealthStatusParams contains all the parameters to send to the API endpoint

	for the health status operation.

	Typically these are written to a http.Request.
*/
type HealthStatusParams struct {

	// ShowConfigurationDetails.
	ShowConfigurationDetails *bool

	// ShowDetails.
	ShowDetails *bool

	// StartupProbe.
	StartupProbe *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the health status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HealthStatusParams) WithDefaults() *HealthStatusParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the health status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HealthStatusParams) SetDefaults() {
	var (
		showConfigurationDetailsDefault = bool(false)

		showDetailsDefault = bool(false)

		startupProbeDefault = bool(false)
	)

	val := HealthStatusParams{
		ShowConfigurationDetails: &showConfigurationDetailsDefault,
		ShowDetails:              &showDetailsDefault,
		StartupProbe:             &startupProbeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the health status params
func (o *HealthStatusParams) WithTimeout(timeout time.Duration) *HealthStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the health status params
func (o *HealthStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the health status params
func (o *HealthStatusParams) WithContext(ctx context.Context) *HealthStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the health status params
func (o *HealthStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the health status params
func (o *HealthStatusParams) WithHTTPClient(client *http.Client) *HealthStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the health status params
func (o *HealthStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithShowConfigurationDetails adds the showConfigurationDetails to the health status params
func (o *HealthStatusParams) WithShowConfigurationDetails(showConfigurationDetails *bool) *HealthStatusParams {
	o.SetShowConfigurationDetails(showConfigurationDetails)
	return o
}

// SetShowConfigurationDetails adds the showConfigurationDetails to the health status params
func (o *HealthStatusParams) SetShowConfigurationDetails(showConfigurationDetails *bool) {
	o.ShowConfigurationDetails = showConfigurationDetails
}

// WithShowDetails adds the showDetails to the health status params
func (o *HealthStatusParams) WithShowDetails(showDetails *bool) *HealthStatusParams {
	o.SetShowDetails(showDetails)
	return o
}

// SetShowDetails adds the showDetails to the health status params
func (o *HealthStatusParams) SetShowDetails(showDetails *bool) {
	o.ShowDetails = showDetails
}

// WithStartupProbe adds the startupProbe to the health status params
func (o *HealthStatusParams) WithStartupProbe(startupProbe *bool) *HealthStatusParams {
	o.SetStartupProbe(startupProbe)
	return o
}

// SetStartupProbe adds the startupProbe to the health status params
func (o *HealthStatusParams) SetStartupProbe(startupProbe *bool) {
	o.StartupProbe = startupProbe
}

// WriteToRequest writes these params to a swagger request
func (o *HealthStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ShowConfigurationDetails != nil {

		// query param showConfigurationDetails
		var qrShowConfigurationDetails bool

		if o.ShowConfigurationDetails != nil {
			qrShowConfigurationDetails = *o.ShowConfigurationDetails
		}
		qShowConfigurationDetails := swag.FormatBool(qrShowConfigurationDetails)
		if qShowConfigurationDetails != "" {

			if err := r.SetQueryParam("showConfigurationDetails", qShowConfigurationDetails); err != nil {
				return err
			}
		}
	}

	if o.ShowDetails != nil {

		// query param showDetails
		var qrShowDetails bool

		if o.ShowDetails != nil {
			qrShowDetails = *o.ShowDetails
		}
		qShowDetails := swag.FormatBool(qrShowDetails)
		if qShowDetails != "" {

			if err := r.SetQueryParam("showDetails", qShowDetails); err != nil {
				return err
			}
		}
	}

	if o.StartupProbe != nil {

		// query param startupProbe
		var qrStartupProbe bool

		if o.StartupProbe != nil {
			qrStartupProbe = *o.StartupProbe
		}
		qStartupProbe := swag.FormatBool(qrStartupProbe)
		if qStartupProbe != "" {

			if err := r.SetQueryParam("startupProbe", qStartupProbe); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
