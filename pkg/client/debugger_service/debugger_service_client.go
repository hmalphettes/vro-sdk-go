// Code generated by go-swagger; DO NOT EDIT.

package debugger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new debugger service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for debugger service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeSlotEntry(params *ChangeSlotEntryParams, opts ...ClientOption) (*ChangeSlotEntryOK, error)

	EvalScript(params *EvalScriptParams, opts ...ClientOption) (*EvalScriptOK, error)

	GetDebuggerEnabled(params *GetDebuggerEnabledParams, opts ...ClientOption) (*GetDebuggerEnabledOK, error)

	GetScriptSlotEntries(params *GetScriptSlotEntriesParams, opts ...ClientOption) (*GetScriptSlotEntriesOK, error)

	GetWorkflowBreakpoints(params *GetWorkflowBreakpointsParams, opts ...ClientOption) (*GetWorkflowBreakpointsOK, error)

	GetWorkflowDebugLocation(params *GetWorkflowDebugLocationParams, opts ...ClientOption) (*GetWorkflowDebugLocationOK, error)

	GetWorkflowDebuggerEnabled(params *GetWorkflowDebuggerEnabledParams, opts ...ClientOption) (*GetWorkflowDebuggerEnabledOK, error)

	RemoveAllWorkflowBreakpoints(params *RemoveAllWorkflowBreakpointsParams, opts ...ClientOption) (*RemoveAllWorkflowBreakpointsOK, error)

	ResumeWorkflow(params *ResumeWorkflowParams, opts ...ClientOption) (*ResumeWorkflowOK, error)

	SetDebuggerEnabled(params *SetDebuggerEnabledParams, opts ...ClientOption) (*SetDebuggerEnabledOK, error)

	SetWorkflowBreakpoint(params *SetWorkflowBreakpointParams, opts ...ClientOption) (*SetWorkflowBreakpointOK, error)

	SetWorkflowBreakpoints(params *SetWorkflowBreakpointsParams, opts ...ClientOption) (*SetWorkflowBreakpointsOK, error)

	StepIntoWorkflow(params *StepIntoWorkflowParams, opts ...ClientOption) (*StepIntoWorkflowOK, error)

	StepOverWorkflow(params *StepOverWorkflowParams, opts ...ClientOption) (*StepOverWorkflowOK, error)

	StepReturnWorkflow(params *StepReturnWorkflowParams, opts ...ClientOption) (*StepReturnWorkflowOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ChangeSlotEntry sets multiple workflow breakpoints

Sets multiple breakpoints for a workflow
*/
func (a *Client) ChangeSlotEntry(params *ChangeSlotEntryParams, opts ...ClientOption) (*ChangeSlotEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeSlotEntryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeSlotEntry",
		Method:             "POST",
		PathPattern:        "/debugger/{executionId}/newValue",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeSlotEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeSlotEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeSlotEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EvalScript evaluates script

Evaluate a script on the current debug location of the workflow execution.
*/
func (a *Client) EvalScript(params *EvalScriptParams, opts ...ClientOption) (*EvalScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEvalScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "evalScript",
		Method:             "POST",
		PathPattern:        "/debugger/{executionId}/eval",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EvalScriptReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EvalScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for evalScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDebuggerEnabled gets global debugger state

Retrieves the current global debugger state
*/
func (a *Client) GetDebuggerEnabled(params *GetDebuggerEnabledParams, opts ...ClientOption) (*GetDebuggerEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebuggerEnabledParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDebuggerEnabled",
		Method:             "GET",
		PathPattern:        "/debugger/enabled",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDebuggerEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDebuggerEnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDebuggerEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScriptSlotEntries currents variables

Retrieve the variables in the current debug location of the workflow execution.
*/
func (a *Client) GetScriptSlotEntries(params *GetScriptSlotEntriesParams, opts ...ClientOption) (*GetScriptSlotEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScriptSlotEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getScriptSlotEntries",
		Method:             "GET",
		PathPattern:        "/debugger/{executionId}/slots",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScriptSlotEntriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScriptSlotEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScriptSlotEntries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowBreakpoints gets workflow breakpoints

Retrieves the breakpoints for a workflow
*/
func (a *Client) GetWorkflowBreakpoints(params *GetWorkflowBreakpointsParams, opts ...ClientOption) (*GetWorkflowBreakpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowBreakpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowBreakpoints",
		Method:             "GET",
		PathPattern:        "/debugger/{workflowId}/breakpoints",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowBreakpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowBreakpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowBreakpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowDebugLocation gets workflow debugger location

Retrieves the current debugger location for a requested workflow run
*/
func (a *Client) GetWorkflowDebugLocation(params *GetWorkflowDebugLocationParams, opts ...ClientOption) (*GetWorkflowDebugLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowDebugLocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowDebugLocation",
		Method:             "GET",
		PathPattern:        "/debugger/{executionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowDebugLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowDebugLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowDebugLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowDebuggerEnabled gets debug mode for a specific execution

Retrieves the debugger mode for a requested workflow run
*/
func (a *Client) GetWorkflowDebuggerEnabled(params *GetWorkflowDebuggerEnabledParams, opts ...ClientOption) (*GetWorkflowDebuggerEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowDebuggerEnabledParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowDebuggerEnabled",
		Method:             "GET",
		PathPattern:        "/debugger/{executionId}/enabled",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowDebuggerEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowDebuggerEnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowDebuggerEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveAllWorkflowBreakpoints removes all breakpoints for a workflow

Removes all set breakpoints for a workflow
*/
func (a *Client) RemoveAllWorkflowBreakpoints(params *RemoveAllWorkflowBreakpointsParams, opts ...ClientOption) (*RemoveAllWorkflowBreakpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAllWorkflowBreakpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeAllWorkflowBreakpoints",
		Method:             "DELETE",
		PathPattern:        "/debugger/{workflowId}/breakpoints",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveAllWorkflowBreakpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveAllWorkflowBreakpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeAllWorkflowBreakpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeWorkflow resumes

Resumes the workflow execution
*/
func (a *Client) ResumeWorkflow(params *ResumeWorkflowParams, opts ...ClientOption) (*ResumeWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeWorkflow",
		Method:             "POST",
		PathPattern:        "/debugger/{executionId}/resume",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResumeWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetDebuggerEnabled sets the global debugger state

Sets the global debugger state
*/
func (a *Client) SetDebuggerEnabled(params *SetDebuggerEnabledParams, opts ...ClientOption) (*SetDebuggerEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDebuggerEnabledParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setDebuggerEnabled",
		Method:             "POST",
		PathPattern:        "/debugger/enabled",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDebuggerEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDebuggerEnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setDebuggerEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetWorkflowBreakpoint sets workflow breakpoint

Sets a single breakpoint for a workflow
*/
func (a *Client) SetWorkflowBreakpoint(params *SetWorkflowBreakpointParams, opts ...ClientOption) (*SetWorkflowBreakpointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkflowBreakpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setWorkflowBreakpoint",
		Method:             "POST",
		PathPattern:        "/debugger/{workflowId}/breakpoint",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetWorkflowBreakpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkflowBreakpointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setWorkflowBreakpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetWorkflowBreakpoints sets multiple workflow breakpoints

Sets multiple breakpoints for a workflow
*/
func (a *Client) SetWorkflowBreakpoints(params *SetWorkflowBreakpointsParams, opts ...ClientOption) (*SetWorkflowBreakpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetWorkflowBreakpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setWorkflowBreakpoints",
		Method:             "POST",
		PathPattern:        "/debugger/{workflowId}/breakpoints",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetWorkflowBreakpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetWorkflowBreakpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setWorkflowBreakpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepIntoWorkflow steps into

Step into the workflow execution
*/
func (a *Client) StepIntoWorkflow(params *StepIntoWorkflowParams, opts ...ClientOption) (*StepIntoWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepIntoWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stepIntoWorkflow",
		Method:             "POST",
		PathPattern:        "/debugger/{executionId}/stepInto",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepIntoWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepIntoWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stepIntoWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepOverWorkflow steps over

Step over the workflow execution. Moves the debugger to the next item.
*/
func (a *Client) StepOverWorkflow(params *StepOverWorkflowParams, opts ...ClientOption) (*StepOverWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepOverWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stepOverWorkflow",
		Method:             "POST",
		PathPattern:        "/debugger/{executionId}/stepOver",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepOverWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepOverWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stepOverWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StepReturnWorkflow steps return

StepReturn the workflow execution
*/
func (a *Client) StepReturnWorkflow(params *StepReturnWorkflowParams, opts ...ClientOption) (*StepReturnWorkflowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStepReturnWorkflowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stepReturnWorkflow",
		Method:             "POST",
		PathPattern:        "/debugger/{executionId}/stepReturn",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StepReturnWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StepReturnWorkflowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stepReturnWorkflow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
