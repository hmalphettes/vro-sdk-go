// Code generated by go-swagger; DO NOT EDIT.

package debugger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StepOverWorkflowReader is a Reader for the StepOverWorkflow structure.
type StepOverWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StepOverWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStepOverWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStepOverWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStepOverWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /debugger/{executionId}/stepOver] stepOverWorkflow", response, response.Code())
	}
}

// NewStepOverWorkflowOK creates a StepOverWorkflowOK with default headers values
func NewStepOverWorkflowOK() *StepOverWorkflowOK {
	return &StepOverWorkflowOK{}
}

/*
StepOverWorkflowOK describes a response with status code 200, with default header values.

The request is successful
*/
type StepOverWorkflowOK struct {
}

// IsSuccess returns true when this step over workflow o k response has a 2xx status code
func (o *StepOverWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this step over workflow o k response has a 3xx status code
func (o *StepOverWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this step over workflow o k response has a 4xx status code
func (o *StepOverWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this step over workflow o k response has a 5xx status code
func (o *StepOverWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this step over workflow o k response a status code equal to that given
func (o *StepOverWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the step over workflow o k response
func (o *StepOverWorkflowOK) Code() int {
	return 200
}

func (o *StepOverWorkflowOK) Error() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/stepOver][%d] stepOverWorkflowOK ", 200)
}

func (o *StepOverWorkflowOK) String() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/stepOver][%d] stepOverWorkflowOK ", 200)
}

func (o *StepOverWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStepOverWorkflowUnauthorized creates a StepOverWorkflowUnauthorized with default headers values
func NewStepOverWorkflowUnauthorized() *StepOverWorkflowUnauthorized {
	return &StepOverWorkflowUnauthorized{}
}

/*
StepOverWorkflowUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type StepOverWorkflowUnauthorized struct {
}

// IsSuccess returns true when this step over workflow unauthorized response has a 2xx status code
func (o *StepOverWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this step over workflow unauthorized response has a 3xx status code
func (o *StepOverWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this step over workflow unauthorized response has a 4xx status code
func (o *StepOverWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this step over workflow unauthorized response has a 5xx status code
func (o *StepOverWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this step over workflow unauthorized response a status code equal to that given
func (o *StepOverWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the step over workflow unauthorized response
func (o *StepOverWorkflowUnauthorized) Code() int {
	return 401
}

func (o *StepOverWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/stepOver][%d] stepOverWorkflowUnauthorized ", 401)
}

func (o *StepOverWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/stepOver][%d] stepOverWorkflowUnauthorized ", 401)
}

func (o *StepOverWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStepOverWorkflowNotFound creates a StepOverWorkflowNotFound with default headers values
func NewStepOverWorkflowNotFound() *StepOverWorkflowNotFound {
	return &StepOverWorkflowNotFound{}
}

/*
StepOverWorkflowNotFound describes a response with status code 404, with default header values.

Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow
*/
type StepOverWorkflowNotFound struct {
}

// IsSuccess returns true when this step over workflow not found response has a 2xx status code
func (o *StepOverWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this step over workflow not found response has a 3xx status code
func (o *StepOverWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this step over workflow not found response has a 4xx status code
func (o *StepOverWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this step over workflow not found response has a 5xx status code
func (o *StepOverWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this step over workflow not found response a status code equal to that given
func (o *StepOverWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the step over workflow not found response
func (o *StepOverWorkflowNotFound) Code() int {
	return 404
}

func (o *StepOverWorkflowNotFound) Error() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/stepOver][%d] stepOverWorkflowNotFound ", 404)
}

func (o *StepOverWorkflowNotFound) String() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/stepOver][%d] stepOverWorkflowNotFound ", 404)
}

func (o *StepOverWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
