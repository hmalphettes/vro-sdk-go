// Code generated by go-swagger; DO NOT EDIT.

package debugger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// SetDebuggerEnabledReader is a Reader for the SetDebuggerEnabled structure.
type SetDebuggerEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetDebuggerEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetDebuggerEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSetDebuggerEnabledUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetDebuggerEnabledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /debugger/enabled] setDebuggerEnabled", response, response.Code())
	}
}

// NewSetDebuggerEnabledOK creates a SetDebuggerEnabledOK with default headers values
func NewSetDebuggerEnabledOK() *SetDebuggerEnabledOK {
	return &SetDebuggerEnabledOK{}
}

/*
SetDebuggerEnabledOK describes a response with status code 200, with default header values.

The request is successful
*/
type SetDebuggerEnabledOK struct {
}

// IsSuccess returns true when this set debugger enabled o k response has a 2xx status code
func (o *SetDebuggerEnabledOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set debugger enabled o k response has a 3xx status code
func (o *SetDebuggerEnabledOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set debugger enabled o k response has a 4xx status code
func (o *SetDebuggerEnabledOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set debugger enabled o k response has a 5xx status code
func (o *SetDebuggerEnabledOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set debugger enabled o k response a status code equal to that given
func (o *SetDebuggerEnabledOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set debugger enabled o k response
func (o *SetDebuggerEnabledOK) Code() int {
	return 200
}

func (o *SetDebuggerEnabledOK) Error() string {
	return fmt.Sprintf("[POST /debugger/enabled][%d] setDebuggerEnabledOK ", 200)
}

func (o *SetDebuggerEnabledOK) String() string {
	return fmt.Sprintf("[POST /debugger/enabled][%d] setDebuggerEnabledOK ", 200)
}

func (o *SetDebuggerEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetDebuggerEnabledUnauthorized creates a SetDebuggerEnabledUnauthorized with default headers values
func NewSetDebuggerEnabledUnauthorized() *SetDebuggerEnabledUnauthorized {
	return &SetDebuggerEnabledUnauthorized{}
}

/*
SetDebuggerEnabledUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type SetDebuggerEnabledUnauthorized struct {
}

// IsSuccess returns true when this set debugger enabled unauthorized response has a 2xx status code
func (o *SetDebuggerEnabledUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set debugger enabled unauthorized response has a 3xx status code
func (o *SetDebuggerEnabledUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set debugger enabled unauthorized response has a 4xx status code
func (o *SetDebuggerEnabledUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set debugger enabled unauthorized response has a 5xx status code
func (o *SetDebuggerEnabledUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set debugger enabled unauthorized response a status code equal to that given
func (o *SetDebuggerEnabledUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set debugger enabled unauthorized response
func (o *SetDebuggerEnabledUnauthorized) Code() int {
	return 401
}

func (o *SetDebuggerEnabledUnauthorized) Error() string {
	return fmt.Sprintf("[POST /debugger/enabled][%d] setDebuggerEnabledUnauthorized ", 401)
}

func (o *SetDebuggerEnabledUnauthorized) String() string {
	return fmt.Sprintf("[POST /debugger/enabled][%d] setDebuggerEnabledUnauthorized ", 401)
}

func (o *SetDebuggerEnabledUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetDebuggerEnabledNotFound creates a SetDebuggerEnabledNotFound with default headers values
func NewSetDebuggerEnabledNotFound() *SetDebuggerEnabledNotFound {
	return &SetDebuggerEnabledNotFound{}
}

/*
SetDebuggerEnabledNotFound describes a response with status code 404, with default header values.

Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow
*/
type SetDebuggerEnabledNotFound struct {
}

// IsSuccess returns true when this set debugger enabled not found response has a 2xx status code
func (o *SetDebuggerEnabledNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set debugger enabled not found response has a 3xx status code
func (o *SetDebuggerEnabledNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set debugger enabled not found response has a 4xx status code
func (o *SetDebuggerEnabledNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set debugger enabled not found response has a 5xx status code
func (o *SetDebuggerEnabledNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set debugger enabled not found response a status code equal to that given
func (o *SetDebuggerEnabledNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set debugger enabled not found response
func (o *SetDebuggerEnabledNotFound) Code() int {
	return 404
}

func (o *SetDebuggerEnabledNotFound) Error() string {
	return fmt.Sprintf("[POST /debugger/enabled][%d] setDebuggerEnabledNotFound ", 404)
}

func (o *SetDebuggerEnabledNotFound) String() string {
	return fmt.Sprintf("[POST /debugger/enabled][%d] setDebuggerEnabledNotFound ", 404)
}

func (o *SetDebuggerEnabledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
