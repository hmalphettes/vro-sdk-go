// Code generated by go-swagger; DO NOT EDIT.

package debugger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetWorkflowDebuggerEnabledReader is a Reader for the GetWorkflowDebuggerEnabled structure.
type GetWorkflowDebuggerEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowDebuggerEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowDebuggerEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkflowDebuggerEnabledUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowDebuggerEnabledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /debugger/{executionId}/enabled] getWorkflowDebuggerEnabled", response, response.Code())
	}
}

// NewGetWorkflowDebuggerEnabledOK creates a GetWorkflowDebuggerEnabledOK with default headers values
func NewGetWorkflowDebuggerEnabledOK() *GetWorkflowDebuggerEnabledOK {
	return &GetWorkflowDebuggerEnabledOK{}
}

/*
GetWorkflowDebuggerEnabledOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetWorkflowDebuggerEnabledOK struct {
	Payload bool
}

// IsSuccess returns true when this get workflow debugger enabled o k response has a 2xx status code
func (o *GetWorkflowDebuggerEnabledOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflow debugger enabled o k response has a 3xx status code
func (o *GetWorkflowDebuggerEnabledOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow debugger enabled o k response has a 4xx status code
func (o *GetWorkflowDebuggerEnabledOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow debugger enabled o k response has a 5xx status code
func (o *GetWorkflowDebuggerEnabledOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow debugger enabled o k response a status code equal to that given
func (o *GetWorkflowDebuggerEnabledOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflow debugger enabled o k response
func (o *GetWorkflowDebuggerEnabledOK) Code() int {
	return 200
}

func (o *GetWorkflowDebuggerEnabledOK) Error() string {
	return fmt.Sprintf("[GET /debugger/{executionId}/enabled][%d] getWorkflowDebuggerEnabledOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowDebuggerEnabledOK) String() string {
	return fmt.Sprintf("[GET /debugger/{executionId}/enabled][%d] getWorkflowDebuggerEnabledOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowDebuggerEnabledOK) GetPayload() bool {
	return o.Payload
}

func (o *GetWorkflowDebuggerEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowDebuggerEnabledUnauthorized creates a GetWorkflowDebuggerEnabledUnauthorized with default headers values
func NewGetWorkflowDebuggerEnabledUnauthorized() *GetWorkflowDebuggerEnabledUnauthorized {
	return &GetWorkflowDebuggerEnabledUnauthorized{}
}

/*
GetWorkflowDebuggerEnabledUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type GetWorkflowDebuggerEnabledUnauthorized struct {
}

// IsSuccess returns true when this get workflow debugger enabled unauthorized response has a 2xx status code
func (o *GetWorkflowDebuggerEnabledUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow debugger enabled unauthorized response has a 3xx status code
func (o *GetWorkflowDebuggerEnabledUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow debugger enabled unauthorized response has a 4xx status code
func (o *GetWorkflowDebuggerEnabledUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow debugger enabled unauthorized response has a 5xx status code
func (o *GetWorkflowDebuggerEnabledUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow debugger enabled unauthorized response a status code equal to that given
func (o *GetWorkflowDebuggerEnabledUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workflow debugger enabled unauthorized response
func (o *GetWorkflowDebuggerEnabledUnauthorized) Code() int {
	return 401
}

func (o *GetWorkflowDebuggerEnabledUnauthorized) Error() string {
	return fmt.Sprintf("[GET /debugger/{executionId}/enabled][%d] getWorkflowDebuggerEnabledUnauthorized ", 401)
}

func (o *GetWorkflowDebuggerEnabledUnauthorized) String() string {
	return fmt.Sprintf("[GET /debugger/{executionId}/enabled][%d] getWorkflowDebuggerEnabledUnauthorized ", 401)
}

func (o *GetWorkflowDebuggerEnabledUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowDebuggerEnabledNotFound creates a GetWorkflowDebuggerEnabledNotFound with default headers values
func NewGetWorkflowDebuggerEnabledNotFound() *GetWorkflowDebuggerEnabledNotFound {
	return &GetWorkflowDebuggerEnabledNotFound{}
}

/*
GetWorkflowDebuggerEnabledNotFound describes a response with status code 404, with default header values.

Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow
*/
type GetWorkflowDebuggerEnabledNotFound struct {
}

// IsSuccess returns true when this get workflow debugger enabled not found response has a 2xx status code
func (o *GetWorkflowDebuggerEnabledNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow debugger enabled not found response has a 3xx status code
func (o *GetWorkflowDebuggerEnabledNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow debugger enabled not found response has a 4xx status code
func (o *GetWorkflowDebuggerEnabledNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow debugger enabled not found response has a 5xx status code
func (o *GetWorkflowDebuggerEnabledNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow debugger enabled not found response a status code equal to that given
func (o *GetWorkflowDebuggerEnabledNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflow debugger enabled not found response
func (o *GetWorkflowDebuggerEnabledNotFound) Code() int {
	return 404
}

func (o *GetWorkflowDebuggerEnabledNotFound) Error() string {
	return fmt.Sprintf("[GET /debugger/{executionId}/enabled][%d] getWorkflowDebuggerEnabledNotFound ", 404)
}

func (o *GetWorkflowDebuggerEnabledNotFound) String() string {
	return fmt.Sprintf("[GET /debugger/{executionId}/enabled][%d] getWorkflowDebuggerEnabledNotFound ", 404)
}

func (o *GetWorkflowDebuggerEnabledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
