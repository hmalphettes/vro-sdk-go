// Code generated by go-swagger; DO NOT EDIT.

package debugger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// EvalScriptReader is a Reader for the EvalScript structure.
type EvalScriptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EvalScriptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEvalScriptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEvalScriptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEvalScriptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /debugger/{executionId}/eval] evalScript", response, response.Code())
	}
}

// NewEvalScriptOK creates a EvalScriptOK with default headers values
func NewEvalScriptOK() *EvalScriptOK {
	return &EvalScriptOK{}
}

/*
EvalScriptOK describes a response with status code 200, with default header values.

The request is successful
*/
type EvalScriptOK struct {
	Payload *models.Variables
}

// IsSuccess returns true when this eval script o k response has a 2xx status code
func (o *EvalScriptOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this eval script o k response has a 3xx status code
func (o *EvalScriptOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this eval script o k response has a 4xx status code
func (o *EvalScriptOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this eval script o k response has a 5xx status code
func (o *EvalScriptOK) IsServerError() bool {
	return false
}

// IsCode returns true when this eval script o k response a status code equal to that given
func (o *EvalScriptOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the eval script o k response
func (o *EvalScriptOK) Code() int {
	return 200
}

func (o *EvalScriptOK) Error() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/eval][%d] evalScriptOK  %+v", 200, o.Payload)
}

func (o *EvalScriptOK) String() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/eval][%d] evalScriptOK  %+v", 200, o.Payload)
}

func (o *EvalScriptOK) GetPayload() *models.Variables {
	return o.Payload
}

func (o *EvalScriptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Variables)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEvalScriptUnauthorized creates a EvalScriptUnauthorized with default headers values
func NewEvalScriptUnauthorized() *EvalScriptUnauthorized {
	return &EvalScriptUnauthorized{}
}

/*
EvalScriptUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type EvalScriptUnauthorized struct {
}

// IsSuccess returns true when this eval script unauthorized response has a 2xx status code
func (o *EvalScriptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this eval script unauthorized response has a 3xx status code
func (o *EvalScriptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this eval script unauthorized response has a 4xx status code
func (o *EvalScriptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this eval script unauthorized response has a 5xx status code
func (o *EvalScriptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this eval script unauthorized response a status code equal to that given
func (o *EvalScriptUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the eval script unauthorized response
func (o *EvalScriptUnauthorized) Code() int {
	return 401
}

func (o *EvalScriptUnauthorized) Error() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/eval][%d] evalScriptUnauthorized ", 401)
}

func (o *EvalScriptUnauthorized) String() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/eval][%d] evalScriptUnauthorized ", 401)
}

func (o *EvalScriptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEvalScriptNotFound creates a EvalScriptNotFound with default headers values
func NewEvalScriptNotFound() *EvalScriptNotFound {
	return &EvalScriptNotFound{}
}

/*
EvalScriptNotFound describes a response with status code 404, with default header values.

Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow
*/
type EvalScriptNotFound struct {
}

// IsSuccess returns true when this eval script not found response has a 2xx status code
func (o *EvalScriptNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this eval script not found response has a 3xx status code
func (o *EvalScriptNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this eval script not found response has a 4xx status code
func (o *EvalScriptNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this eval script not found response has a 5xx status code
func (o *EvalScriptNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this eval script not found response a status code equal to that given
func (o *EvalScriptNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the eval script not found response
func (o *EvalScriptNotFound) Code() int {
	return 404
}

func (o *EvalScriptNotFound) Error() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/eval][%d] evalScriptNotFound ", 404)
}

func (o *EvalScriptNotFound) String() string {
	return fmt.Sprintf("[POST /debugger/{executionId}/eval][%d] evalScriptNotFound ", 404)
}

func (o *EvalScriptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
