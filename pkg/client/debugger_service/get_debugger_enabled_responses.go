// Code generated by go-swagger; DO NOT EDIT.

package debugger_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetDebuggerEnabledReader is a Reader for the GetDebuggerEnabled structure.
type GetDebuggerEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDebuggerEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDebuggerEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDebuggerEnabledUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDebuggerEnabledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /debugger/enabled] getDebuggerEnabled", response, response.Code())
	}
}

// NewGetDebuggerEnabledOK creates a GetDebuggerEnabledOK with default headers values
func NewGetDebuggerEnabledOK() *GetDebuggerEnabledOK {
	return &GetDebuggerEnabledOK{}
}

/*
GetDebuggerEnabledOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetDebuggerEnabledOK struct {
	Payload bool
}

// IsSuccess returns true when this get debugger enabled o k response has a 2xx status code
func (o *GetDebuggerEnabledOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get debugger enabled o k response has a 3xx status code
func (o *GetDebuggerEnabledOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get debugger enabled o k response has a 4xx status code
func (o *GetDebuggerEnabledOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get debugger enabled o k response has a 5xx status code
func (o *GetDebuggerEnabledOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get debugger enabled o k response a status code equal to that given
func (o *GetDebuggerEnabledOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get debugger enabled o k response
func (o *GetDebuggerEnabledOK) Code() int {
	return 200
}

func (o *GetDebuggerEnabledOK) Error() string {
	return fmt.Sprintf("[GET /debugger/enabled][%d] getDebuggerEnabledOK  %+v", 200, o.Payload)
}

func (o *GetDebuggerEnabledOK) String() string {
	return fmt.Sprintf("[GET /debugger/enabled][%d] getDebuggerEnabledOK  %+v", 200, o.Payload)
}

func (o *GetDebuggerEnabledOK) GetPayload() bool {
	return o.Payload
}

func (o *GetDebuggerEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDebuggerEnabledUnauthorized creates a GetDebuggerEnabledUnauthorized with default headers values
func NewGetDebuggerEnabledUnauthorized() *GetDebuggerEnabledUnauthorized {
	return &GetDebuggerEnabledUnauthorized{}
}

/*
GetDebuggerEnabledUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type GetDebuggerEnabledUnauthorized struct {
}

// IsSuccess returns true when this get debugger enabled unauthorized response has a 2xx status code
func (o *GetDebuggerEnabledUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get debugger enabled unauthorized response has a 3xx status code
func (o *GetDebuggerEnabledUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get debugger enabled unauthorized response has a 4xx status code
func (o *GetDebuggerEnabledUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get debugger enabled unauthorized response has a 5xx status code
func (o *GetDebuggerEnabledUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get debugger enabled unauthorized response a status code equal to that given
func (o *GetDebuggerEnabledUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get debugger enabled unauthorized response
func (o *GetDebuggerEnabledUnauthorized) Code() int {
	return 401
}

func (o *GetDebuggerEnabledUnauthorized) Error() string {
	return fmt.Sprintf("[GET /debugger/enabled][%d] getDebuggerEnabledUnauthorized ", 401)
}

func (o *GetDebuggerEnabledUnauthorized) String() string {
	return fmt.Sprintf("[GET /debugger/enabled][%d] getDebuggerEnabledUnauthorized ", 401)
}

func (o *GetDebuggerEnabledUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetDebuggerEnabledNotFound creates a GetDebuggerEnabledNotFound with default headers values
func NewGetDebuggerEnabledNotFound() *GetDebuggerEnabledNotFound {
	return &GetDebuggerEnabledNotFound{}
}

/*
GetDebuggerEnabledNotFound describes a response with status code 404, with default header values.

Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow
*/
type GetDebuggerEnabledNotFound struct {
}

// IsSuccess returns true when this get debugger enabled not found response has a 2xx status code
func (o *GetDebuggerEnabledNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get debugger enabled not found response has a 3xx status code
func (o *GetDebuggerEnabledNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get debugger enabled not found response has a 4xx status code
func (o *GetDebuggerEnabledNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get debugger enabled not found response has a 5xx status code
func (o *GetDebuggerEnabledNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get debugger enabled not found response a status code equal to that given
func (o *GetDebuggerEnabledNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get debugger enabled not found response
func (o *GetDebuggerEnabledNotFound) Code() int {
	return 404
}

func (o *GetDebuggerEnabledNotFound) Error() string {
	return fmt.Sprintf("[GET /debugger/enabled][%d] getDebuggerEnabledNotFound ", 404)
}

func (o *GetDebuggerEnabledNotFound) String() string {
	return fmt.Sprintf("[GET /debugger/enabled][%d] getDebuggerEnabledNotFound ", 404)
}

func (o *GetDebuggerEnabledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
