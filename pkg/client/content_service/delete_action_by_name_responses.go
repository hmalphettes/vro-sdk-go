// Code generated by go-swagger; DO NOT EDIT.

package content_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteActionByNameReader is a Reader for the DeleteActionByName structure.
type DeleteActionByNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteActionByNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteActionByNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteActionByNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteActionByNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /content/actions/{actionName}] deleteActionByName", response, response.Code())
	}
}

// NewDeleteActionByNameOK creates a DeleteActionByNameOK with default headers values
func NewDeleteActionByNameOK() *DeleteActionByNameOK {
	return &DeleteActionByNameOK{}
}

/*
DeleteActionByNameOK describes a response with status code 200, with default header values.

The request is successful
*/
type DeleteActionByNameOK struct {
}

// IsSuccess returns true when this delete action by name o k response has a 2xx status code
func (o *DeleteActionByNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete action by name o k response has a 3xx status code
func (o *DeleteActionByNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action by name o k response has a 4xx status code
func (o *DeleteActionByNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete action by name o k response has a 5xx status code
func (o *DeleteActionByNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action by name o k response a status code equal to that given
func (o *DeleteActionByNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete action by name o k response
func (o *DeleteActionByNameOK) Code() int {
	return 200
}

func (o *DeleteActionByNameOK) Error() string {
	return fmt.Sprintf("[DELETE /content/actions/{actionName}][%d] deleteActionByNameOK ", 200)
}

func (o *DeleteActionByNameOK) String() string {
	return fmt.Sprintf("[DELETE /content/actions/{actionName}][%d] deleteActionByNameOK ", 200)
}

func (o *DeleteActionByNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteActionByNameUnauthorized creates a DeleteActionByNameUnauthorized with default headers values
func NewDeleteActionByNameUnauthorized() *DeleteActionByNameUnauthorized {
	return &DeleteActionByNameUnauthorized{}
}

/*
DeleteActionByNameUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type DeleteActionByNameUnauthorized struct {
}

// IsSuccess returns true when this delete action by name unauthorized response has a 2xx status code
func (o *DeleteActionByNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action by name unauthorized response has a 3xx status code
func (o *DeleteActionByNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action by name unauthorized response has a 4xx status code
func (o *DeleteActionByNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action by name unauthorized response has a 5xx status code
func (o *DeleteActionByNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action by name unauthorized response a status code equal to that given
func (o *DeleteActionByNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete action by name unauthorized response
func (o *DeleteActionByNameUnauthorized) Code() int {
	return 401
}

func (o *DeleteActionByNameUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /content/actions/{actionName}][%d] deleteActionByNameUnauthorized ", 401)
}

func (o *DeleteActionByNameUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /content/actions/{actionName}][%d] deleteActionByNameUnauthorized ", 401)
}

func (o *DeleteActionByNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteActionByNameNotFound creates a DeleteActionByNameNotFound with default headers values
func NewDeleteActionByNameNotFound() *DeleteActionByNameNotFound {
	return &DeleteActionByNameNotFound{}
}

/*
DeleteActionByNameNotFound describes a response with status code 404, with default header values.

Cannot find an action with the specified name.
*/
type DeleteActionByNameNotFound struct {
}

// IsSuccess returns true when this delete action by name not found response has a 2xx status code
func (o *DeleteActionByNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action by name not found response has a 3xx status code
func (o *DeleteActionByNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action by name not found response has a 4xx status code
func (o *DeleteActionByNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action by name not found response has a 5xx status code
func (o *DeleteActionByNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action by name not found response a status code equal to that given
func (o *DeleteActionByNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete action by name not found response
func (o *DeleteActionByNameNotFound) Code() int {
	return 404
}

func (o *DeleteActionByNameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /content/actions/{actionName}][%d] deleteActionByNameNotFound ", 404)
}

func (o *DeleteActionByNameNotFound) String() string {
	return fmt.Sprintf("[DELETE /content/actions/{actionName}][%d] deleteActionByNameNotFound ", 404)
}

func (o *DeleteActionByNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
