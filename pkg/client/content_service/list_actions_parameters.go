// Code generated by go-swagger; DO NOT EDIT.

package content_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListActionsParams creates a new ListActionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListActionsParams() *ListActionsParams {
	return &ListActionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListActionsParamsWithTimeout creates a new ListActionsParams object
// with the ability to set a timeout on a request.
func NewListActionsParamsWithTimeout(timeout time.Duration) *ListActionsParams {
	return &ListActionsParams{
		timeout: timeout,
	}
}

// NewListActionsParamsWithContext creates a new ListActionsParams object
// with the ability to set a context for a request.
func NewListActionsParamsWithContext(ctx context.Context) *ListActionsParams {
	return &ListActionsParams{
		Context: ctx,
	}
}

// NewListActionsParamsWithHTTPClient creates a new ListActionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListActionsParamsWithHTTPClient(client *http.Client) *ListActionsParams {
	return &ListActionsParams{
		HTTPClient: client,
	}
}

/*
ListActionsParams contains all the parameters to send to the API endpoint

	for the list actions operation.

	Typically these are written to a http.Request.
*/
type ListActionsParams struct {

	// Conditions.
	Conditions []string

	// Keys.
	Keys []string

	// MaxResult.
	//
	// Format: int32
	// Default: 2147483647
	MaxResult int32

	// QueryCount.
	QueryCount bool

	// SortOrders.
	SortOrders []string

	// StartIndex.
	//
	// Format: int32
	StartIndex int32

	// Tags.
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list actions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListActionsParams) WithDefaults() *ListActionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list actions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListActionsParams) SetDefaults() {
	var (
		maxResultDefault = int32(2.147483647e+09)

		queryCountDefault = bool(false)

		startIndexDefault = int32(0)
	)

	val := ListActionsParams{
		MaxResult:  maxResultDefault,
		QueryCount: queryCountDefault,
		StartIndex: startIndexDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list actions params
func (o *ListActionsParams) WithTimeout(timeout time.Duration) *ListActionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list actions params
func (o *ListActionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list actions params
func (o *ListActionsParams) WithContext(ctx context.Context) *ListActionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list actions params
func (o *ListActionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list actions params
func (o *ListActionsParams) WithHTTPClient(client *http.Client) *ListActionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list actions params
func (o *ListActionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConditions adds the conditions to the list actions params
func (o *ListActionsParams) WithConditions(conditions []string) *ListActionsParams {
	o.SetConditions(conditions)
	return o
}

// SetConditions adds the conditions to the list actions params
func (o *ListActionsParams) SetConditions(conditions []string) {
	o.Conditions = conditions
}

// WithKeys adds the keys to the list actions params
func (o *ListActionsParams) WithKeys(keys []string) *ListActionsParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the list actions params
func (o *ListActionsParams) SetKeys(keys []string) {
	o.Keys = keys
}

// WithMaxResult adds the maxResult to the list actions params
func (o *ListActionsParams) WithMaxResult(maxResult int32) *ListActionsParams {
	o.SetMaxResult(maxResult)
	return o
}

// SetMaxResult adds the maxResult to the list actions params
func (o *ListActionsParams) SetMaxResult(maxResult int32) {
	o.MaxResult = maxResult
}

// WithQueryCount adds the queryCount to the list actions params
func (o *ListActionsParams) WithQueryCount(queryCount bool) *ListActionsParams {
	o.SetQueryCount(queryCount)
	return o
}

// SetQueryCount adds the queryCount to the list actions params
func (o *ListActionsParams) SetQueryCount(queryCount bool) {
	o.QueryCount = queryCount
}

// WithSortOrders adds the sortOrders to the list actions params
func (o *ListActionsParams) WithSortOrders(sortOrders []string) *ListActionsParams {
	o.SetSortOrders(sortOrders)
	return o
}

// SetSortOrders adds the sortOrders to the list actions params
func (o *ListActionsParams) SetSortOrders(sortOrders []string) {
	o.SortOrders = sortOrders
}

// WithStartIndex adds the startIndex to the list actions params
func (o *ListActionsParams) WithStartIndex(startIndex int32) *ListActionsParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the list actions params
func (o *ListActionsParams) SetStartIndex(startIndex int32) {
	o.StartIndex = startIndex
}

// WithTags adds the tags to the list actions params
func (o *ListActionsParams) WithTags(tags []string) *ListActionsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the list actions params
func (o *ListActionsParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *ListActionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Conditions != nil {

		// binding items for conditions
		joinedConditions := o.bindParamConditions(reg)

		// query array param conditions
		if err := r.SetQueryParam("conditions", joinedConditions...); err != nil {
			return err
		}
	}

	if o.Keys != nil {

		// binding items for keys
		joinedKeys := o.bindParamKeys(reg)

		// query array param keys
		if err := r.SetQueryParam("keys", joinedKeys...); err != nil {
			return err
		}
	}

	// query param maxResult
	qrMaxResult := o.MaxResult
	qMaxResult := swag.FormatInt32(qrMaxResult)
	if qMaxResult != "" {

		if err := r.SetQueryParam("maxResult", qMaxResult); err != nil {
			return err
		}
	}

	// query param queryCount
	qrQueryCount := o.QueryCount
	qQueryCount := swag.FormatBool(qrQueryCount)
	if qQueryCount != "" {

		if err := r.SetQueryParam("queryCount", qQueryCount); err != nil {
			return err
		}
	}

	if o.SortOrders != nil {

		// binding items for sortOrders
		joinedSortOrders := o.bindParamSortOrders(reg)

		// query array param sortOrders
		if err := r.SetQueryParam("sortOrders", joinedSortOrders...); err != nil {
			return err
		}
	}

	// query param startIndex
	qrStartIndex := o.StartIndex
	qStartIndex := swag.FormatInt32(qrStartIndex)
	if qStartIndex != "" {

		if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
			return err
		}
	}

	if o.Tags != nil {

		// binding items for tags
		joinedTags := o.bindParamTags(reg)

		// query array param tags
		if err := r.SetQueryParam("tags", joinedTags...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListActions binds the parameter conditions
func (o *ListActionsParams) bindParamConditions(formats strfmt.Registry) []string {
	conditionsIR := o.Conditions

	var conditionsIC []string
	for _, conditionsIIR := range conditionsIR { // explode []string

		conditionsIIV := conditionsIIR // string as string
		conditionsIC = append(conditionsIC, conditionsIIV)
	}

	// items.CollectionFormat: "multi"
	conditionsIS := swag.JoinByFormat(conditionsIC, "multi")

	return conditionsIS
}

// bindParamListActions binds the parameter keys
func (o *ListActionsParams) bindParamKeys(formats strfmt.Registry) []string {
	keysIR := o.Keys

	var keysIC []string
	for _, keysIIR := range keysIR { // explode []string

		keysIIV := keysIIR // string as string
		keysIC = append(keysIC, keysIIV)
	}

	// items.CollectionFormat: "multi"
	keysIS := swag.JoinByFormat(keysIC, "multi")

	return keysIS
}

// bindParamListActions binds the parameter sortOrders
func (o *ListActionsParams) bindParamSortOrders(formats strfmt.Registry) []string {
	sortOrdersIR := o.SortOrders

	var sortOrdersIC []string
	for _, sortOrdersIIR := range sortOrdersIR { // explode []string

		sortOrdersIIV := sortOrdersIIR // string as string
		sortOrdersIC = append(sortOrdersIC, sortOrdersIIV)
	}

	// items.CollectionFormat: "multi"
	sortOrdersIS := swag.JoinByFormat(sortOrdersIC, "multi")

	return sortOrdersIS
}

// bindParamListActions binds the parameter tags
func (o *ListActionsParams) bindParamTags(formats strfmt.Registry) []string {
	tagsIR := o.Tags

	var tagsIC []string
	for _, tagsIIR := range tagsIR { // explode []string

		tagsIIV := tagsIIR // string as string
		tagsIC = append(tagsIC, tagsIIV)
	}

	// items.CollectionFormat: "multi"
	tagsIS := swag.JoinByFormat(tagsIC, "multi")

	return tagsIS
}
