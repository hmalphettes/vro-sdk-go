// Code generated by go-swagger; DO NOT EDIT.

package content_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteContentReader is a Reader for the DeleteContent structure.
type DeleteContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteContentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteContentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /content/workflows/{workflowId}] deleteContent", response, response.Code())
	}
}

// NewDeleteContentOK creates a DeleteContentOK with default headers values
func NewDeleteContentOK() *DeleteContentOK {
	return &DeleteContentOK{}
}

/*
DeleteContentOK describes a response with status code 200, with default header values.

The request is successful
*/
type DeleteContentOK struct {
}

// IsSuccess returns true when this delete content o k response has a 2xx status code
func (o *DeleteContentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete content o k response has a 3xx status code
func (o *DeleteContentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content o k response has a 4xx status code
func (o *DeleteContentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete content o k response has a 5xx status code
func (o *DeleteContentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content o k response a status code equal to that given
func (o *DeleteContentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete content o k response
func (o *DeleteContentOK) Code() int {
	return 200
}

func (o *DeleteContentOK) Error() string {
	return fmt.Sprintf("[DELETE /content/workflows/{workflowId}][%d] deleteContentOK ", 200)
}

func (o *DeleteContentOK) String() string {
	return fmt.Sprintf("[DELETE /content/workflows/{workflowId}][%d] deleteContentOK ", 200)
}

func (o *DeleteContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentUnauthorized creates a DeleteContentUnauthorized with default headers values
func NewDeleteContentUnauthorized() *DeleteContentUnauthorized {
	return &DeleteContentUnauthorized{}
}

/*
DeleteContentUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type DeleteContentUnauthorized struct {
}

// IsSuccess returns true when this delete content unauthorized response has a 2xx status code
func (o *DeleteContentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content unauthorized response has a 3xx status code
func (o *DeleteContentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content unauthorized response has a 4xx status code
func (o *DeleteContentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content unauthorized response has a 5xx status code
func (o *DeleteContentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content unauthorized response a status code equal to that given
func (o *DeleteContentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete content unauthorized response
func (o *DeleteContentUnauthorized) Code() int {
	return 401
}

func (o *DeleteContentUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /content/workflows/{workflowId}][%d] deleteContentUnauthorized ", 401)
}

func (o *DeleteContentUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /content/workflows/{workflowId}][%d] deleteContentUnauthorized ", 401)
}

func (o *DeleteContentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContentNotFound creates a DeleteContentNotFound with default headers values
func NewDeleteContentNotFound() *DeleteContentNotFound {
	return &DeleteContentNotFound{}
}

/*
DeleteContentNotFound describes a response with status code 404, with default header values.

Cannot find a workflow with the specified ID.
*/
type DeleteContentNotFound struct {
}

// IsSuccess returns true when this delete content not found response has a 2xx status code
func (o *DeleteContentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete content not found response has a 3xx status code
func (o *DeleteContentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete content not found response has a 4xx status code
func (o *DeleteContentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete content not found response has a 5xx status code
func (o *DeleteContentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete content not found response a status code equal to that given
func (o *DeleteContentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete content not found response
func (o *DeleteContentNotFound) Code() int {
	return 404
}

func (o *DeleteContentNotFound) Error() string {
	return fmt.Sprintf("[DELETE /content/workflows/{workflowId}][%d] deleteContentNotFound ", 404)
}

func (o *DeleteContentNotFound) String() string {
	return fmt.Sprintf("[DELETE /content/workflows/{workflowId}][%d] deleteContentNotFound ", 404)
}

func (o *DeleteContentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
