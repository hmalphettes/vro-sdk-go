// Code generated by go-swagger; DO NOT EDIT.

package content_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteActionByNameParams creates a new DeleteActionByNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteActionByNameParams() *DeleteActionByNameParams {
	return &DeleteActionByNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteActionByNameParamsWithTimeout creates a new DeleteActionByNameParams object
// with the ability to set a timeout on a request.
func NewDeleteActionByNameParamsWithTimeout(timeout time.Duration) *DeleteActionByNameParams {
	return &DeleteActionByNameParams{
		timeout: timeout,
	}
}

// NewDeleteActionByNameParamsWithContext creates a new DeleteActionByNameParams object
// with the ability to set a context for a request.
func NewDeleteActionByNameParamsWithContext(ctx context.Context) *DeleteActionByNameParams {
	return &DeleteActionByNameParams{
		Context: ctx,
	}
}

// NewDeleteActionByNameParamsWithHTTPClient creates a new DeleteActionByNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteActionByNameParamsWithHTTPClient(client *http.Client) *DeleteActionByNameParams {
	return &DeleteActionByNameParams{
		HTTPClient: client,
	}
}

/*
DeleteActionByNameParams contains all the parameters to send to the API endpoint

	for the delete action by name operation.

	Typically these are written to a http.Request.
*/
type DeleteActionByNameParams struct {

	// ActionName.
	ActionName string

	// Force.
	Force *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete action by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteActionByNameParams) WithDefaults() *DeleteActionByNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete action by name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteActionByNameParams) SetDefaults() {
	var (
		forceDefault = bool(false)
	)

	val := DeleteActionByNameParams{
		Force: &forceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete action by name params
func (o *DeleteActionByNameParams) WithTimeout(timeout time.Duration) *DeleteActionByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete action by name params
func (o *DeleteActionByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete action by name params
func (o *DeleteActionByNameParams) WithContext(ctx context.Context) *DeleteActionByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete action by name params
func (o *DeleteActionByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete action by name params
func (o *DeleteActionByNameParams) WithHTTPClient(client *http.Client) *DeleteActionByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete action by name params
func (o *DeleteActionByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionName adds the actionName to the delete action by name params
func (o *DeleteActionByNameParams) WithActionName(actionName string) *DeleteActionByNameParams {
	o.SetActionName(actionName)
	return o
}

// SetActionName adds the actionName to the delete action by name params
func (o *DeleteActionByNameParams) SetActionName(actionName string) {
	o.ActionName = actionName
}

// WithForce adds the force to the delete action by name params
func (o *DeleteActionByNameParams) WithForce(force *bool) *DeleteActionByNameParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the delete action by name params
func (o *DeleteActionByNameParams) SetForce(force *bool) {
	o.Force = force
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteActionByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param actionName
	if err := r.SetPathParam("actionName", o.ActionName); err != nil {
		return err
	}

	if o.Force != nil {

		// query param force
		var qrForce bool

		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {

			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
