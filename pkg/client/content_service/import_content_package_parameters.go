// Code generated by go-swagger; DO NOT EDIT.

package content_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImportContentPackageParams creates a new ImportContentPackageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewImportContentPackageParams() *ImportContentPackageParams {
	return &ImportContentPackageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewImportContentPackageParamsWithTimeout creates a new ImportContentPackageParams object
// with the ability to set a timeout on a request.
func NewImportContentPackageParamsWithTimeout(timeout time.Duration) *ImportContentPackageParams {
	return &ImportContentPackageParams{
		timeout: timeout,
	}
}

// NewImportContentPackageParamsWithContext creates a new ImportContentPackageParams object
// with the ability to set a context for a request.
func NewImportContentPackageParamsWithContext(ctx context.Context) *ImportContentPackageParams {
	return &ImportContentPackageParams{
		Context: ctx,
	}
}

// NewImportContentPackageParamsWithHTTPClient creates a new ImportContentPackageParams object
// with the ability to set a custom HTTPClient for a request.
func NewImportContentPackageParamsWithHTTPClient(client *http.Client) *ImportContentPackageParams {
	return &ImportContentPackageParams{
		HTTPClient: client,
	}
}

/*
ImportContentPackageParams contains all the parameters to send to the API endpoint

	for the import content package operation.

	Typically these are written to a http.Request.
*/
type ImportContentPackageParams struct {

	// File.
	File runtime.NamedReadCloser

	// ImportConfigSecureStringAttributeValues.
	ImportConfigSecureStringAttributeValues *bool

	// ImportConfigurationAttributeValues.
	//
	// Default: true
	ImportConfigurationAttributeValues *bool

	// Overwrite.
	Overwrite *bool

	// TagImportMode.
	//
	// Default: "ImportButPreserveExistingValue"
	TagImportMode *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the import content package params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportContentPackageParams) WithDefaults() *ImportContentPackageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the import content package params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportContentPackageParams) SetDefaults() {
	var (
		importConfigSecureStringAttributeValuesDefault = bool(false)

		importConfigurationAttributeValuesDefault = bool(true)

		overwriteDefault = bool(false)

		tagImportModeDefault = string("ImportButPreserveExistingValue")
	)

	val := ImportContentPackageParams{
		ImportConfigSecureStringAttributeValues: &importConfigSecureStringAttributeValuesDefault,
		ImportConfigurationAttributeValues:      &importConfigurationAttributeValuesDefault,
		Overwrite:                               &overwriteDefault,
		TagImportMode:                           &tagImportModeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the import content package params
func (o *ImportContentPackageParams) WithTimeout(timeout time.Duration) *ImportContentPackageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import content package params
func (o *ImportContentPackageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import content package params
func (o *ImportContentPackageParams) WithContext(ctx context.Context) *ImportContentPackageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import content package params
func (o *ImportContentPackageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import content package params
func (o *ImportContentPackageParams) WithHTTPClient(client *http.Client) *ImportContentPackageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import content package params
func (o *ImportContentPackageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the import content package params
func (o *ImportContentPackageParams) WithFile(file runtime.NamedReadCloser) *ImportContentPackageParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the import content package params
func (o *ImportContentPackageParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithImportConfigSecureStringAttributeValues adds the importConfigSecureStringAttributeValues to the import content package params
func (o *ImportContentPackageParams) WithImportConfigSecureStringAttributeValues(importConfigSecureStringAttributeValues *bool) *ImportContentPackageParams {
	o.SetImportConfigSecureStringAttributeValues(importConfigSecureStringAttributeValues)
	return o
}

// SetImportConfigSecureStringAttributeValues adds the importConfigSecureStringAttributeValues to the import content package params
func (o *ImportContentPackageParams) SetImportConfigSecureStringAttributeValues(importConfigSecureStringAttributeValues *bool) {
	o.ImportConfigSecureStringAttributeValues = importConfigSecureStringAttributeValues
}

// WithImportConfigurationAttributeValues adds the importConfigurationAttributeValues to the import content package params
func (o *ImportContentPackageParams) WithImportConfigurationAttributeValues(importConfigurationAttributeValues *bool) *ImportContentPackageParams {
	o.SetImportConfigurationAttributeValues(importConfigurationAttributeValues)
	return o
}

// SetImportConfigurationAttributeValues adds the importConfigurationAttributeValues to the import content package params
func (o *ImportContentPackageParams) SetImportConfigurationAttributeValues(importConfigurationAttributeValues *bool) {
	o.ImportConfigurationAttributeValues = importConfigurationAttributeValues
}

// WithOverwrite adds the overwrite to the import content package params
func (o *ImportContentPackageParams) WithOverwrite(overwrite *bool) *ImportContentPackageParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the import content package params
func (o *ImportContentPackageParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WithTagImportMode adds the tagImportMode to the import content package params
func (o *ImportContentPackageParams) WithTagImportMode(tagImportMode *string) *ImportContentPackageParams {
	o.SetTagImportMode(tagImportMode)
	return o
}

// SetTagImportMode adds the tagImportMode to the import content package params
func (o *ImportContentPackageParams) SetTagImportMode(tagImportMode *string) {
	o.TagImportMode = tagImportMode
}

// WriteToRequest writes these params to a swagger request
func (o *ImportContentPackageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.ImportConfigSecureStringAttributeValues != nil {

		// query param importConfigSecureStringAttributeValues
		var qrImportConfigSecureStringAttributeValues bool

		if o.ImportConfigSecureStringAttributeValues != nil {
			qrImportConfigSecureStringAttributeValues = *o.ImportConfigSecureStringAttributeValues
		}
		qImportConfigSecureStringAttributeValues := swag.FormatBool(qrImportConfigSecureStringAttributeValues)
		if qImportConfigSecureStringAttributeValues != "" {

			if err := r.SetQueryParam("importConfigSecureStringAttributeValues", qImportConfigSecureStringAttributeValues); err != nil {
				return err
			}
		}
	}

	if o.ImportConfigurationAttributeValues != nil {

		// query param importConfigurationAttributeValues
		var qrImportConfigurationAttributeValues bool

		if o.ImportConfigurationAttributeValues != nil {
			qrImportConfigurationAttributeValues = *o.ImportConfigurationAttributeValues
		}
		qImportConfigurationAttributeValues := swag.FormatBool(qrImportConfigurationAttributeValues)
		if qImportConfigurationAttributeValues != "" {

			if err := r.SetQueryParam("importConfigurationAttributeValues", qImportConfigurationAttributeValues); err != nil {
				return err
			}
		}
	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool

		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {

			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}
	}

	if o.TagImportMode != nil {

		// query param tagImportMode
		var qrTagImportMode string

		if o.TagImportMode != nil {
			qrTagImportMode = *o.TagImportMode
		}
		qTagImportMode := qrTagImportMode
		if qTagImportMode != "" {

			if err := r.SetQueryParam("tagImportMode", qTagImportMode); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
