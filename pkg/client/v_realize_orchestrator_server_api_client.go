// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/client/actions_service"
	"github.com/vmware/vra-sdk-go/pkg/client/authorization_groups_service"
	"github.com/vmware/vra-sdk-go/pkg/client/catalog_service"
	"github.com/vmware/vra-sdk-go/pkg/client/category_service"
	"github.com/vmware/vra-sdk-go/pkg/client/configuration_service"
	"github.com/vmware/vra-sdk-go/pkg/client/content_service"
	"github.com/vmware/vra-sdk-go/pkg/client/custom_event_service"
	"github.com/vmware/vra-sdk-go/pkg/client/debugger_service"
	"github.com/vmware/vra-sdk-go/pkg/client/deprecated"
	"github.com/vmware/vra-sdk-go/pkg/client/inventory_service"
	"github.com/vmware/vra-sdk-go/pkg/client/orchestrator_server_instance_service"
	"github.com/vmware/vra-sdk-go/pkg/client/packages_service"
	"github.com/vmware/vra-sdk-go/pkg/client/policy_service"
	"github.com/vmware/vra-sdk-go/pkg/client/resource_service"
	"github.com/vmware/vra-sdk-go/pkg/client/server_configuration_service"
	"github.com/vmware/vra-sdk-go/pkg/client/service_descriptor_service"
	"github.com/vmware/vra-sdk-go/pkg/client/tagging_service"
	"github.com/vmware/vra-sdk-go/pkg/client/task_service"
	"github.com/vmware/vra-sdk-go/pkg/client/user_interaction_service"
	"github.com/vmware/vra-sdk-go/pkg/client/user_service"
	"github.com/vmware/vra-sdk-go/pkg/client/workflow_presentation_service"
	"github.com/vmware/vra-sdk-go/pkg/client/workflow_run_service"
	"github.com/vmware/vra-sdk-go/pkg/client/workflow_service"
	"github.com/vmware/vra-sdk-go/pkg/client/workflow_user_interaction_presentation_service"
)

// Default v realize orchestrator server API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/vco/api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new v realize orchestrator server API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *VRealizeOrchestratorServerAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new v realize orchestrator server API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *VRealizeOrchestratorServerAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new v realize orchestrator server API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *VRealizeOrchestratorServerAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(VRealizeOrchestratorServerAPI)
	cli.Transport = transport
	cli.ActionsService = actions_service.New(transport, formats)
	cli.AuthorizationGroupsService = authorization_groups_service.New(transport, formats)
	cli.CatalogService = catalog_service.New(transport, formats)
	cli.CategoryService = category_service.New(transport, formats)
	cli.ConfigurationService = configuration_service.New(transport, formats)
	cli.ContentService = content_service.New(transport, formats)
	cli.CustomEventService = custom_event_service.New(transport, formats)
	cli.DebuggerService = debugger_service.New(transport, formats)
	cli.Deprecated = deprecated.New(transport, formats)
	cli.InventoryService = inventory_service.New(transport, formats)
	cli.OrchestratorServerInstanceService = orchestrator_server_instance_service.New(transport, formats)
	cli.PackagesService = packages_service.New(transport, formats)
	cli.PolicyService = policy_service.New(transport, formats)
	cli.ResourceService = resource_service.New(transport, formats)
	cli.ServerConfigurationService = server_configuration_service.New(transport, formats)
	cli.ServiceDescriptorService = service_descriptor_service.New(transport, formats)
	cli.TaggingService = tagging_service.New(transport, formats)
	cli.TaskService = task_service.New(transport, formats)
	cli.UserInteractionService = user_interaction_service.New(transport, formats)
	cli.UserService = user_service.New(transport, formats)
	cli.WorkflowPresentationService = workflow_presentation_service.New(transport, formats)
	cli.WorkflowRunService = workflow_run_service.New(transport, formats)
	cli.WorkflowService = workflow_service.New(transport, formats)
	cli.WorkflowUserInteractionPresentationService = workflow_user_interaction_presentation_service.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// VRealizeOrchestratorServerAPI is a client for v realize orchestrator server API
type VRealizeOrchestratorServerAPI struct {
	ActionsService actions_service.ClientService

	AuthorizationGroupsService authorization_groups_service.ClientService

	CatalogService catalog_service.ClientService

	CategoryService category_service.ClientService

	ConfigurationService configuration_service.ClientService

	ContentService content_service.ClientService

	CustomEventService custom_event_service.ClientService

	DebuggerService debugger_service.ClientService

	Deprecated deprecated.ClientService

	InventoryService inventory_service.ClientService

	OrchestratorServerInstanceService orchestrator_server_instance_service.ClientService

	PackagesService packages_service.ClientService

	PolicyService policy_service.ClientService

	ResourceService resource_service.ClientService

	ServerConfigurationService server_configuration_service.ClientService

	ServiceDescriptorService service_descriptor_service.ClientService

	TaggingService tagging_service.ClientService

	TaskService task_service.ClientService

	UserInteractionService user_interaction_service.ClientService

	UserService user_service.ClientService

	WorkflowPresentationService workflow_presentation_service.ClientService

	WorkflowRunService workflow_run_service.ClientService

	WorkflowService workflow_service.ClientService

	WorkflowUserInteractionPresentationService workflow_user_interaction_presentation_service.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *VRealizeOrchestratorServerAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.ActionsService.SetTransport(transport)
	c.AuthorizationGroupsService.SetTransport(transport)
	c.CatalogService.SetTransport(transport)
	c.CategoryService.SetTransport(transport)
	c.ConfigurationService.SetTransport(transport)
	c.ContentService.SetTransport(transport)
	c.CustomEventService.SetTransport(transport)
	c.DebuggerService.SetTransport(transport)
	c.Deprecated.SetTransport(transport)
	c.InventoryService.SetTransport(transport)
	c.OrchestratorServerInstanceService.SetTransport(transport)
	c.PackagesService.SetTransport(transport)
	c.PolicyService.SetTransport(transport)
	c.ResourceService.SetTransport(transport)
	c.ServerConfigurationService.SetTransport(transport)
	c.ServiceDescriptorService.SetTransport(transport)
	c.TaggingService.SetTransport(transport)
	c.TaskService.SetTransport(transport)
	c.UserInteractionService.SetTransport(transport)
	c.UserService.SetTransport(transport)
	c.WorkflowPresentationService.SetTransport(transport)
	c.WorkflowRunService.SetTransport(transport)
	c.WorkflowService.SetTransport(transport)
	c.WorkflowUserInteractionPresentationService.SetTransport(transport)
}
