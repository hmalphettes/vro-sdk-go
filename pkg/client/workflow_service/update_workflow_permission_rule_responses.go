// Code generated by go-swagger; DO NOT EDIT.

package workflow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateWorkflowPermissionRuleReader is a Reader for the UpdateWorkflowPermissionRule structure.
type UpdateWorkflowPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateWorkflowPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateWorkflowPermissionRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateWorkflowPermissionRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateWorkflowPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateWorkflowPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /workflows/{id}/permissions/{ruleId}] updateWorkflowPermissionRule", response, response.Code())
	}
}

// NewUpdateWorkflowPermissionRuleNoContent creates a UpdateWorkflowPermissionRuleNoContent with default headers values
func NewUpdateWorkflowPermissionRuleNoContent() *UpdateWorkflowPermissionRuleNoContent {
	return &UpdateWorkflowPermissionRuleNoContent{}
}

/*
UpdateWorkflowPermissionRuleNoContent describes a response with status code 204, with default header values.

No content
*/
type UpdateWorkflowPermissionRuleNoContent struct {
}

// IsSuccess returns true when this update workflow permission rule no content response has a 2xx status code
func (o *UpdateWorkflowPermissionRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update workflow permission rule no content response has a 3xx status code
func (o *UpdateWorkflowPermissionRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow permission rule no content response has a 4xx status code
func (o *UpdateWorkflowPermissionRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update workflow permission rule no content response has a 5xx status code
func (o *UpdateWorkflowPermissionRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow permission rule no content response a status code equal to that given
func (o *UpdateWorkflowPermissionRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the update workflow permission rule no content response
func (o *UpdateWorkflowPermissionRuleNoContent) Code() int {
	return 204
}

func (o *UpdateWorkflowPermissionRuleNoContent) Error() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleNoContent ", 204)
}

func (o *UpdateWorkflowPermissionRuleNoContent) String() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleNoContent ", 204)
}

func (o *UpdateWorkflowPermissionRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateWorkflowPermissionRuleBadRequest creates a UpdateWorkflowPermissionRuleBadRequest with default headers values
func NewUpdateWorkflowPermissionRuleBadRequest() *UpdateWorkflowPermissionRuleBadRequest {
	return &UpdateWorkflowPermissionRuleBadRequest{}
}

/*
UpdateWorkflowPermissionRuleBadRequest describes a response with status code 400, with default header values.

The request is invalid(validation error)
*/
type UpdateWorkflowPermissionRuleBadRequest struct {
}

// IsSuccess returns true when this update workflow permission rule bad request response has a 2xx status code
func (o *UpdateWorkflowPermissionRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow permission rule bad request response has a 3xx status code
func (o *UpdateWorkflowPermissionRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow permission rule bad request response has a 4xx status code
func (o *UpdateWorkflowPermissionRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow permission rule bad request response has a 5xx status code
func (o *UpdateWorkflowPermissionRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow permission rule bad request response a status code equal to that given
func (o *UpdateWorkflowPermissionRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update workflow permission rule bad request response
func (o *UpdateWorkflowPermissionRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateWorkflowPermissionRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleBadRequest ", 400)
}

func (o *UpdateWorkflowPermissionRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleBadRequest ", 400)
}

func (o *UpdateWorkflowPermissionRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateWorkflowPermissionRuleUnauthorized creates a UpdateWorkflowPermissionRuleUnauthorized with default headers values
func NewUpdateWorkflowPermissionRuleUnauthorized() *UpdateWorkflowPermissionRuleUnauthorized {
	return &UpdateWorkflowPermissionRuleUnauthorized{}
}

/*
UpdateWorkflowPermissionRuleUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type UpdateWorkflowPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this update workflow permission rule unauthorized response has a 2xx status code
func (o *UpdateWorkflowPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow permission rule unauthorized response has a 3xx status code
func (o *UpdateWorkflowPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow permission rule unauthorized response has a 4xx status code
func (o *UpdateWorkflowPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow permission rule unauthorized response has a 5xx status code
func (o *UpdateWorkflowPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow permission rule unauthorized response a status code equal to that given
func (o *UpdateWorkflowPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update workflow permission rule unauthorized response
func (o *UpdateWorkflowPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *UpdateWorkflowPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleUnauthorized ", 401)
}

func (o *UpdateWorkflowPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleUnauthorized ", 401)
}

func (o *UpdateWorkflowPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateWorkflowPermissionRuleNotFound creates a UpdateWorkflowPermissionRuleNotFound with default headers values
func NewUpdateWorkflowPermissionRuleNotFound() *UpdateWorkflowPermissionRuleNotFound {
	return &UpdateWorkflowPermissionRuleNotFound{}
}

/*
UpdateWorkflowPermissionRuleNotFound describes a response with status code 404, with default header values.

Can not find a workflow with the specified ID, the user does not have 'admin' access rights for that workflow, or the permission rule with the specified ID does not exist
*/
type UpdateWorkflowPermissionRuleNotFound struct {
}

// IsSuccess returns true when this update workflow permission rule not found response has a 2xx status code
func (o *UpdateWorkflowPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow permission rule not found response has a 3xx status code
func (o *UpdateWorkflowPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow permission rule not found response has a 4xx status code
func (o *UpdateWorkflowPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow permission rule not found response has a 5xx status code
func (o *UpdateWorkflowPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow permission rule not found response a status code equal to that given
func (o *UpdateWorkflowPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update workflow permission rule not found response
func (o *UpdateWorkflowPermissionRuleNotFound) Code() int {
	return 404
}

func (o *UpdateWorkflowPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleNotFound ", 404)
}

func (o *UpdateWorkflowPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /workflows/{id}/permissions/{ruleId}][%d] updateWorkflowPermissionRuleNotFound ", 404)
}

func (o *UpdateWorkflowPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
