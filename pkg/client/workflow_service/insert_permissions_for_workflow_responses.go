// Code generated by go-swagger; DO NOT EDIT.

package workflow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// InsertPermissionsForWorkflowReader is a Reader for the InsertPermissionsForWorkflow structure.
type InsertPermissionsForWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertPermissionsForWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertPermissionsForWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewInsertPermissionsForWorkflowCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertPermissionsForWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertPermissionsForWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsertPermissionsForWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /workflows/{id}/permissions] insertPermissionsForWorkflow", response, response.Code())
	}
}

// NewInsertPermissionsForWorkflowOK creates a InsertPermissionsForWorkflowOK with default headers values
func NewInsertPermissionsForWorkflowOK() *InsertPermissionsForWorkflowOK {
	return &InsertPermissionsForWorkflowOK{}
}

/*
InsertPermissionsForWorkflowOK describes a response with status code 200, with default header values.

successful operation
*/
type InsertPermissionsForWorkflowOK struct {
	Payload *models.Permissions
}

// IsSuccess returns true when this insert permissions for workflow o k response has a 2xx status code
func (o *InsertPermissionsForWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for workflow o k response has a 3xx status code
func (o *InsertPermissionsForWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for workflow o k response has a 4xx status code
func (o *InsertPermissionsForWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for workflow o k response has a 5xx status code
func (o *InsertPermissionsForWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for workflow o k response a status code equal to that given
func (o *InsertPermissionsForWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert permissions for workflow o k response
func (o *InsertPermissionsForWorkflowOK) Code() int {
	return 200
}

func (o *InsertPermissionsForWorkflowOK) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForWorkflowOK) String() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForWorkflowOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *InsertPermissionsForWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertPermissionsForWorkflowCreated creates a InsertPermissionsForWorkflowCreated with default headers values
func NewInsertPermissionsForWorkflowCreated() *InsertPermissionsForWorkflowCreated {
	return &InsertPermissionsForWorkflowCreated{}
}

/*
InsertPermissionsForWorkflowCreated describes a response with status code 201, with default header values.

Created
*/
type InsertPermissionsForWorkflowCreated struct {
}

// IsSuccess returns true when this insert permissions for workflow created response has a 2xx status code
func (o *InsertPermissionsForWorkflowCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for workflow created response has a 3xx status code
func (o *InsertPermissionsForWorkflowCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for workflow created response has a 4xx status code
func (o *InsertPermissionsForWorkflowCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for workflow created response has a 5xx status code
func (o *InsertPermissionsForWorkflowCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for workflow created response a status code equal to that given
func (o *InsertPermissionsForWorkflowCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the insert permissions for workflow created response
func (o *InsertPermissionsForWorkflowCreated) Code() int {
	return 201
}

func (o *InsertPermissionsForWorkflowCreated) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowCreated ", 201)
}

func (o *InsertPermissionsForWorkflowCreated) String() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowCreated ", 201)
}

func (o *InsertPermissionsForWorkflowCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForWorkflowBadRequest creates a InsertPermissionsForWorkflowBadRequest with default headers values
func NewInsertPermissionsForWorkflowBadRequest() *InsertPermissionsForWorkflowBadRequest {
	return &InsertPermissionsForWorkflowBadRequest{}
}

/*
InsertPermissionsForWorkflowBadRequest describes a response with status code 400, with default header values.

The request is invalid(validation error)
*/
type InsertPermissionsForWorkflowBadRequest struct {
}

// IsSuccess returns true when this insert permissions for workflow bad request response has a 2xx status code
func (o *InsertPermissionsForWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for workflow bad request response has a 3xx status code
func (o *InsertPermissionsForWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for workflow bad request response has a 4xx status code
func (o *InsertPermissionsForWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for workflow bad request response has a 5xx status code
func (o *InsertPermissionsForWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for workflow bad request response a status code equal to that given
func (o *InsertPermissionsForWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert permissions for workflow bad request response
func (o *InsertPermissionsForWorkflowBadRequest) Code() int {
	return 400
}

func (o *InsertPermissionsForWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowBadRequest ", 400)
}

func (o *InsertPermissionsForWorkflowBadRequest) String() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowBadRequest ", 400)
}

func (o *InsertPermissionsForWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForWorkflowUnauthorized creates a InsertPermissionsForWorkflowUnauthorized with default headers values
func NewInsertPermissionsForWorkflowUnauthorized() *InsertPermissionsForWorkflowUnauthorized {
	return &InsertPermissionsForWorkflowUnauthorized{}
}

/*
InsertPermissionsForWorkflowUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type InsertPermissionsForWorkflowUnauthorized struct {
}

// IsSuccess returns true when this insert permissions for workflow unauthorized response has a 2xx status code
func (o *InsertPermissionsForWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for workflow unauthorized response has a 3xx status code
func (o *InsertPermissionsForWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for workflow unauthorized response has a 4xx status code
func (o *InsertPermissionsForWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for workflow unauthorized response has a 5xx status code
func (o *InsertPermissionsForWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for workflow unauthorized response a status code equal to that given
func (o *InsertPermissionsForWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert permissions for workflow unauthorized response
func (o *InsertPermissionsForWorkflowUnauthorized) Code() int {
	return 401
}

func (o *InsertPermissionsForWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowUnauthorized ", 401)
}

func (o *InsertPermissionsForWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowUnauthorized ", 401)
}

func (o *InsertPermissionsForWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForWorkflowNotFound creates a InsertPermissionsForWorkflowNotFound with default headers values
func NewInsertPermissionsForWorkflowNotFound() *InsertPermissionsForWorkflowNotFound {
	return &InsertPermissionsForWorkflowNotFound{}
}

/*
InsertPermissionsForWorkflowNotFound describes a response with status code 404, with default header values.

Cannot find an action with the specified name
*/
type InsertPermissionsForWorkflowNotFound struct {
}

// IsSuccess returns true when this insert permissions for workflow not found response has a 2xx status code
func (o *InsertPermissionsForWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for workflow not found response has a 3xx status code
func (o *InsertPermissionsForWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for workflow not found response has a 4xx status code
func (o *InsertPermissionsForWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for workflow not found response has a 5xx status code
func (o *InsertPermissionsForWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for workflow not found response a status code equal to that given
func (o *InsertPermissionsForWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the insert permissions for workflow not found response
func (o *InsertPermissionsForWorkflowNotFound) Code() int {
	return 404
}

func (o *InsertPermissionsForWorkflowNotFound) Error() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowNotFound ", 404)
}

func (o *InsertPermissionsForWorkflowNotFound) String() string {
	return fmt.Sprintf("[POST /workflows/{id}/permissions][%d] insertPermissionsForWorkflowNotFound ", 404)
}

func (o *InsertPermissionsForWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
