// Code generated by go-swagger; DO NOT EDIT.

package workflow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteWorkflowPermissionRuleReader is a Reader for the DeleteWorkflowPermissionRule structure.
type DeleteWorkflowPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWorkflowPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteWorkflowPermissionRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteWorkflowPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteWorkflowPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /workflows/{id}/permissions/{ruleId}] deleteWorkflowPermissionRule", response, response.Code())
	}
}

// NewDeleteWorkflowPermissionRuleNoContent creates a DeleteWorkflowPermissionRuleNoContent with default headers values
func NewDeleteWorkflowPermissionRuleNoContent() *DeleteWorkflowPermissionRuleNoContent {
	return &DeleteWorkflowPermissionRuleNoContent{}
}

/*
DeleteWorkflowPermissionRuleNoContent describes a response with status code 204, with default header values.

No content
*/
type DeleteWorkflowPermissionRuleNoContent struct {
}

// IsSuccess returns true when this delete workflow permission rule no content response has a 2xx status code
func (o *DeleteWorkflowPermissionRuleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete workflow permission rule no content response has a 3xx status code
func (o *DeleteWorkflowPermissionRuleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow permission rule no content response has a 4xx status code
func (o *DeleteWorkflowPermissionRuleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete workflow permission rule no content response has a 5xx status code
func (o *DeleteWorkflowPermissionRuleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow permission rule no content response a status code equal to that given
func (o *DeleteWorkflowPermissionRuleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete workflow permission rule no content response
func (o *DeleteWorkflowPermissionRuleNoContent) Code() int {
	return 204
}

func (o *DeleteWorkflowPermissionRuleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /workflows/{id}/permissions/{ruleId}][%d] deleteWorkflowPermissionRuleNoContent ", 204)
}

func (o *DeleteWorkflowPermissionRuleNoContent) String() string {
	return fmt.Sprintf("[DELETE /workflows/{id}/permissions/{ruleId}][%d] deleteWorkflowPermissionRuleNoContent ", 204)
}

func (o *DeleteWorkflowPermissionRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowPermissionRuleUnauthorized creates a DeleteWorkflowPermissionRuleUnauthorized with default headers values
func NewDeleteWorkflowPermissionRuleUnauthorized() *DeleteWorkflowPermissionRuleUnauthorized {
	return &DeleteWorkflowPermissionRuleUnauthorized{}
}

/*
DeleteWorkflowPermissionRuleUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type DeleteWorkflowPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this delete workflow permission rule unauthorized response has a 2xx status code
func (o *DeleteWorkflowPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workflow permission rule unauthorized response has a 3xx status code
func (o *DeleteWorkflowPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow permission rule unauthorized response has a 4xx status code
func (o *DeleteWorkflowPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workflow permission rule unauthorized response has a 5xx status code
func (o *DeleteWorkflowPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow permission rule unauthorized response a status code equal to that given
func (o *DeleteWorkflowPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete workflow permission rule unauthorized response
func (o *DeleteWorkflowPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *DeleteWorkflowPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /workflows/{id}/permissions/{ruleId}][%d] deleteWorkflowPermissionRuleUnauthorized ", 401)
}

func (o *DeleteWorkflowPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /workflows/{id}/permissions/{ruleId}][%d] deleteWorkflowPermissionRuleUnauthorized ", 401)
}

func (o *DeleteWorkflowPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowPermissionRuleNotFound creates a DeleteWorkflowPermissionRuleNotFound with default headers values
func NewDeleteWorkflowPermissionRuleNotFound() *DeleteWorkflowPermissionRuleNotFound {
	return &DeleteWorkflowPermissionRuleNotFound{}
}

/*
DeleteWorkflowPermissionRuleNotFound describes a response with status code 404, with default header values.

Can not find a workflow with the specified ID, the user does not have 'admin' access rights for that workflow, or the permission rule with the specified ID does not exist
*/
type DeleteWorkflowPermissionRuleNotFound struct {
}

// IsSuccess returns true when this delete workflow permission rule not found response has a 2xx status code
func (o *DeleteWorkflowPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workflow permission rule not found response has a 3xx status code
func (o *DeleteWorkflowPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow permission rule not found response has a 4xx status code
func (o *DeleteWorkflowPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workflow permission rule not found response has a 5xx status code
func (o *DeleteWorkflowPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow permission rule not found response a status code equal to that given
func (o *DeleteWorkflowPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete workflow permission rule not found response
func (o *DeleteWorkflowPermissionRuleNotFound) Code() int {
	return 404
}

func (o *DeleteWorkflowPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /workflows/{id}/permissions/{ruleId}][%d] deleteWorkflowPermissionRuleNotFound ", 404)
}

func (o *DeleteWorkflowPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[DELETE /workflows/{id}/permissions/{ruleId}][%d] deleteWorkflowPermissionRuleNotFound ", 404)
}

func (o *DeleteWorkflowPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
