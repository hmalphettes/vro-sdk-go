// Code generated by go-swagger; DO NOT EDIT.

package workflow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetPermissionsForWorkflowReader is a Reader for the GetPermissionsForWorkflow structure.
type GetPermissionsForWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPermissionsForWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPermissionsForWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPermissionsForWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPermissionsForWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/{id}/permissions] getPermissionsForWorkflow", response, response.Code())
	}
}

// NewGetPermissionsForWorkflowOK creates a GetPermissionsForWorkflowOK with default headers values
func NewGetPermissionsForWorkflowOK() *GetPermissionsForWorkflowOK {
	return &GetPermissionsForWorkflowOK{}
}

/*
GetPermissionsForWorkflowOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetPermissionsForWorkflowOK struct {
	Payload *models.Permissions
}

// IsSuccess returns true when this get permissions for workflow o k response has a 2xx status code
func (o *GetPermissionsForWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get permissions for workflow o k response has a 3xx status code
func (o *GetPermissionsForWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get permissions for workflow o k response has a 4xx status code
func (o *GetPermissionsForWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get permissions for workflow o k response has a 5xx status code
func (o *GetPermissionsForWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get permissions for workflow o k response a status code equal to that given
func (o *GetPermissionsForWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get permissions for workflow o k response
func (o *GetPermissionsForWorkflowOK) Code() int {
	return 200
}

func (o *GetPermissionsForWorkflowOK) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}/permissions][%d] getPermissionsForWorkflowOK  %+v", 200, o.Payload)
}

func (o *GetPermissionsForWorkflowOK) String() string {
	return fmt.Sprintf("[GET /workflows/{id}/permissions][%d] getPermissionsForWorkflowOK  %+v", 200, o.Payload)
}

func (o *GetPermissionsForWorkflowOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *GetPermissionsForWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPermissionsForWorkflowUnauthorized creates a GetPermissionsForWorkflowUnauthorized with default headers values
func NewGetPermissionsForWorkflowUnauthorized() *GetPermissionsForWorkflowUnauthorized {
	return &GetPermissionsForWorkflowUnauthorized{}
}

/*
GetPermissionsForWorkflowUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type GetPermissionsForWorkflowUnauthorized struct {
}

// IsSuccess returns true when this get permissions for workflow unauthorized response has a 2xx status code
func (o *GetPermissionsForWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get permissions for workflow unauthorized response has a 3xx status code
func (o *GetPermissionsForWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get permissions for workflow unauthorized response has a 4xx status code
func (o *GetPermissionsForWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get permissions for workflow unauthorized response has a 5xx status code
func (o *GetPermissionsForWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get permissions for workflow unauthorized response a status code equal to that given
func (o *GetPermissionsForWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get permissions for workflow unauthorized response
func (o *GetPermissionsForWorkflowUnauthorized) Code() int {
	return 401
}

func (o *GetPermissionsForWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}/permissions][%d] getPermissionsForWorkflowUnauthorized ", 401)
}

func (o *GetPermissionsForWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[GET /workflows/{id}/permissions][%d] getPermissionsForWorkflowUnauthorized ", 401)
}

func (o *GetPermissionsForWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPermissionsForWorkflowNotFound creates a GetPermissionsForWorkflowNotFound with default headers values
func NewGetPermissionsForWorkflowNotFound() *GetPermissionsForWorkflowNotFound {
	return &GetPermissionsForWorkflowNotFound{}
}

/*
GetPermissionsForWorkflowNotFound describes a response with status code 404, with default header values.

Can not find a workflow with the specified ID.
*/
type GetPermissionsForWorkflowNotFound struct {
}

// IsSuccess returns true when this get permissions for workflow not found response has a 2xx status code
func (o *GetPermissionsForWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get permissions for workflow not found response has a 3xx status code
func (o *GetPermissionsForWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get permissions for workflow not found response has a 4xx status code
func (o *GetPermissionsForWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get permissions for workflow not found response has a 5xx status code
func (o *GetPermissionsForWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get permissions for workflow not found response a status code equal to that given
func (o *GetPermissionsForWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get permissions for workflow not found response
func (o *GetPermissionsForWorkflowNotFound) Code() int {
	return 404
}

func (o *GetPermissionsForWorkflowNotFound) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}/permissions][%d] getPermissionsForWorkflowNotFound ", 404)
}

func (o *GetPermissionsForWorkflowNotFound) String() string {
	return fmt.Sprintf("[GET /workflows/{id}/permissions][%d] getPermissionsForWorkflowNotFound ", 404)
}

func (o *GetPermissionsForWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
