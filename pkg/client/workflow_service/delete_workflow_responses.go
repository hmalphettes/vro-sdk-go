// Code generated by go-swagger; DO NOT EDIT.

package workflow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteWorkflowReader is a Reader for the DeleteWorkflow structure.
type DeleteWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /workflows/{workflowId}] deleteWorkflow", response, response.Code())
	}
}

// NewDeleteWorkflowOK creates a DeleteWorkflowOK with default headers values
func NewDeleteWorkflowOK() *DeleteWorkflowOK {
	return &DeleteWorkflowOK{}
}

/*
DeleteWorkflowOK describes a response with status code 200, with default header values.

The request is successful
*/
type DeleteWorkflowOK struct {
}

// IsSuccess returns true when this delete workflow o k response has a 2xx status code
func (o *DeleteWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete workflow o k response has a 3xx status code
func (o *DeleteWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow o k response has a 4xx status code
func (o *DeleteWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete workflow o k response has a 5xx status code
func (o *DeleteWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow o k response a status code equal to that given
func (o *DeleteWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete workflow o k response
func (o *DeleteWorkflowOK) Code() int {
	return 200
}

func (o *DeleteWorkflowOK) Error() string {
	return fmt.Sprintf("[DELETE /workflows/{workflowId}][%d] deleteWorkflowOK ", 200)
}

func (o *DeleteWorkflowOK) String() string {
	return fmt.Sprintf("[DELETE /workflows/{workflowId}][%d] deleteWorkflowOK ", 200)
}

func (o *DeleteWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowUnauthorized creates a DeleteWorkflowUnauthorized with default headers values
func NewDeleteWorkflowUnauthorized() *DeleteWorkflowUnauthorized {
	return &DeleteWorkflowUnauthorized{}
}

/*
DeleteWorkflowUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type DeleteWorkflowUnauthorized struct {
}

// IsSuccess returns true when this delete workflow unauthorized response has a 2xx status code
func (o *DeleteWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workflow unauthorized response has a 3xx status code
func (o *DeleteWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow unauthorized response has a 4xx status code
func (o *DeleteWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workflow unauthorized response has a 5xx status code
func (o *DeleteWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow unauthorized response a status code equal to that given
func (o *DeleteWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete workflow unauthorized response
func (o *DeleteWorkflowUnauthorized) Code() int {
	return 401
}

func (o *DeleteWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /workflows/{workflowId}][%d] deleteWorkflowUnauthorized ", 401)
}

func (o *DeleteWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /workflows/{workflowId}][%d] deleteWorkflowUnauthorized ", 401)
}

func (o *DeleteWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteWorkflowNotFound creates a DeleteWorkflowNotFound with default headers values
func NewDeleteWorkflowNotFound() *DeleteWorkflowNotFound {
	return &DeleteWorkflowNotFound{}
}

/*
DeleteWorkflowNotFound describes a response with status code 404, with default header values.

Can not find a workflow with the specified ID.
*/
type DeleteWorkflowNotFound struct {
}

// IsSuccess returns true when this delete workflow not found response has a 2xx status code
func (o *DeleteWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete workflow not found response has a 3xx status code
func (o *DeleteWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete workflow not found response has a 4xx status code
func (o *DeleteWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete workflow not found response has a 5xx status code
func (o *DeleteWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete workflow not found response a status code equal to that given
func (o *DeleteWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete workflow not found response
func (o *DeleteWorkflowNotFound) Code() int {
	return 404
}

func (o *DeleteWorkflowNotFound) Error() string {
	return fmt.Sprintf("[DELETE /workflows/{workflowId}][%d] deleteWorkflowNotFound ", 404)
}

func (o *DeleteWorkflowNotFound) String() string {
	return fmt.Sprintf("[DELETE /workflows/{workflowId}][%d] deleteWorkflowNotFound ", 404)
}

func (o *DeleteWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
