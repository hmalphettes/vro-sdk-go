// Code generated by go-swagger; DO NOT EDIT.

package workflow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewImportWorkflowParams creates a new ImportWorkflowParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewImportWorkflowParams() *ImportWorkflowParams {
	return &ImportWorkflowParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewImportWorkflowParamsWithTimeout creates a new ImportWorkflowParams object
// with the ability to set a timeout on a request.
func NewImportWorkflowParamsWithTimeout(timeout time.Duration) *ImportWorkflowParams {
	return &ImportWorkflowParams{
		timeout: timeout,
	}
}

// NewImportWorkflowParamsWithContext creates a new ImportWorkflowParams object
// with the ability to set a context for a request.
func NewImportWorkflowParamsWithContext(ctx context.Context) *ImportWorkflowParams {
	return &ImportWorkflowParams{
		Context: ctx,
	}
}

// NewImportWorkflowParamsWithHTTPClient creates a new ImportWorkflowParams object
// with the ability to set a custom HTTPClient for a request.
func NewImportWorkflowParamsWithHTTPClient(client *http.Client) *ImportWorkflowParams {
	return &ImportWorkflowParams{
		HTTPClient: client,
	}
}

/*
ImportWorkflowParams contains all the parameters to send to the API endpoint

	for the import workflow operation.

	Typically these are written to a http.Request.
*/
type ImportWorkflowParams struct {

	// CategoryID.
	CategoryID string

	// File.
	File runtime.NamedReadCloser

	// Overwrite.
	Overwrite *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the import workflow params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportWorkflowParams) WithDefaults() *ImportWorkflowParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the import workflow params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ImportWorkflowParams) SetDefaults() {
	var (
		overwriteDefault = bool(false)
	)

	val := ImportWorkflowParams{
		Overwrite: &overwriteDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the import workflow params
func (o *ImportWorkflowParams) WithTimeout(timeout time.Duration) *ImportWorkflowParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import workflow params
func (o *ImportWorkflowParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import workflow params
func (o *ImportWorkflowParams) WithContext(ctx context.Context) *ImportWorkflowParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import workflow params
func (o *ImportWorkflowParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import workflow params
func (o *ImportWorkflowParams) WithHTTPClient(client *http.Client) *ImportWorkflowParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import workflow params
func (o *ImportWorkflowParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategoryID adds the categoryID to the import workflow params
func (o *ImportWorkflowParams) WithCategoryID(categoryID string) *ImportWorkflowParams {
	o.SetCategoryID(categoryID)
	return o
}

// SetCategoryID adds the categoryId to the import workflow params
func (o *ImportWorkflowParams) SetCategoryID(categoryID string) {
	o.CategoryID = categoryID
}

// WithFile adds the file to the import workflow params
func (o *ImportWorkflowParams) WithFile(file runtime.NamedReadCloser) *ImportWorkflowParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the import workflow params
func (o *ImportWorkflowParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithOverwrite adds the overwrite to the import workflow params
func (o *ImportWorkflowParams) WithOverwrite(overwrite *bool) *ImportWorkflowParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the import workflow params
func (o *ImportWorkflowParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WriteToRequest writes these params to a swagger request
func (o *ImportWorkflowParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param categoryId
	qrCategoryID := o.CategoryID
	qCategoryID := qrCategoryID
	if qCategoryID != "" {

		if err := r.SetQueryParam("categoryId", qCategoryID); err != nil {
			return err
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool

		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {

			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
