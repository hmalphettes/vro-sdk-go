// Code generated by go-swagger; DO NOT EDIT.

package workflow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// DownloadWorkflowSchemaContentReader is a Reader for the DownloadWorkflowSchemaContent structure.
type DownloadWorkflowSchemaContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadWorkflowSchemaContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadWorkflowSchemaContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadWorkflowSchemaContentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDownloadWorkflowSchemaContentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/{id}/content] downloadWorkflowSchemaContent", response, response.Code())
	}
}

// NewDownloadWorkflowSchemaContentOK creates a DownloadWorkflowSchemaContentOK with default headers values
func NewDownloadWorkflowSchemaContentOK() *DownloadWorkflowSchemaContentOK {
	return &DownloadWorkflowSchemaContentOK{}
}

/*
DownloadWorkflowSchemaContentOK describes a response with status code 200, with default header values.

The request is successful
*/
type DownloadWorkflowSchemaContentOK struct {
	Payload *models.SchemaWorkflow
}

// IsSuccess returns true when this download workflow schema content o k response has a 2xx status code
func (o *DownloadWorkflowSchemaContentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download workflow schema content o k response has a 3xx status code
func (o *DownloadWorkflowSchemaContentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download workflow schema content o k response has a 4xx status code
func (o *DownloadWorkflowSchemaContentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download workflow schema content o k response has a 5xx status code
func (o *DownloadWorkflowSchemaContentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download workflow schema content o k response a status code equal to that given
func (o *DownloadWorkflowSchemaContentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download workflow schema content o k response
func (o *DownloadWorkflowSchemaContentOK) Code() int {
	return 200
}

func (o *DownloadWorkflowSchemaContentOK) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}/content][%d] downloadWorkflowSchemaContentOK  %+v", 200, o.Payload)
}

func (o *DownloadWorkflowSchemaContentOK) String() string {
	return fmt.Sprintf("[GET /workflows/{id}/content][%d] downloadWorkflowSchemaContentOK  %+v", 200, o.Payload)
}

func (o *DownloadWorkflowSchemaContentOK) GetPayload() *models.SchemaWorkflow {
	return o.Payload
}

func (o *DownloadWorkflowSchemaContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SchemaWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadWorkflowSchemaContentUnauthorized creates a DownloadWorkflowSchemaContentUnauthorized with default headers values
func NewDownloadWorkflowSchemaContentUnauthorized() *DownloadWorkflowSchemaContentUnauthorized {
	return &DownloadWorkflowSchemaContentUnauthorized{}
}

/*
DownloadWorkflowSchemaContentUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type DownloadWorkflowSchemaContentUnauthorized struct {
}

// IsSuccess returns true when this download workflow schema content unauthorized response has a 2xx status code
func (o *DownloadWorkflowSchemaContentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download workflow schema content unauthorized response has a 3xx status code
func (o *DownloadWorkflowSchemaContentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download workflow schema content unauthorized response has a 4xx status code
func (o *DownloadWorkflowSchemaContentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download workflow schema content unauthorized response has a 5xx status code
func (o *DownloadWorkflowSchemaContentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download workflow schema content unauthorized response a status code equal to that given
func (o *DownloadWorkflowSchemaContentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download workflow schema content unauthorized response
func (o *DownloadWorkflowSchemaContentUnauthorized) Code() int {
	return 401
}

func (o *DownloadWorkflowSchemaContentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}/content][%d] downloadWorkflowSchemaContentUnauthorized ", 401)
}

func (o *DownloadWorkflowSchemaContentUnauthorized) String() string {
	return fmt.Sprintf("[GET /workflows/{id}/content][%d] downloadWorkflowSchemaContentUnauthorized ", 401)
}

func (o *DownloadWorkflowSchemaContentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadWorkflowSchemaContentNotFound creates a DownloadWorkflowSchemaContentNotFound with default headers values
func NewDownloadWorkflowSchemaContentNotFound() *DownloadWorkflowSchemaContentNotFound {
	return &DownloadWorkflowSchemaContentNotFound{}
}

/*
DownloadWorkflowSchemaContentNotFound describes a response with status code 404, with default header values.

Can not find a workflow with the specified ID or the user does not have 'read' access rights for that workflow
*/
type DownloadWorkflowSchemaContentNotFound struct {
}

// IsSuccess returns true when this download workflow schema content not found response has a 2xx status code
func (o *DownloadWorkflowSchemaContentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download workflow schema content not found response has a 3xx status code
func (o *DownloadWorkflowSchemaContentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download workflow schema content not found response has a 4xx status code
func (o *DownloadWorkflowSchemaContentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this download workflow schema content not found response has a 5xx status code
func (o *DownloadWorkflowSchemaContentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this download workflow schema content not found response a status code equal to that given
func (o *DownloadWorkflowSchemaContentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the download workflow schema content not found response
func (o *DownloadWorkflowSchemaContentNotFound) Code() int {
	return 404
}

func (o *DownloadWorkflowSchemaContentNotFound) Error() string {
	return fmt.Sprintf("[GET /workflows/{id}/content][%d] downloadWorkflowSchemaContentNotFound ", 404)
}

func (o *DownloadWorkflowSchemaContentNotFound) String() string {
	return fmt.Sprintf("[GET /workflows/{id}/content][%d] downloadWorkflowSchemaContentNotFound ", 404)
}

func (o *DownloadWorkflowSchemaContentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
