// Code generated by go-swagger; DO NOT EDIT.

package resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// GetResourcePermissionRuleReader is a Reader for the GetResourcePermissionRule structure.
type GetResourcePermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetResourcePermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetResourcePermissionRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetResourcePermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetResourcePermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /resources/{id}/permissions/{ruleId}] getResourcePermissionRule", response, response.Code())
	}
}

// NewGetResourcePermissionRuleOK creates a GetResourcePermissionRuleOK with default headers values
func NewGetResourcePermissionRuleOK() *GetResourcePermissionRuleOK {
	return &GetResourcePermissionRuleOK{}
}

/*
GetResourcePermissionRuleOK describes a response with status code 200, with default header values.

The request is successful.
*/
type GetResourcePermissionRuleOK struct {
	Payload *models.Permission
}

// IsSuccess returns true when this get resource permission rule o k response has a 2xx status code
func (o *GetResourcePermissionRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get resource permission rule o k response has a 3xx status code
func (o *GetResourcePermissionRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource permission rule o k response has a 4xx status code
func (o *GetResourcePermissionRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get resource permission rule o k response has a 5xx status code
func (o *GetResourcePermissionRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource permission rule o k response a status code equal to that given
func (o *GetResourcePermissionRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get resource permission rule o k response
func (o *GetResourcePermissionRuleOK) Code() int {
	return 200
}

func (o *GetResourcePermissionRuleOK) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/permissions/{ruleId}][%d] getResourcePermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetResourcePermissionRuleOK) String() string {
	return fmt.Sprintf("[GET /resources/{id}/permissions/{ruleId}][%d] getResourcePermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetResourcePermissionRuleOK) GetPayload() *models.Permission {
	return o.Payload
}

func (o *GetResourcePermissionRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetResourcePermissionRuleUnauthorized creates a GetResourcePermissionRuleUnauthorized with default headers values
func NewGetResourcePermissionRuleUnauthorized() *GetResourcePermissionRuleUnauthorized {
	return &GetResourcePermissionRuleUnauthorized{}
}

/*
GetResourcePermissionRuleUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type GetResourcePermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this get resource permission rule unauthorized response has a 2xx status code
func (o *GetResourcePermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource permission rule unauthorized response has a 3xx status code
func (o *GetResourcePermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource permission rule unauthorized response has a 4xx status code
func (o *GetResourcePermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource permission rule unauthorized response has a 5xx status code
func (o *GetResourcePermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource permission rule unauthorized response a status code equal to that given
func (o *GetResourcePermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get resource permission rule unauthorized response
func (o *GetResourcePermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *GetResourcePermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/permissions/{ruleId}][%d] getResourcePermissionRuleUnauthorized ", 401)
}

func (o *GetResourcePermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[GET /resources/{id}/permissions/{ruleId}][%d] getResourcePermissionRuleUnauthorized ", 401)
}

func (o *GetResourcePermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetResourcePermissionRuleNotFound creates a GetResourcePermissionRuleNotFound with default headers values
func NewGetResourcePermissionRuleNotFound() *GetResourcePermissionRuleNotFound {
	return &GetResourcePermissionRuleNotFound{}
}

/*
GetResourcePermissionRuleNotFound describes a response with status code 404, with default header values.

Cannot find a resource with the specified ID, the user does not have 'read' access rights for that resource, or the permission rule with the specified ID does not exist.
*/
type GetResourcePermissionRuleNotFound struct {
}

// IsSuccess returns true when this get resource permission rule not found response has a 2xx status code
func (o *GetResourcePermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get resource permission rule not found response has a 3xx status code
func (o *GetResourcePermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get resource permission rule not found response has a 4xx status code
func (o *GetResourcePermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get resource permission rule not found response has a 5xx status code
func (o *GetResourcePermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get resource permission rule not found response a status code equal to that given
func (o *GetResourcePermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get resource permission rule not found response
func (o *GetResourcePermissionRuleNotFound) Code() int {
	return 404
}

func (o *GetResourcePermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /resources/{id}/permissions/{ruleId}][%d] getResourcePermissionRuleNotFound ", 404)
}

func (o *GetResourcePermissionRuleNotFound) String() string {
	return fmt.Sprintf("[GET /resources/{id}/permissions/{ruleId}][%d] getResourcePermissionRuleNotFound ", 404)
}

func (o *GetResourcePermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
