// Code generated by go-swagger; DO NOT EDIT.

package resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeletePermissionsForResource(params *DeletePermissionsForResourceParams, opts ...ClientOption) (*DeletePermissionsForResourceNoContent, error)

	DeleteResource(params *DeleteResourceParams, opts ...ClientOption) (*DeleteResourceNoContent, error)

	DeleteResourcePermissionRule(params *DeleteResourcePermissionRuleParams, opts ...ClientOption) (*DeleteResourcePermissionRuleNoContent, error)

	ExportResource(params *ExportResourceParams, opts ...ClientOption) (*ExportResourceOK, error)

	GetPermissionsForResource(params *GetPermissionsForResourceParams, opts ...ClientOption) (*GetPermissionsForResourceOK, error)

	GetResourcePermissionRule(params *GetResourcePermissionRuleParams, opts ...ClientOption) (*GetResourcePermissionRuleOK, error)

	ImportResource(params *ImportResourceParams, opts ...ClientOption) (*ImportResourceAccepted, error)

	InsertPermissionsForResource(params *InsertPermissionsForResourceParams, opts ...ClientOption) (*InsertPermissionsForResourceOK, *InsertPermissionsForResourceCreated, error)

	ListAllresources(params *ListAllresourcesParams, opts ...ClientOption) (*ListAllresourcesOK, error)

	UpdateResource(params *UpdateResourceParams, opts ...ClientOption) (*UpdateResourceOK, error)

	UpdateResourcePermissionRule(params *UpdateResourcePermissionRuleParams, opts ...ClientOption) (*UpdateResourcePermissionRuleNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeletePermissionsForResource deletes permissions

Deletes all permissions for resource with a given ID.
*/
func (a *Client) DeletePermissionsForResource(params *DeletePermissionsForResourceParams, opts ...ClientOption) (*DeletePermissionsForResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsForResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePermissionsForResource",
		Method:             "DELETE",
		PathPattern:        "/resources/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePermissionsForResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePermissionsForResourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePermissionsForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteResource deletes resource

If the resource is referenced by some workflow, it is considered to be 'in use' and the delete operation will fail, unless the 'force' option is provided.
*/
func (a *Client) DeleteResource(params *DeleteResourceParams, opts ...ClientOption) (*DeleteResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResource",
		Method:             "DELETE",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteResourcePermissionRule deletes permission rule

Deletes a single permission rule with a given ID.
*/
func (a *Client) DeleteResourcePermissionRule(params *DeleteResourcePermissionRuleParams, opts ...ClientOption) (*DeleteResourcePermissionRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResourcePermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResourcePermissionRule",
		Method:             "DELETE",
		PathPattern:        "/resources/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteResourcePermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteResourcePermissionRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteResourcePermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportResource exports resource

Exports a resource by its ID. If the request is successful, the resource binary content is available in the body of response message. It is up to the client application to properly fetch and process this attachment, for example by saving it to local file system. The exported resource has the same internal format as the resource exported using Orchestrator client.
*/
func (a *Client) ExportResource(params *ExportResourceParams, opts ...ClientOption) (*ExportResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"!application/json", "!application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPermissionsForResource gets permissions

Retrieves resource permissions.
*/
func (a *Client) GetPermissionsForResource(params *GetPermissionsForResourceParams, opts ...ClientOption) (*GetPermissionsForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsForResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermissionsForResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPermissionsForResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPermissionsForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourcePermissionRule gets permission rule

Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.
*/
func (a *Client) GetResourcePermissionRule(params *GetResourcePermissionRuleParams, opts ...ClientOption) (*GetResourcePermissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcePermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourcePermissionRule",
		Method:             "GET",
		PathPattern:        "/resources/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcePermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcePermissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourcePermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportResource imports resource

Imports a resource in a given category. The resource binary content should be available as multi-part content (see RFC-2387 for details). Details of working with multi-part resources depend on the used client's HTTP/REST library. For example, in Spring it will look like:<br /><pre>Sample client code:<br />-------------------<br />String url = "https://localhost:8281/vco/api/resources/";<br />MultiValueMap<String, Resource> parts = new LinkedMultiValueMap<String, Resource>();<br />Resource r = new FileSystemResource("D:/path/to/some.vsoconf");<br />parts.put("file", Arrays.asList(r));<br />parts.put("categoryId", "828080808080808080808080808080807F818080013217004819830adebdb10ea");<br />new RestTemplate().postForLocation(url, parts);<br />-------------------</pre>
*/
func (a *Client) ImportResource(params *ImportResourceParams, opts ...ClientOption) (*ImportResourceAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importResource",
		Method:             "POST",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportResourceAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPermissionsForResource inserts permissions

Sets permissions for a resource with a given ID. Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN
*/
func (a *Client) InsertPermissionsForResource(params *InsertPermissionsForResourceParams, opts ...ClientOption) (*InsertPermissionsForResourceOK, *InsertPermissionsForResourceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPermissionsForResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPermissionsForResource",
		Method:             "POST",
		PathPattern:        "/resources/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InsertPermissionsForResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertPermissionsForResourceOK:
		return value, nil, nil
	case *InsertPermissionsForResourceCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resource_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAllresources lists all resources

Retrieves a list of all resources.
*/
func (a *Client) ListAllresources(params *ListAllresourcesParams, opts ...ClientOption) (*ListAllresourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllresourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAllresources",
		Method:             "GET",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAllresourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllresourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllresources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResource updates resource content

Update resource content.
*/
func (a *Client) UpdateResource(params *UpdateResourceParams, opts ...ClientOption) (*UpdateResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResource",
		Method:             "POST",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateResourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateResourcePermissionRule updates permission rule

Updates principal or access rights for a single permission rule with a given ID.
*/
func (a *Client) UpdateResourcePermissionRule(params *UpdateResourcePermissionRuleParams, opts ...ClientOption) (*UpdateResourcePermissionRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateResourcePermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateResourcePermissionRule",
		Method:             "PUT",
		PathPattern:        "/resources/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateResourcePermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateResourcePermissionRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateResourcePermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
