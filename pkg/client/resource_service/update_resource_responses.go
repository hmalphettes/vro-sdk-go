// Code generated by go-swagger; DO NOT EDIT.

package resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateResourceReader is a Reader for the UpdateResource structure.
type UpdateResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /resources/{id}] updateResource", response, response.Code())
	}
}

// NewUpdateResourceOK creates a UpdateResourceOK with default headers values
func NewUpdateResourceOK() *UpdateResourceOK {
	return &UpdateResourceOK{}
}

/*
UpdateResourceOK describes a response with status code 200, with default header values.

The request is successful
*/
type UpdateResourceOK struct {
}

// IsSuccess returns true when this update resource o k response has a 2xx status code
func (o *UpdateResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update resource o k response has a 3xx status code
func (o *UpdateResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource o k response has a 4xx status code
func (o *UpdateResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update resource o k response has a 5xx status code
func (o *UpdateResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource o k response a status code equal to that given
func (o *UpdateResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update resource o k response
func (o *UpdateResourceOK) Code() int {
	return 200
}

func (o *UpdateResourceOK) Error() string {
	return fmt.Sprintf("[POST /resources/{id}][%d] updateResourceOK ", 200)
}

func (o *UpdateResourceOK) String() string {
	return fmt.Sprintf("[POST /resources/{id}][%d] updateResourceOK ", 200)
}

func (o *UpdateResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateResourceUnauthorized creates a UpdateResourceUnauthorized with default headers values
func NewUpdateResourceUnauthorized() *UpdateResourceUnauthorized {
	return &UpdateResourceUnauthorized{}
}

/*
UpdateResourceUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type UpdateResourceUnauthorized struct {
}

// IsSuccess returns true when this update resource unauthorized response has a 2xx status code
func (o *UpdateResourceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource unauthorized response has a 3xx status code
func (o *UpdateResourceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource unauthorized response has a 4xx status code
func (o *UpdateResourceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update resource unauthorized response has a 5xx status code
func (o *UpdateResourceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource unauthorized response a status code equal to that given
func (o *UpdateResourceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update resource unauthorized response
func (o *UpdateResourceUnauthorized) Code() int {
	return 401
}

func (o *UpdateResourceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /resources/{id}][%d] updateResourceUnauthorized ", 401)
}

func (o *UpdateResourceUnauthorized) String() string {
	return fmt.Sprintf("[POST /resources/{id}][%d] updateResourceUnauthorized ", 401)
}

func (o *UpdateResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateResourceNotFound creates a UpdateResourceNotFound with default headers values
func NewUpdateResourceNotFound() *UpdateResourceNotFound {
	return &UpdateResourceNotFound{}
}

/*
UpdateResourceNotFound describes a response with status code 404, with default header values.

Cannot find resource with the specified ID.
*/
type UpdateResourceNotFound struct {
}

// IsSuccess returns true when this update resource not found response has a 2xx status code
func (o *UpdateResourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update resource not found response has a 3xx status code
func (o *UpdateResourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update resource not found response has a 4xx status code
func (o *UpdateResourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update resource not found response has a 5xx status code
func (o *UpdateResourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update resource not found response a status code equal to that given
func (o *UpdateResourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update resource not found response
func (o *UpdateResourceNotFound) Code() int {
	return 404
}

func (o *UpdateResourceNotFound) Error() string {
	return fmt.Sprintf("[POST /resources/{id}][%d] updateResourceNotFound ", 404)
}

func (o *UpdateResourceNotFound) String() string {
	return fmt.Sprintf("[POST /resources/{id}][%d] updateResourceNotFound ", 404)
}

func (o *UpdateResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
