// Code generated by go-swagger; DO NOT EDIT.

package resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// InsertPermissionsForResourceReader is a Reader for the InsertPermissionsForResource structure.
type InsertPermissionsForResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertPermissionsForResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertPermissionsForResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewInsertPermissionsForResourceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertPermissionsForResourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertPermissionsForResourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /resources/{id}/permissions] insertPermissionsForResource", response, response.Code())
	}
}

// NewInsertPermissionsForResourceOK creates a InsertPermissionsForResourceOK with default headers values
func NewInsertPermissionsForResourceOK() *InsertPermissionsForResourceOK {
	return &InsertPermissionsForResourceOK{}
}

/*
InsertPermissionsForResourceOK describes a response with status code 200, with default header values.

successful operation
*/
type InsertPermissionsForResourceOK struct {
	Payload *models.Permissions
}

// IsSuccess returns true when this insert permissions for resource o k response has a 2xx status code
func (o *InsertPermissionsForResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for resource o k response has a 3xx status code
func (o *InsertPermissionsForResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for resource o k response has a 4xx status code
func (o *InsertPermissionsForResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for resource o k response has a 5xx status code
func (o *InsertPermissionsForResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for resource o k response a status code equal to that given
func (o *InsertPermissionsForResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert permissions for resource o k response
func (o *InsertPermissionsForResourceOK) Code() int {
	return 200
}

func (o *InsertPermissionsForResourceOK) Error() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForResourceOK) String() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForResourceOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *InsertPermissionsForResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertPermissionsForResourceCreated creates a InsertPermissionsForResourceCreated with default headers values
func NewInsertPermissionsForResourceCreated() *InsertPermissionsForResourceCreated {
	return &InsertPermissionsForResourceCreated{}
}

/*
InsertPermissionsForResourceCreated describes a response with status code 201, with default header values.

The request is successful
*/
type InsertPermissionsForResourceCreated struct {
}

// IsSuccess returns true when this insert permissions for resource created response has a 2xx status code
func (o *InsertPermissionsForResourceCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for resource created response has a 3xx status code
func (o *InsertPermissionsForResourceCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for resource created response has a 4xx status code
func (o *InsertPermissionsForResourceCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for resource created response has a 5xx status code
func (o *InsertPermissionsForResourceCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for resource created response a status code equal to that given
func (o *InsertPermissionsForResourceCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the insert permissions for resource created response
func (o *InsertPermissionsForResourceCreated) Code() int {
	return 201
}

func (o *InsertPermissionsForResourceCreated) Error() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceCreated ", 201)
}

func (o *InsertPermissionsForResourceCreated) String() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceCreated ", 201)
}

func (o *InsertPermissionsForResourceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForResourceBadRequest creates a InsertPermissionsForResourceBadRequest with default headers values
func NewInsertPermissionsForResourceBadRequest() *InsertPermissionsForResourceBadRequest {
	return &InsertPermissionsForResourceBadRequest{}
}

/*
InsertPermissionsForResourceBadRequest describes a response with status code 400, with default header values.

Request is not valid (validation error)
*/
type InsertPermissionsForResourceBadRequest struct {
}

// IsSuccess returns true when this insert permissions for resource bad request response has a 2xx status code
func (o *InsertPermissionsForResourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for resource bad request response has a 3xx status code
func (o *InsertPermissionsForResourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for resource bad request response has a 4xx status code
func (o *InsertPermissionsForResourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for resource bad request response has a 5xx status code
func (o *InsertPermissionsForResourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for resource bad request response a status code equal to that given
func (o *InsertPermissionsForResourceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert permissions for resource bad request response
func (o *InsertPermissionsForResourceBadRequest) Code() int {
	return 400
}

func (o *InsertPermissionsForResourceBadRequest) Error() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceBadRequest ", 400)
}

func (o *InsertPermissionsForResourceBadRequest) String() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceBadRequest ", 400)
}

func (o *InsertPermissionsForResourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForResourceUnauthorized creates a InsertPermissionsForResourceUnauthorized with default headers values
func NewInsertPermissionsForResourceUnauthorized() *InsertPermissionsForResourceUnauthorized {
	return &InsertPermissionsForResourceUnauthorized{}
}

/*
InsertPermissionsForResourceUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type InsertPermissionsForResourceUnauthorized struct {
}

// IsSuccess returns true when this insert permissions for resource unauthorized response has a 2xx status code
func (o *InsertPermissionsForResourceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for resource unauthorized response has a 3xx status code
func (o *InsertPermissionsForResourceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for resource unauthorized response has a 4xx status code
func (o *InsertPermissionsForResourceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for resource unauthorized response has a 5xx status code
func (o *InsertPermissionsForResourceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for resource unauthorized response a status code equal to that given
func (o *InsertPermissionsForResourceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert permissions for resource unauthorized response
func (o *InsertPermissionsForResourceUnauthorized) Code() int {
	return 401
}

func (o *InsertPermissionsForResourceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceUnauthorized ", 401)
}

func (o *InsertPermissionsForResourceUnauthorized) String() string {
	return fmt.Sprintf("[POST /resources/{id}/permissions][%d] insertPermissionsForResourceUnauthorized ", 401)
}

func (o *InsertPermissionsForResourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
