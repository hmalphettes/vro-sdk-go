// Code generated by go-swagger; DO NOT EDIT.

package catalog_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DownloadIconForTypeReader is a Reader for the DownloadIconForType structure.
type DownloadIconForTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadIconForTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDownloadIconForTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDownloadIconForTypeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /catalog/{namespace}/{type}/metadata/icon] downloadIconForType", response, response.Code())
	}
}

// NewDownloadIconForTypeOK creates a DownloadIconForTypeOK with default headers values
func NewDownloadIconForTypeOK() *DownloadIconForTypeOK {
	return &DownloadIconForTypeOK{}
}

/*
DownloadIconForTypeOK describes a response with status code 200, with default header values.

The request is successful
*/
type DownloadIconForTypeOK struct {
}

// IsSuccess returns true when this download icon for type o k response has a 2xx status code
func (o *DownloadIconForTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this download icon for type o k response has a 3xx status code
func (o *DownloadIconForTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download icon for type o k response has a 4xx status code
func (o *DownloadIconForTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this download icon for type o k response has a 5xx status code
func (o *DownloadIconForTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this download icon for type o k response a status code equal to that given
func (o *DownloadIconForTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the download icon for type o k response
func (o *DownloadIconForTypeOK) Code() int {
	return 200
}

func (o *DownloadIconForTypeOK) Error() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/{type}/metadata/icon][%d] downloadIconForTypeOK ", 200)
}

func (o *DownloadIconForTypeOK) String() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/{type}/metadata/icon][%d] downloadIconForTypeOK ", 200)
}

func (o *DownloadIconForTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadIconForTypeUnauthorized creates a DownloadIconForTypeUnauthorized with default headers values
func NewDownloadIconForTypeUnauthorized() *DownloadIconForTypeUnauthorized {
	return &DownloadIconForTypeUnauthorized{}
}

/*
DownloadIconForTypeUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type DownloadIconForTypeUnauthorized struct {
}

// IsSuccess returns true when this download icon for type unauthorized response has a 2xx status code
func (o *DownloadIconForTypeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this download icon for type unauthorized response has a 3xx status code
func (o *DownloadIconForTypeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this download icon for type unauthorized response has a 4xx status code
func (o *DownloadIconForTypeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this download icon for type unauthorized response has a 5xx status code
func (o *DownloadIconForTypeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this download icon for type unauthorized response a status code equal to that given
func (o *DownloadIconForTypeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the download icon for type unauthorized response
func (o *DownloadIconForTypeUnauthorized) Code() int {
	return 401
}

func (o *DownloadIconForTypeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/{type}/metadata/icon][%d] downloadIconForTypeUnauthorized ", 401)
}

func (o *DownloadIconForTypeUnauthorized) String() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/{type}/metadata/icon][%d] downloadIconForTypeUnauthorized ", 401)
}

func (o *DownloadIconForTypeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
