// Code generated by go-swagger; DO NOT EDIT.

package catalog_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// FetchPluginMetadataReader is a Reader for the FetchPluginMetadata structure.
type FetchPluginMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FetchPluginMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFetchPluginMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFetchPluginMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /catalog/{namespace}/metadata] fetchPluginMetadata", response, response.Code())
	}
}

// NewFetchPluginMetadataOK creates a FetchPluginMetadataOK with default headers values
func NewFetchPluginMetadataOK() *FetchPluginMetadataOK {
	return &FetchPluginMetadataOK{}
}

/*
FetchPluginMetadataOK describes a response with status code 200, with default header values.

The request is successful
*/
type FetchPluginMetadataOK struct {
	Payload *models.ModuleMetadata
}

// IsSuccess returns true when this fetch plugin metadata o k response has a 2xx status code
func (o *FetchPluginMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this fetch plugin metadata o k response has a 3xx status code
func (o *FetchPluginMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch plugin metadata o k response has a 4xx status code
func (o *FetchPluginMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this fetch plugin metadata o k response has a 5xx status code
func (o *FetchPluginMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch plugin metadata o k response a status code equal to that given
func (o *FetchPluginMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the fetch plugin metadata o k response
func (o *FetchPluginMetadataOK) Code() int {
	return 200
}

func (o *FetchPluginMetadataOK) Error() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/metadata][%d] fetchPluginMetadataOK  %+v", 200, o.Payload)
}

func (o *FetchPluginMetadataOK) String() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/metadata][%d] fetchPluginMetadataOK  %+v", 200, o.Payload)
}

func (o *FetchPluginMetadataOK) GetPayload() *models.ModuleMetadata {
	return o.Payload
}

func (o *FetchPluginMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModuleMetadata)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchPluginMetadataUnauthorized creates a FetchPluginMetadataUnauthorized with default headers values
func NewFetchPluginMetadataUnauthorized() *FetchPluginMetadataUnauthorized {
	return &FetchPluginMetadataUnauthorized{}
}

/*
FetchPluginMetadataUnauthorized describes a response with status code 401, with default header values.

User is not authorized
*/
type FetchPluginMetadataUnauthorized struct {
}

// IsSuccess returns true when this fetch plugin metadata unauthorized response has a 2xx status code
func (o *FetchPluginMetadataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this fetch plugin metadata unauthorized response has a 3xx status code
func (o *FetchPluginMetadataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this fetch plugin metadata unauthorized response has a 4xx status code
func (o *FetchPluginMetadataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this fetch plugin metadata unauthorized response has a 5xx status code
func (o *FetchPluginMetadataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this fetch plugin metadata unauthorized response a status code equal to that given
func (o *FetchPluginMetadataUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the fetch plugin metadata unauthorized response
func (o *FetchPluginMetadataUnauthorized) Code() int {
	return 401
}

func (o *FetchPluginMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/metadata][%d] fetchPluginMetadataUnauthorized ", 401)
}

func (o *FetchPluginMetadataUnauthorized) String() string {
	return fmt.Sprintf("[GET /catalog/{namespace}/metadata][%d] fetchPluginMetadataUnauthorized ", 401)
}

func (o *FetchPluginMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
