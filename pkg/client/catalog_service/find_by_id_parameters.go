// Code generated by go-swagger; DO NOT EDIT.

package catalog_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewFindByIDParams creates a new FindByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindByIDParams() *FindByIDParams {
	return &FindByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindByIDParamsWithTimeout creates a new FindByIDParams object
// with the ability to set a timeout on a request.
func NewFindByIDParamsWithTimeout(timeout time.Duration) *FindByIDParams {
	return &FindByIDParams{
		timeout: timeout,
	}
}

// NewFindByIDParamsWithContext creates a new FindByIDParams object
// with the ability to set a context for a request.
func NewFindByIDParamsWithContext(ctx context.Context) *FindByIDParams {
	return &FindByIDParams{
		Context: ctx,
	}
}

// NewFindByIDParamsWithHTTPClient creates a new FindByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindByIDParamsWithHTTPClient(client *http.Client) *FindByIDParams {
	return &FindByIDParams{
		HTTPClient: client,
	}
}

/*
FindByIDParams contains all the parameters to send to the API endpoint

	for the find by Id operation.

	Typically these are written to a http.Request.
*/
type FindByIDParams struct {

	// ID.
	ID string

	// Keys.
	Keys []string

	// Namespace.
	Namespace string

	// Type.
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindByIDParams) WithDefaults() *FindByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindByIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find by Id params
func (o *FindByIDParams) WithTimeout(timeout time.Duration) *FindByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find by Id params
func (o *FindByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find by Id params
func (o *FindByIDParams) WithContext(ctx context.Context) *FindByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find by Id params
func (o *FindByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find by Id params
func (o *FindByIDParams) WithHTTPClient(client *http.Client) *FindByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find by Id params
func (o *FindByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the find by Id params
func (o *FindByIDParams) WithID(id string) *FindByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the find by Id params
func (o *FindByIDParams) SetID(id string) {
	o.ID = id
}

// WithKeys adds the keys to the find by Id params
func (o *FindByIDParams) WithKeys(keys []string) *FindByIDParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the find by Id params
func (o *FindByIDParams) SetKeys(keys []string) {
	o.Keys = keys
}

// WithNamespace adds the namespace to the find by Id params
func (o *FindByIDParams) WithNamespace(namespace string) *FindByIDParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the find by Id params
func (o *FindByIDParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithType adds the typeVar to the find by Id params
func (o *FindByIDParams) WithType(typeVar string) *FindByIDParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the find by Id params
func (o *FindByIDParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *FindByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Keys != nil {

		// binding items for keys
		joinedKeys := o.bindParamKeys(reg)

		// query array param keys
		if err := r.SetQueryParam("keys", joinedKeys...); err != nil {
			return err
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamFindByID binds the parameter keys
func (o *FindByIDParams) bindParamKeys(formats strfmt.Registry) []string {
	keysIR := o.Keys

	var keysIC []string
	for _, keysIIR := range keysIR { // explode []string

		keysIIV := keysIIR // string as string
		keysIC = append(keysIC, keysIIV)
	}

	// items.CollectionFormat: "multi"
	keysIS := swag.JoinByFormat(keysIC, "multi")

	return keysIS
}
