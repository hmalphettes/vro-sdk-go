// Code generated by go-swagger; DO NOT EDIT.

package task_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteTaskReader is a Reader for the DeleteTask structure.
type DeleteTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteTaskNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tasks/{id}] deleteTask", response, response.Code())
	}
}

// NewDeleteTaskNoContent creates a DeleteTaskNoContent with default headers values
func NewDeleteTaskNoContent() *DeleteTaskNoContent {
	return &DeleteTaskNoContent{}
}

/*
DeleteTaskNoContent describes a response with status code 204, with default header values.

No content
*/
type DeleteTaskNoContent struct {
}

// IsSuccess returns true when this delete task no content response has a 2xx status code
func (o *DeleteTaskNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete task no content response has a 3xx status code
func (o *DeleteTaskNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete task no content response has a 4xx status code
func (o *DeleteTaskNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete task no content response has a 5xx status code
func (o *DeleteTaskNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete task no content response a status code equal to that given
func (o *DeleteTaskNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete task no content response
func (o *DeleteTaskNoContent) Code() int {
	return 204
}

func (o *DeleteTaskNoContent) Error() string {
	return fmt.Sprintf("[DELETE /tasks/{id}][%d] deleteTaskNoContent ", 204)
}

func (o *DeleteTaskNoContent) String() string {
	return fmt.Sprintf("[DELETE /tasks/{id}][%d] deleteTaskNoContent ", 204)
}

func (o *DeleteTaskNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTaskUnauthorized creates a DeleteTaskUnauthorized with default headers values
func NewDeleteTaskUnauthorized() *DeleteTaskUnauthorized {
	return &DeleteTaskUnauthorized{}
}

/*
DeleteTaskUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type DeleteTaskUnauthorized struct {
}

// IsSuccess returns true when this delete task unauthorized response has a 2xx status code
func (o *DeleteTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete task unauthorized response has a 3xx status code
func (o *DeleteTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete task unauthorized response has a 4xx status code
func (o *DeleteTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete task unauthorized response has a 5xx status code
func (o *DeleteTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete task unauthorized response a status code equal to that given
func (o *DeleteTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete task unauthorized response
func (o *DeleteTaskUnauthorized) Code() int {
	return 401
}

func (o *DeleteTaskUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /tasks/{id}][%d] deleteTaskUnauthorized ", 401)
}

func (o *DeleteTaskUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /tasks/{id}][%d] deleteTaskUnauthorized ", 401)
}

func (o *DeleteTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteTaskNotFound creates a DeleteTaskNotFound with default headers values
func NewDeleteTaskNotFound() *DeleteTaskNotFound {
	return &DeleteTaskNotFound{}
}

/*
DeleteTaskNotFound describes a response with status code 404, with default header values.

Can not find a Task with the specified ID or the user does not have 'read' access rights for that task
*/
type DeleteTaskNotFound struct {
}

// IsSuccess returns true when this delete task not found response has a 2xx status code
func (o *DeleteTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete task not found response has a 3xx status code
func (o *DeleteTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete task not found response has a 4xx status code
func (o *DeleteTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete task not found response has a 5xx status code
func (o *DeleteTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete task not found response a status code equal to that given
func (o *DeleteTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete task not found response
func (o *DeleteTaskNotFound) Code() int {
	return 404
}

func (o *DeleteTaskNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tasks/{id}][%d] deleteTaskNotFound ", 404)
}

func (o *DeleteTaskNotFound) String() string {
	return fmt.Sprintf("[DELETE /tasks/{id}][%d] deleteTaskNotFound ", 404)
}

func (o *DeleteTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
