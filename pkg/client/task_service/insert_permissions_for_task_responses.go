// Code generated by go-swagger; DO NOT EDIT.

package task_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// InsertPermissionsForTaskReader is a Reader for the InsertPermissionsForTask structure.
type InsertPermissionsForTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertPermissionsForTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertPermissionsForTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertPermissionsForTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertPermissionsForTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsertPermissionsForTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /tasks/{id}/permissions] insertPermissionsForTask", response, response.Code())
	}
}

// NewInsertPermissionsForTaskOK creates a InsertPermissionsForTaskOK with default headers values
func NewInsertPermissionsForTaskOK() *InsertPermissionsForTaskOK {
	return &InsertPermissionsForTaskOK{}
}

/*
InsertPermissionsForTaskOK describes a response with status code 200, with default header values.

The request is successful
*/
type InsertPermissionsForTaskOK struct {
	Payload *models.Permissions
}

// IsSuccess returns true when this insert permissions for task o k response has a 2xx status code
func (o *InsertPermissionsForTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert permissions for task o k response has a 3xx status code
func (o *InsertPermissionsForTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for task o k response has a 4xx status code
func (o *InsertPermissionsForTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert permissions for task o k response has a 5xx status code
func (o *InsertPermissionsForTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for task o k response a status code equal to that given
func (o *InsertPermissionsForTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert permissions for task o k response
func (o *InsertPermissionsForTaskOK) Code() int {
	return 200
}

func (o *InsertPermissionsForTaskOK) Error() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForTaskOK) String() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskOK  %+v", 200, o.Payload)
}

func (o *InsertPermissionsForTaskOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *InsertPermissionsForTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertPermissionsForTaskBadRequest creates a InsertPermissionsForTaskBadRequest with default headers values
func NewInsertPermissionsForTaskBadRequest() *InsertPermissionsForTaskBadRequest {
	return &InsertPermissionsForTaskBadRequest{}
}

/*
InsertPermissionsForTaskBadRequest describes a response with status code 400, with default header values.

The request is invalid(validation error)
*/
type InsertPermissionsForTaskBadRequest struct {
}

// IsSuccess returns true when this insert permissions for task bad request response has a 2xx status code
func (o *InsertPermissionsForTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for task bad request response has a 3xx status code
func (o *InsertPermissionsForTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for task bad request response has a 4xx status code
func (o *InsertPermissionsForTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for task bad request response has a 5xx status code
func (o *InsertPermissionsForTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for task bad request response a status code equal to that given
func (o *InsertPermissionsForTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert permissions for task bad request response
func (o *InsertPermissionsForTaskBadRequest) Code() int {
	return 400
}

func (o *InsertPermissionsForTaskBadRequest) Error() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskBadRequest ", 400)
}

func (o *InsertPermissionsForTaskBadRequest) String() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskBadRequest ", 400)
}

func (o *InsertPermissionsForTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForTaskUnauthorized creates a InsertPermissionsForTaskUnauthorized with default headers values
func NewInsertPermissionsForTaskUnauthorized() *InsertPermissionsForTaskUnauthorized {
	return &InsertPermissionsForTaskUnauthorized{}
}

/*
InsertPermissionsForTaskUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type InsertPermissionsForTaskUnauthorized struct {
}

// IsSuccess returns true when this insert permissions for task unauthorized response has a 2xx status code
func (o *InsertPermissionsForTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for task unauthorized response has a 3xx status code
func (o *InsertPermissionsForTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for task unauthorized response has a 4xx status code
func (o *InsertPermissionsForTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for task unauthorized response has a 5xx status code
func (o *InsertPermissionsForTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for task unauthorized response a status code equal to that given
func (o *InsertPermissionsForTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert permissions for task unauthorized response
func (o *InsertPermissionsForTaskUnauthorized) Code() int {
	return 401
}

func (o *InsertPermissionsForTaskUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskUnauthorized ", 401)
}

func (o *InsertPermissionsForTaskUnauthorized) String() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskUnauthorized ", 401)
}

func (o *InsertPermissionsForTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPermissionsForTaskNotFound creates a InsertPermissionsForTaskNotFound with default headers values
func NewInsertPermissionsForTaskNotFound() *InsertPermissionsForTaskNotFound {
	return &InsertPermissionsForTaskNotFound{}
}

/*
InsertPermissionsForTaskNotFound describes a response with status code 404, with default header values.

Can not find a task with the specified id
*/
type InsertPermissionsForTaskNotFound struct {
}

// IsSuccess returns true when this insert permissions for task not found response has a 2xx status code
func (o *InsertPermissionsForTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert permissions for task not found response has a 3xx status code
func (o *InsertPermissionsForTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert permissions for task not found response has a 4xx status code
func (o *InsertPermissionsForTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert permissions for task not found response has a 5xx status code
func (o *InsertPermissionsForTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this insert permissions for task not found response a status code equal to that given
func (o *InsertPermissionsForTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the insert permissions for task not found response
func (o *InsertPermissionsForTaskNotFound) Code() int {
	return 404
}

func (o *InsertPermissionsForTaskNotFound) Error() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskNotFound ", 404)
}

func (o *InsertPermissionsForTaskNotFound) String() string {
	return fmt.Sprintf("[POST /tasks/{id}/permissions][%d] insertPermissionsForTaskNotFound ", 404)
}

func (o *InsertPermissionsForTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
