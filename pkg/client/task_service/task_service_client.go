// Code generated by go-swagger; DO NOT EDIT.

package task_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new task service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for task service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTask(params *CreateTaskParams, opts ...ClientOption) (*CreateTaskAccepted, error)

	DeletePermissionsForTask(params *DeletePermissionsForTaskParams, opts ...ClientOption) (*DeletePermissionsForTaskAccepted, error)

	DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskNoContent, error)

	DeleteTaskPermissionRule(params *DeleteTaskPermissionRuleParams, opts ...ClientOption) (*DeleteTaskPermissionRuleAccepted, error)

	GetExecutions(params *GetExecutionsParams, opts ...ClientOption) (*GetExecutionsOK, error)

	GetPermissionsForTask(params *GetPermissionsForTaskParams, opts ...ClientOption) (*GetPermissionsForTaskOK, error)

	GetTask(params *GetTaskParams, opts ...ClientOption) (*GetTaskOK, error)

	GetTaskPermissionRule(params *GetTaskPermissionRuleParams, opts ...ClientOption) (*GetTaskPermissionRuleOK, error)

	GetTasks(params *GetTasksParams, opts ...ClientOption) (*GetTasksOK, error)

	InsertPermissionsForTask(params *InsertPermissionsForTaskParams, opts ...ClientOption) (*InsertPermissionsForTaskOK, error)

	UpdateTask(params *UpdateTaskParams, opts ...ClientOption) (*UpdateTaskOK, error)

	UpdateTaskPermissionRule(params *UpdateTaskPermissionRuleParams, opts ...ClientOption) (*UpdateTaskPermissionRuleAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTask creates task

Use this endpoint to schedule a new task.
*/
func (a *Client) CreateTask(params *CreateTaskParams, opts ...ClientOption) (*CreateTaskAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTask",
		Method:             "POST",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaskAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePermissionsForTask deletes task permissions

Deletes all permissions for a task with a given ID.
*/
func (a *Client) DeletePermissionsForTask(params *DeletePermissionsForTaskParams, opts ...ClientOption) (*DeletePermissionsForTaskAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePermissionsForTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePermissionsForTask",
		Method:             "DELETE",
		PathPattern:        "/tasks/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePermissionsForTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePermissionsForTaskAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePermissionsForTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTask deletes task

Use this endpoint to delete a scheduled task.
*/
func (a *Client) DeleteTask(params *DeleteTaskParams, opts ...ClientOption) (*DeleteTaskNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTask",
		Method:             "DELETE",
		PathPattern:        "/tasks/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTaskPermissionRule deletes permission rule

Deletes a single permission rule with a given ID.
*/
func (a *Client) DeleteTaskPermissionRule(params *DeleteTaskPermissionRuleParams, opts ...ClientOption) (*DeleteTaskPermissionRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTaskPermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTaskPermissionRule",
		Method:             "DELETE",
		PathPattern:        "/tasks/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTaskPermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTaskPermissionRuleAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTaskPermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutions gets task executions

Endpoint for retrieving all task executions until the current date.
*/
func (a *Client) GetExecutions(params *GetExecutionsParams, opts ...ClientOption) (*GetExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExecutions",
		Method:             "GET",
		PathPattern:        "/tasks/{id}/executions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPermissionsForTask gets task permissions

Retrieves task permissions.
*/
func (a *Client) GetPermissionsForTask(params *GetPermissionsForTaskParams, opts ...ClientOption) (*GetPermissionsForTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPermissionsForTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPermissionsForTask",
		Method:             "GET",
		PathPattern:        "/tasks/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPermissionsForTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPermissionsForTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPermissionsForTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTask gets task

Endpoint for retrieving a single task.
*/
func (a *Client) GetTask(params *GetTaskParams, opts ...ClientOption) (*GetTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTask",
		Method:             "GET",
		PathPattern:        "/tasks/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTaskPermissionRule gets permission rule

Retrieves details for a specific permission rule. Each rule contains information about the principal and the access rights assigned.
*/
func (a *Client) GetTaskPermissionRule(params *GetTaskPermissionRuleParams, opts ...ClientOption) (*GetTaskPermissionRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskPermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTaskPermissionRule",
		Method:             "GET",
		PathPattern:        "/tasks/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTaskPermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTaskPermissionRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTaskPermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTasks gets tasks

Endpoint for retrieving all tasks.
*/
func (a *Client) GetTasks(params *GetTasksParams, opts ...ClientOption) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTasks",
		Method:             "GET",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPermissionsForTask sets task permissions

Sets permissions for a task with a given ID.<br />Access rights : 'r' - VIEW,  'x' - EXECUTE, 'i' - INSPECT,  'c' - EDIT, 'a' - ADMIN
*/
func (a *Client) InsertPermissionsForTask(params *InsertPermissionsForTaskParams, opts ...ClientOption) (*InsertPermissionsForTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPermissionsForTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPermissionsForTask",
		Method:             "POST",
		PathPattern:        "/tasks/{id}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InsertPermissionsForTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InsertPermissionsForTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for insertPermissionsForTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTask updates task

Use this endpoint to update an already scheduled task. If the scheduling date is changed, the original task is rescheduled. It is not allowed to update the scheduled workflow. To update the scheduled workflow, remove the current task and schedule a new one.
*/
func (a *Client) UpdateTask(params *UpdateTaskParams, opts ...ClientOption) (*UpdateTaskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTaskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTask",
		Method:             "POST",
		PathPattern:        "/tasks/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTaskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTaskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTask: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTaskPermissionRule updates permission rule

Updates principal or access rights for a single permission rule with a given ID.
*/
func (a *Client) UpdateTaskPermissionRule(params *UpdateTaskPermissionRuleParams, opts ...ClientOption) (*UpdateTaskPermissionRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTaskPermissionRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTaskPermissionRule",
		Method:             "PUT",
		PathPattern:        "/tasks/{id}/permissions/{ruleId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTaskPermissionRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTaskPermissionRuleAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTaskPermissionRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
