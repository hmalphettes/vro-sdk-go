// Code generated by go-swagger; DO NOT EDIT.

package task_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vmware/vra-sdk-go/pkg/models"
)

// GetPermissionsForTaskReader is a Reader for the GetPermissionsForTask structure.
type GetPermissionsForTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPermissionsForTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPermissionsForTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPermissionsForTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPermissionsForTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tasks/{id}/permissions] getPermissionsForTask", response, response.Code())
	}
}

// NewGetPermissionsForTaskOK creates a GetPermissionsForTaskOK with default headers values
func NewGetPermissionsForTaskOK() *GetPermissionsForTaskOK {
	return &GetPermissionsForTaskOK{}
}

/*
GetPermissionsForTaskOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetPermissionsForTaskOK struct {
	Payload *models.Permissions
}

// IsSuccess returns true when this get permissions for task o k response has a 2xx status code
func (o *GetPermissionsForTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get permissions for task o k response has a 3xx status code
func (o *GetPermissionsForTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get permissions for task o k response has a 4xx status code
func (o *GetPermissionsForTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get permissions for task o k response has a 5xx status code
func (o *GetPermissionsForTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get permissions for task o k response a status code equal to that given
func (o *GetPermissionsForTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get permissions for task o k response
func (o *GetPermissionsForTaskOK) Code() int {
	return 200
}

func (o *GetPermissionsForTaskOK) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions][%d] getPermissionsForTaskOK  %+v", 200, o.Payload)
}

func (o *GetPermissionsForTaskOK) String() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions][%d] getPermissionsForTaskOK  %+v", 200, o.Payload)
}

func (o *GetPermissionsForTaskOK) GetPayload() *models.Permissions {
	return o.Payload
}

func (o *GetPermissionsForTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permissions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPermissionsForTaskUnauthorized creates a GetPermissionsForTaskUnauthorized with default headers values
func NewGetPermissionsForTaskUnauthorized() *GetPermissionsForTaskUnauthorized {
	return &GetPermissionsForTaskUnauthorized{}
}

/*
GetPermissionsForTaskUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type GetPermissionsForTaskUnauthorized struct {
}

// IsSuccess returns true when this get permissions for task unauthorized response has a 2xx status code
func (o *GetPermissionsForTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get permissions for task unauthorized response has a 3xx status code
func (o *GetPermissionsForTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get permissions for task unauthorized response has a 4xx status code
func (o *GetPermissionsForTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get permissions for task unauthorized response has a 5xx status code
func (o *GetPermissionsForTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get permissions for task unauthorized response a status code equal to that given
func (o *GetPermissionsForTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get permissions for task unauthorized response
func (o *GetPermissionsForTaskUnauthorized) Code() int {
	return 401
}

func (o *GetPermissionsForTaskUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions][%d] getPermissionsForTaskUnauthorized ", 401)
}

func (o *GetPermissionsForTaskUnauthorized) String() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions][%d] getPermissionsForTaskUnauthorized ", 401)
}

func (o *GetPermissionsForTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPermissionsForTaskNotFound creates a GetPermissionsForTaskNotFound with default headers values
func NewGetPermissionsForTaskNotFound() *GetPermissionsForTaskNotFound {
	return &GetPermissionsForTaskNotFound{}
}

/*
GetPermissionsForTaskNotFound describes a response with status code 404, with default header values.

Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow
*/
type GetPermissionsForTaskNotFound struct {
}

// IsSuccess returns true when this get permissions for task not found response has a 2xx status code
func (o *GetPermissionsForTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get permissions for task not found response has a 3xx status code
func (o *GetPermissionsForTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get permissions for task not found response has a 4xx status code
func (o *GetPermissionsForTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get permissions for task not found response has a 5xx status code
func (o *GetPermissionsForTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get permissions for task not found response a status code equal to that given
func (o *GetPermissionsForTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get permissions for task not found response
func (o *GetPermissionsForTaskNotFound) Code() int {
	return 404
}

func (o *GetPermissionsForTaskNotFound) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions][%d] getPermissionsForTaskNotFound ", 404)
}

func (o *GetPermissionsForTaskNotFound) String() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions][%d] getPermissionsForTaskNotFound ", 404)
}

func (o *GetPermissionsForTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
