// Code generated by go-swagger; DO NOT EDIT.

package task_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateTaskPermissionRuleReader is a Reader for the UpdateTaskPermissionRule structure.
type UpdateTaskPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTaskPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateTaskPermissionRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTaskPermissionRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTaskPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTaskPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /tasks/{id}/permissions/{ruleId}] updateTaskPermissionRule", response, response.Code())
	}
}

// NewUpdateTaskPermissionRuleAccepted creates a UpdateTaskPermissionRuleAccepted with default headers values
func NewUpdateTaskPermissionRuleAccepted() *UpdateTaskPermissionRuleAccepted {
	return &UpdateTaskPermissionRuleAccepted{}
}

/*
UpdateTaskPermissionRuleAccepted describes a response with status code 202, with default header values.

No content
*/
type UpdateTaskPermissionRuleAccepted struct {
}

// IsSuccess returns true when this update task permission rule accepted response has a 2xx status code
func (o *UpdateTaskPermissionRuleAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update task permission rule accepted response has a 3xx status code
func (o *UpdateTaskPermissionRuleAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task permission rule accepted response has a 4xx status code
func (o *UpdateTaskPermissionRuleAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update task permission rule accepted response has a 5xx status code
func (o *UpdateTaskPermissionRuleAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update task permission rule accepted response a status code equal to that given
func (o *UpdateTaskPermissionRuleAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the update task permission rule accepted response
func (o *UpdateTaskPermissionRuleAccepted) Code() int {
	return 202
}

func (o *UpdateTaskPermissionRuleAccepted) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleAccepted ", 202)
}

func (o *UpdateTaskPermissionRuleAccepted) String() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleAccepted ", 202)
}

func (o *UpdateTaskPermissionRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTaskPermissionRuleBadRequest creates a UpdateTaskPermissionRuleBadRequest with default headers values
func NewUpdateTaskPermissionRuleBadRequest() *UpdateTaskPermissionRuleBadRequest {
	return &UpdateTaskPermissionRuleBadRequest{}
}

/*
UpdateTaskPermissionRuleBadRequest describes a response with status code 400, with default header values.

The request is invalid(validation error)
*/
type UpdateTaskPermissionRuleBadRequest struct {
}

// IsSuccess returns true when this update task permission rule bad request response has a 2xx status code
func (o *UpdateTaskPermissionRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task permission rule bad request response has a 3xx status code
func (o *UpdateTaskPermissionRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task permission rule bad request response has a 4xx status code
func (o *UpdateTaskPermissionRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task permission rule bad request response has a 5xx status code
func (o *UpdateTaskPermissionRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update task permission rule bad request response a status code equal to that given
func (o *UpdateTaskPermissionRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update task permission rule bad request response
func (o *UpdateTaskPermissionRuleBadRequest) Code() int {
	return 400
}

func (o *UpdateTaskPermissionRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleBadRequest ", 400)
}

func (o *UpdateTaskPermissionRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleBadRequest ", 400)
}

func (o *UpdateTaskPermissionRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTaskPermissionRuleUnauthorized creates a UpdateTaskPermissionRuleUnauthorized with default headers values
func NewUpdateTaskPermissionRuleUnauthorized() *UpdateTaskPermissionRuleUnauthorized {
	return &UpdateTaskPermissionRuleUnauthorized{}
}

/*
UpdateTaskPermissionRuleUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type UpdateTaskPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this update task permission rule unauthorized response has a 2xx status code
func (o *UpdateTaskPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task permission rule unauthorized response has a 3xx status code
func (o *UpdateTaskPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task permission rule unauthorized response has a 4xx status code
func (o *UpdateTaskPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task permission rule unauthorized response has a 5xx status code
func (o *UpdateTaskPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update task permission rule unauthorized response a status code equal to that given
func (o *UpdateTaskPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update task permission rule unauthorized response
func (o *UpdateTaskPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *UpdateTaskPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleUnauthorized ", 401)
}

func (o *UpdateTaskPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleUnauthorized ", 401)
}

func (o *UpdateTaskPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTaskPermissionRuleNotFound creates a UpdateTaskPermissionRuleNotFound with default headers values
func NewUpdateTaskPermissionRuleNotFound() *UpdateTaskPermissionRuleNotFound {
	return &UpdateTaskPermissionRuleNotFound{}
}

/*
UpdateTaskPermissionRuleNotFound describes a response with status code 404, with default header values.

Can not find a task with the specified ID, the user does not have 'admin' access rights for that task, or the permission rule with the specified ID does not exist.
*/
type UpdateTaskPermissionRuleNotFound struct {
}

// IsSuccess returns true when this update task permission rule not found response has a 2xx status code
func (o *UpdateTaskPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task permission rule not found response has a 3xx status code
func (o *UpdateTaskPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task permission rule not found response has a 4xx status code
func (o *UpdateTaskPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task permission rule not found response has a 5xx status code
func (o *UpdateTaskPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update task permission rule not found response a status code equal to that given
func (o *UpdateTaskPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update task permission rule not found response
func (o *UpdateTaskPermissionRuleNotFound) Code() int {
	return 404
}

func (o *UpdateTaskPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleNotFound ", 404)
}

func (o *UpdateTaskPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[PUT /tasks/{id}/permissions/{ruleId}][%d] updateTaskPermissionRuleNotFound ", 404)
}

func (o *UpdateTaskPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
