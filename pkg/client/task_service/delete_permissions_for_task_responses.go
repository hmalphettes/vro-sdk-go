// Code generated by go-swagger; DO NOT EDIT.

package task_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePermissionsForTaskReader is a Reader for the DeletePermissionsForTask structure.
type DeletePermissionsForTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePermissionsForTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeletePermissionsForTaskAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeletePermissionsForTaskUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePermissionsForTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /tasks/{id}/permissions] deletePermissionsForTask", response, response.Code())
	}
}

// NewDeletePermissionsForTaskAccepted creates a DeletePermissionsForTaskAccepted with default headers values
func NewDeletePermissionsForTaskAccepted() *DeletePermissionsForTaskAccepted {
	return &DeletePermissionsForTaskAccepted{}
}

/*
DeletePermissionsForTaskAccepted describes a response with status code 202, with default header values.

No content
*/
type DeletePermissionsForTaskAccepted struct {
}

// IsSuccess returns true when this delete permissions for task accepted response has a 2xx status code
func (o *DeletePermissionsForTaskAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete permissions for task accepted response has a 3xx status code
func (o *DeletePermissionsForTaskAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for task accepted response has a 4xx status code
func (o *DeletePermissionsForTaskAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete permissions for task accepted response has a 5xx status code
func (o *DeletePermissionsForTaskAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for task accepted response a status code equal to that given
func (o *DeletePermissionsForTaskAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the delete permissions for task accepted response
func (o *DeletePermissionsForTaskAccepted) Code() int {
	return 202
}

func (o *DeletePermissionsForTaskAccepted) Error() string {
	return fmt.Sprintf("[DELETE /tasks/{id}/permissions][%d] deletePermissionsForTaskAccepted ", 202)
}

func (o *DeletePermissionsForTaskAccepted) String() string {
	return fmt.Sprintf("[DELETE /tasks/{id}/permissions][%d] deletePermissionsForTaskAccepted ", 202)
}

func (o *DeletePermissionsForTaskAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForTaskUnauthorized creates a DeletePermissionsForTaskUnauthorized with default headers values
func NewDeletePermissionsForTaskUnauthorized() *DeletePermissionsForTaskUnauthorized {
	return &DeletePermissionsForTaskUnauthorized{}
}

/*
DeletePermissionsForTaskUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type DeletePermissionsForTaskUnauthorized struct {
}

// IsSuccess returns true when this delete permissions for task unauthorized response has a 2xx status code
func (o *DeletePermissionsForTaskUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for task unauthorized response has a 3xx status code
func (o *DeletePermissionsForTaskUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for task unauthorized response has a 4xx status code
func (o *DeletePermissionsForTaskUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for task unauthorized response has a 5xx status code
func (o *DeletePermissionsForTaskUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for task unauthorized response a status code equal to that given
func (o *DeletePermissionsForTaskUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete permissions for task unauthorized response
func (o *DeletePermissionsForTaskUnauthorized) Code() int {
	return 401
}

func (o *DeletePermissionsForTaskUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /tasks/{id}/permissions][%d] deletePermissionsForTaskUnauthorized ", 401)
}

func (o *DeletePermissionsForTaskUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /tasks/{id}/permissions][%d] deletePermissionsForTaskUnauthorized ", 401)
}

func (o *DeletePermissionsForTaskUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePermissionsForTaskNotFound creates a DeletePermissionsForTaskNotFound with default headers values
func NewDeletePermissionsForTaskNotFound() *DeletePermissionsForTaskNotFound {
	return &DeletePermissionsForTaskNotFound{}
}

/*
DeletePermissionsForTaskNotFound describes a response with status code 404, with default header values.

Can not find a task with the specified ID or the user does not have 'read' access rights for that workflow
*/
type DeletePermissionsForTaskNotFound struct {
}

// IsSuccess returns true when this delete permissions for task not found response has a 2xx status code
func (o *DeletePermissionsForTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete permissions for task not found response has a 3xx status code
func (o *DeletePermissionsForTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete permissions for task not found response has a 4xx status code
func (o *DeletePermissionsForTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete permissions for task not found response has a 5xx status code
func (o *DeletePermissionsForTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete permissions for task not found response a status code equal to that given
func (o *DeletePermissionsForTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete permissions for task not found response
func (o *DeletePermissionsForTaskNotFound) Code() int {
	return 404
}

func (o *DeletePermissionsForTaskNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tasks/{id}/permissions][%d] deletePermissionsForTaskNotFound ", 404)
}

func (o *DeletePermissionsForTaskNotFound) String() string {
	return fmt.Sprintf("[DELETE /tasks/{id}/permissions][%d] deletePermissionsForTaskNotFound ", 404)
}

func (o *DeletePermissionsForTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
