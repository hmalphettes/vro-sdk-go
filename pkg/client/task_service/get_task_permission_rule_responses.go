// Code generated by go-swagger; DO NOT EDIT.

package task_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// GetTaskPermissionRuleReader is a Reader for the GetTaskPermissionRule structure.
type GetTaskPermissionRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskPermissionRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTaskPermissionRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTaskPermissionRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTaskPermissionRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tasks/{id}/permissions/{ruleId}] getTaskPermissionRule", response, response.Code())
	}
}

// NewGetTaskPermissionRuleOK creates a GetTaskPermissionRuleOK with default headers values
func NewGetTaskPermissionRuleOK() *GetTaskPermissionRuleOK {
	return &GetTaskPermissionRuleOK{}
}

/*
GetTaskPermissionRuleOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetTaskPermissionRuleOK struct {
	Payload *models.Permission
}

// IsSuccess returns true when this get task permission rule o k response has a 2xx status code
func (o *GetTaskPermissionRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get task permission rule o k response has a 3xx status code
func (o *GetTaskPermissionRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task permission rule o k response has a 4xx status code
func (o *GetTaskPermissionRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task permission rule o k response has a 5xx status code
func (o *GetTaskPermissionRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get task permission rule o k response a status code equal to that given
func (o *GetTaskPermissionRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get task permission rule o k response
func (o *GetTaskPermissionRuleOK) Code() int {
	return 200
}

func (o *GetTaskPermissionRuleOK) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions/{ruleId}][%d] getTaskPermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetTaskPermissionRuleOK) String() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions/{ruleId}][%d] getTaskPermissionRuleOK  %+v", 200, o.Payload)
}

func (o *GetTaskPermissionRuleOK) GetPayload() *models.Permission {
	return o.Payload
}

func (o *GetTaskPermissionRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Permission)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskPermissionRuleUnauthorized creates a GetTaskPermissionRuleUnauthorized with default headers values
func NewGetTaskPermissionRuleUnauthorized() *GetTaskPermissionRuleUnauthorized {
	return &GetTaskPermissionRuleUnauthorized{}
}

/*
GetTaskPermissionRuleUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type GetTaskPermissionRuleUnauthorized struct {
}

// IsSuccess returns true when this get task permission rule unauthorized response has a 2xx status code
func (o *GetTaskPermissionRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task permission rule unauthorized response has a 3xx status code
func (o *GetTaskPermissionRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task permission rule unauthorized response has a 4xx status code
func (o *GetTaskPermissionRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task permission rule unauthorized response has a 5xx status code
func (o *GetTaskPermissionRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get task permission rule unauthorized response a status code equal to that given
func (o *GetTaskPermissionRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get task permission rule unauthorized response
func (o *GetTaskPermissionRuleUnauthorized) Code() int {
	return 401
}

func (o *GetTaskPermissionRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions/{ruleId}][%d] getTaskPermissionRuleUnauthorized ", 401)
}

func (o *GetTaskPermissionRuleUnauthorized) String() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions/{ruleId}][%d] getTaskPermissionRuleUnauthorized ", 401)
}

func (o *GetTaskPermissionRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskPermissionRuleNotFound creates a GetTaskPermissionRuleNotFound with default headers values
func NewGetTaskPermissionRuleNotFound() *GetTaskPermissionRuleNotFound {
	return &GetTaskPermissionRuleNotFound{}
}

/*
GetTaskPermissionRuleNotFound describes a response with status code 404, with default header values.

Can not find a task with the specified ID, the user does not have 'read' access rights for that task, or the permission rule with the specified ID does not exist.
*/
type GetTaskPermissionRuleNotFound struct {
}

// IsSuccess returns true when this get task permission rule not found response has a 2xx status code
func (o *GetTaskPermissionRuleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task permission rule not found response has a 3xx status code
func (o *GetTaskPermissionRuleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task permission rule not found response has a 4xx status code
func (o *GetTaskPermissionRuleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task permission rule not found response has a 5xx status code
func (o *GetTaskPermissionRuleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get task permission rule not found response a status code equal to that given
func (o *GetTaskPermissionRuleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get task permission rule not found response
func (o *GetTaskPermissionRuleNotFound) Code() int {
	return 404
}

func (o *GetTaskPermissionRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions/{ruleId}][%d] getTaskPermissionRuleNotFound ", 404)
}

func (o *GetTaskPermissionRuleNotFound) String() string {
	return fmt.Sprintf("[GET /tasks/{id}/permissions/{ruleId}][%d] getTaskPermissionRuleNotFound ", 404)
}

func (o *GetTaskPermissionRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
