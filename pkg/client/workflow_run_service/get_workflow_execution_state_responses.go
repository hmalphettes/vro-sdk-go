// Code generated by go-swagger; DO NOT EDIT.

package workflow_run_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hmalphettes/vro-sdk-go/pkg/models"
)

// GetWorkflowExecutionStateReader is a Reader for the GetWorkflowExecutionState structure.
type GetWorkflowExecutionStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowExecutionStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowExecutionStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkflowExecutionStateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowExecutionStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workflows/{workflowId}/executions/{executionId}/state] getWorkflowExecutionState", response, response.Code())
	}
}

// NewGetWorkflowExecutionStateOK creates a GetWorkflowExecutionStateOK with default headers values
func NewGetWorkflowExecutionStateOK() *GetWorkflowExecutionStateOK {
	return &GetWorkflowExecutionStateOK{}
}

/*
GetWorkflowExecutionStateOK describes a response with status code 200, with default header values.

The request is successful
*/
type GetWorkflowExecutionStateOK struct {
	Payload *models.State
}

// IsSuccess returns true when this get workflow execution state o k response has a 2xx status code
func (o *GetWorkflowExecutionStateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflow execution state o k response has a 3xx status code
func (o *GetWorkflowExecutionStateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow execution state o k response has a 4xx status code
func (o *GetWorkflowExecutionStateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflow execution state o k response has a 5xx status code
func (o *GetWorkflowExecutionStateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow execution state o k response a status code equal to that given
func (o *GetWorkflowExecutionStateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflow execution state o k response
func (o *GetWorkflowExecutionStateOK) Code() int {
	return 200
}

func (o *GetWorkflowExecutionStateOK) Error() string {
	return fmt.Sprintf("[GET /workflows/{workflowId}/executions/{executionId}/state][%d] getWorkflowExecutionStateOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowExecutionStateOK) String() string {
	return fmt.Sprintf("[GET /workflows/{workflowId}/executions/{executionId}/state][%d] getWorkflowExecutionStateOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowExecutionStateOK) GetPayload() *models.State {
	return o.Payload
}

func (o *GetWorkflowExecutionStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.State)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowExecutionStateUnauthorized creates a GetWorkflowExecutionStateUnauthorized with default headers values
func NewGetWorkflowExecutionStateUnauthorized() *GetWorkflowExecutionStateUnauthorized {
	return &GetWorkflowExecutionStateUnauthorized{}
}

/*
GetWorkflowExecutionStateUnauthorized describes a response with status code 401, with default header values.

The user is not authorized
*/
type GetWorkflowExecutionStateUnauthorized struct {
}

// IsSuccess returns true when this get workflow execution state unauthorized response has a 2xx status code
func (o *GetWorkflowExecutionStateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow execution state unauthorized response has a 3xx status code
func (o *GetWorkflowExecutionStateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow execution state unauthorized response has a 4xx status code
func (o *GetWorkflowExecutionStateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow execution state unauthorized response has a 5xx status code
func (o *GetWorkflowExecutionStateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow execution state unauthorized response a status code equal to that given
func (o *GetWorkflowExecutionStateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workflow execution state unauthorized response
func (o *GetWorkflowExecutionStateUnauthorized) Code() int {
	return 401
}

func (o *GetWorkflowExecutionStateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /workflows/{workflowId}/executions/{executionId}/state][%d] getWorkflowExecutionStateUnauthorized ", 401)
}

func (o *GetWorkflowExecutionStateUnauthorized) String() string {
	return fmt.Sprintf("[GET /workflows/{workflowId}/executions/{executionId}/state][%d] getWorkflowExecutionStateUnauthorized ", 401)
}

func (o *GetWorkflowExecutionStateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetWorkflowExecutionStateNotFound creates a GetWorkflowExecutionStateNotFound with default headers values
func NewGetWorkflowExecutionStateNotFound() *GetWorkflowExecutionStateNotFound {
	return &GetWorkflowExecutionStateNotFound{}
}

/*
GetWorkflowExecutionStateNotFound describes a response with status code 404, with default header values.

Cannot find a workflow with the specified ID or the user does not have 'read' access rights for that workflow
*/
type GetWorkflowExecutionStateNotFound struct {
}

// IsSuccess returns true when this get workflow execution state not found response has a 2xx status code
func (o *GetWorkflowExecutionStateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflow execution state not found response has a 3xx status code
func (o *GetWorkflowExecutionStateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflow execution state not found response has a 4xx status code
func (o *GetWorkflowExecutionStateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflow execution state not found response has a 5xx status code
func (o *GetWorkflowExecutionStateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflow execution state not found response a status code equal to that given
func (o *GetWorkflowExecutionStateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflow execution state not found response
func (o *GetWorkflowExecutionStateNotFound) Code() int {
	return 404
}

func (o *GetWorkflowExecutionStateNotFound) Error() string {
	return fmt.Sprintf("[GET /workflows/{workflowId}/executions/{executionId}/state][%d] getWorkflowExecutionStateNotFound ", 404)
}

func (o *GetWorkflowExecutionStateNotFound) String() string {
	return fmt.Sprintf("[GET /workflows/{workflowId}/executions/{executionId}/state][%d] getWorkflowExecutionStateNotFound ", 404)
}

func (o *GetWorkflowExecutionStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
