// Code generated by go-swagger; DO NOT EDIT.

package workflow_run_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflow run service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow run service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AnswerUserInteraction(params *AnswerUserInteractionParams, opts ...ClientOption) (*AnswerUserInteractionNoContent, error)

	CancelWorkflowExecution(params *CancelWorkflowExecutionParams, opts ...ClientOption) (*CancelWorkflowExecutionNoContent, error)

	DeleteWorkflowRunExecution(params *DeleteWorkflowRunExecutionParams, opts ...ClientOption) (*DeleteWorkflowRunExecutionNoContent, error)

	GetAllExecutionsFor(params *GetAllExecutionsForParams, opts ...ClientOption) (*GetAllExecutionsForOK, error)

	GetUserInteraction(params *GetUserInteractionParams, opts ...ClientOption) (*GetUserInteractionOK, error)

	GetWorkflowExecution(params *GetWorkflowExecutionParams, opts ...ClientOption) (*GetWorkflowExecutionOK, *GetWorkflowExecutionNoContent, error)

	GetWorkflowExecutionLogs(params *GetWorkflowExecutionLogsParams, opts ...ClientOption) (*GetWorkflowExecutionLogsOK, error)

	GetWorkflowExecutionState(params *GetWorkflowExecutionStateParams, opts ...ClientOption) (*GetWorkflowExecutionStateOK, error)

	GetWorkflowExecutionStatistics(params *GetWorkflowExecutionStatisticsParams, opts ...ClientOption) (*GetWorkflowExecutionStatisticsOK, *GetWorkflowExecutionStatisticsNoContent, error)

	GetWorkflowExecutionSyslogs(params *GetWorkflowExecutionSyslogsParams, opts ...ClientOption) (*GetWorkflowExecutionSyslogsOK, error)

	StartWorkflowExecution(params *StartWorkflowExecutionParams, opts ...ClientOption) (*StartWorkflowExecutionOK, *StartWorkflowExecutionAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AnswerUserInteraction answers user interaction

Answers a user interaction for a specific workflow run. If a workflow run with ID: <b>executionId</b> has a user interaction request, the workflow run is suspended until a user answers the interaction request. To answer a user interaction, use this API call with appropriate parameters.
*/
func (a *Client) AnswerUserInteraction(params *AnswerUserInteractionParams, opts ...ClientOption) (*AnswerUserInteractionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnswerUserInteractionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "answerUserInteraction",
		Method:             "POST",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}/interaction",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AnswerUserInteractionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnswerUserInteractionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for answerUserInteraction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CancelWorkflowExecution cancels workflow run

Cancels a workflow run
*/
func (a *Client) CancelWorkflowExecution(params *CancelWorkflowExecutionParams, opts ...ClientOption) (*CancelWorkflowExecutionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelWorkflowExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelWorkflowExecution",
		Method:             "DELETE",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}/state",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelWorkflowExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelWorkflowExecutionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelWorkflowExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteWorkflowRunExecution deletes workflow run

Deletes a specific workflow run
*/
func (a *Client) DeleteWorkflowRunExecution(params *DeleteWorkflowRunExecutionParams, opts ...ClientOption) (*DeleteWorkflowRunExecutionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowRunExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWorkflowRunExecution",
		Method:             "DELETE",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkflowRunExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkflowRunExecutionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWorkflowRunExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllExecutionsFor gets all executions

Retrieves all workflow runs for a given workflow and filters by current user's permissions.
*/
func (a *Client) GetAllExecutionsFor(params *GetAllExecutionsForParams, opts ...ClientOption) (*GetAllExecutionsForOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllExecutionsForParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllExecutionsFor",
		Method:             "GET",
		PathPattern:        "/workflows/{workflowId}/executions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllExecutionsForReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllExecutionsForOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllExecutionsFor: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserInteraction gets user interaction

Retrieves user interaction details for a workflow run. If a workflow run with ID: <b>executionId</b> has a user interaction request, the workflow run is suspended until a user answers the interaction request. This API call returns the user interaction parameter, which has to be filled to answer it.
*/
func (a *Client) GetUserInteraction(params *GetUserInteractionParams, opts ...ClientOption) (*GetUserInteractionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserInteractionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserInteraction",
		Method:             "GET",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}/interaction",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserInteractionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserInteractionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserInteraction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowExecution gets workflow execution

Retrieves a workflow run for a given workflow. When request parameter showDetails is set to true additional information will be retrieved. In this case the result contains current execution stack of the workflow run.
*/
func (a *Client) GetWorkflowExecution(params *GetWorkflowExecutionParams, opts ...ClientOption) (*GetWorkflowExecutionOK, *GetWorkflowExecutionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowExecution",
		Method:             "GET",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetWorkflowExecutionOK:
		return value, nil, nil
	case *GetWorkflowExecutionNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflow_run_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowExecutionLogs gets workflow run logs

Provides information about each individual event that occurs when the workflow runs. This information includes a description of the event, the user who triggered it, the type and origin of the event, and the time and date when it occurred.
*/
func (a *Client) GetWorkflowExecutionLogs(params *GetWorkflowExecutionLogsParams, opts ...ClientOption) (*GetWorkflowExecutionLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowExecutionLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowExecutionLogs",
		Method:             "GET",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}/logs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowExecutionLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowExecutionLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowExecutionLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowExecutionState gets workflow execution state

Retrieves the current state for a requested workflow run
*/
func (a *Client) GetWorkflowExecutionState(params *GetWorkflowExecutionStateParams, opts ...ClientOption) (*GetWorkflowExecutionStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowExecutionStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowExecutionState",
		Method:             "GET",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}/state",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowExecutionStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowExecutionStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowExecutionState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowExecutionStatistics gets workflow execution statistics

Retrieves statistics for given workflow run.
*/
func (a *Client) GetWorkflowExecutionStatistics(params *GetWorkflowExecutionStatisticsParams, opts ...ClientOption) (*GetWorkflowExecutionStatisticsOK, *GetWorkflowExecutionStatisticsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowExecutionStatisticsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowExecutionStatistics",
		Method:             "GET",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}/statistics",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowExecutionStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetWorkflowExecutionStatisticsOK:
		return value, nil, nil
	case *GetWorkflowExecutionStatisticsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflow_run_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkflowExecutionSyslogs gets workflow run system and event logs

Provides logs generated by workflow scripting and system events.
*/
func (a *Client) GetWorkflowExecutionSyslogs(params *GetWorkflowExecutionSyslogsParams, opts ...ClientOption) (*GetWorkflowExecutionSyslogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowExecutionSyslogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkflowExecutionSyslogs",
		Method:             "GET",
		PathPattern:        "/workflows/{workflowId}/executions/{executionId}/syslogs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowExecutionSyslogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowExecutionSyslogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkflowExecutionSyslogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartWorkflowExecution starts workflow execution

Creates a new instance of a workflow's run, by using the passed parameters. The workflow run is an asynchronous, so the call does not return a response body.
*/
func (a *Client) StartWorkflowExecution(params *StartWorkflowExecutionParams, opts ...ClientOption) (*StartWorkflowExecutionOK, *StartWorkflowExecutionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartWorkflowExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startWorkflowExecution",
		Method:             "POST",
		PathPattern:        "/workflows/{workflowId}/executions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartWorkflowExecutionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *StartWorkflowExecutionOK:
		return value, nil, nil
	case *StartWorkflowExecutionAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for workflow_run_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
